# Local development stack for Knowledge Commons Works
#
# Usage::
#
#   $ docker-compose up --file docker-compose.dev.yml -d
#
# Following services are included:
# - Frontend: Nginx (exposed ports: 80 and 443)
# - Cache: Redis (exposed port: 6379)
# - UI application: UWSGI (not exposed)
# - API application: UWSGI (not exposed)
# - Cache: Redis (exposed port: 6379)
# - DB: (PostgresSQL) (exposed port: 5432 or 3306)
# - Message queue: RabbitMQ (exposed ports: 5672, 15672)
# - Search platform: (OpenSearch) (exposed ports: 9200, 9300)
# - OpenSearch Dashboard (view OS indexes) (exposed ports: 5601)
#

services:
  #Development proxy: This container terminates SSL and forwards requests into the application
  # Self-signed certificates are used for development and do not persist between restarts.  However, its a simply exercise to replace
  # the certificates with your own that can be trusted into the browser cert store.
  # Rotues:
  # - https://traefik.localtest.me -> Traefik dashboard
  # - https://kcworks.localtest.me -> Frontend application
  # - https://opensearch.localtest.me -> OpenSearch dashboard
  # - https://pgadmin.localtest.me -> pgAdmin
  proxy:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "443:443"
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.localtest.me`)
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.service: api@internal
  cache:
    extends:
      file: docker-services.yml
      service: cache
    volumes:
      - cache_data:/data
  db:
    extends:
      file: docker-services.yml
      service: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 20s
      retries: 5
    volumes:
      - database_data:/var/lib/postgresql/data
  mq:
    extends:
      file: docker-services.yml
      service: mq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - mq_data:/var/lib/rabbitmq
  pgadmin:
    extends:
      file: docker-services.yml
      service: pgadmin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    labels:
      traefik.enable: true
      traefik.http.routers.pgadmin.rule: Host(`pgadmin.localtest.me`)
      traefik.http.routers.pgadmin.entrypoints: websecure
      traefik.http.routers.pgadmin.tls: true
      traefik.http.services.pgadmin.loadbalancer.server.port: 80
  search:
    extends:
      file: docker-services.yml
      service: search
    volumes:
      - search_data:/usr/share/opensearch/data
  opensearch-dashboards:
    extends:
      file: docker-services.yml
      service: opensearch-dashboards
    labels:
      traefik.enable: true
      traefik.http.routers.kcworks-dashboard.rule: Host(`opensearch.localtest.me`)
      traefik.http.routers.kcworks-dashboard.entrypoints: websecure
      traefik.http.routers.kcworks-dashboard.tls: true
      traefik.http.services.kcworks-dashboard.loadbalancer.server.port: 5601
  frontend:
    extends:
      file: docker-services.yml
      service: frontend
    container_name: kcworks-frontend
    depends_on:
      - web-ui
      - web-api
    volumes:
      - ./kcworks/instance/static:/opt/static_data
    labels:
      traefik.enable: true
      traefik.http.routers.kcworks.rule: Host(`kcworks.localtest.me`)
      traefik.http.routers.kcworks.entrypoints: websecure
      traefik.http.routers.kcworks.tls: true
      traefik.http.routers.kcworks.service: kcworks
      traefik.http.services.kcworks.loadbalancer.server.port: 80
  # Inir container: This container is used to copy the static files from the instance folder to the static_data folder
  # In development (this file) we bind mount the static_data folder to the frontend container.
  # In production we need to copy the static assets to the static_data volume.
  # web-init:
  #   restart: no
  #   extends:
  #     file: docker-services.yml
  #     service: app
  #   command: ["cp -r /opt/invenio/var/instance/static/. /opt/static_data/"]
  #   volumes:
  #     - ./kcworks/app:/opt/invenio/src
  #     - ./kcworks/instance:/opt/invenio/var/instance
  #     - static_data:/opt/static_data
  # UI Application
  # This container holds Python, pip, the virtualenv, and the invenio code,
  # Node.js, NPM and some standard libraries Invenio usually needs
  web-ui:
    extends:
      file: docker-services.yml
      service: app
    container_name: kcworks-ui
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini"]
    #    image: monotasker/kcworks:latest
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - INVENIO_LOGGING_CONSOLE=True
      - INVENIO_LOGGING_CONSOLE_LEVEL=DEBUG
      - INVENIO_COMMONS_API_REQUEST_PROTOCOL=https
      # - INVENIO_LOGGING_FS_LEVEL=DEBUG
      # - INVENIO_LOGGING_FS_BACKUP_COUNT=10
      # - INVENIO_LOGGING_FS_LOGFILE=/opt/invenio/src/logs/invenio.log
    ports:
      - "5000"
    # depends_on:
    #   web-init:
    #     condition: service_completed_successfully
    volumes:
      - ./kcworks/modules:/opt/invenio
      - ./kcworks/app:/opt/invenio/src
      - ./kcworks/instance:/opt/invenio/var/instance
      - /${MIGRATION_LOCAL_DATA_DIR}:${MIGRATION_SERVER_DATA_DIR}

  # API Rest Application
  web-api:
    extends:
      file: docker-services.yml
      service: app
    container_name: kcworks-api
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini"]
    image: monotasker/kcworks:latest
    ports:
      - "5001"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - INVENIO_LOGGING_CONSOLE=False
      - INVENIO_LOGGING_CONSOLE_LEVEL=DEBUG
      - INVENIO_COMMONS_API_REQUEST_PROTOCOL=https
      # - INVENIO_LOGGING_FS_LEVEL=DEBUG
      # - INVENIO_LOGGING_FS_BACKUP_COUNT=10
      # - INVENIO_LOGGING_FS_LOGFILE=/opt/invenio/src/logs/invenio.log
    volumes:
      - ./kcworks/modules:/opt/invenio
      - ./kcworks/app:/opt/invenio/src
      - ./kcworks/instance:/opt/invenio/var/instance
      - /${MIGRATION_LOCAL_DATA_DIR}:${MIGRATION_SERVER_DATA_DIR}
    # depends_on:
    #   web-init:
    #     condition: service_completed_successfully
  # Worker
  worker:
    extends:
      file: docker-services.yml
      service: app
    container_name: kcworks-worker
    command: ["celery -A invenio_app.celery worker --beat --loglevel INFO"]
    image: monotasker/kcworks:latest
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - INVENIO_LOGGING_CONSOLE=True
      - INVENIO_LOGGING_CONSOLE_LEVEL=DEBUG
      - INVENIO_COMMONS_API_REQUEST_PROTOCOL=https
      # - INVENIO_LOGGING_FS_LEVEL=DEBUG
      # - INVENIO_LOGGING_FS_BACKUP_COUNT=10
      # - INVENIO_LOGGING_FS_LOGFILE=/opt/invenio/src/logs/invenio.log
    volumes:
      - ./kcworks/modules:/opt/invenio
      - ./kcworks/app:/opt/invenio/src
      - ./kcworks/instance:/opt/invenio/var/instance
      - static_data:/opt/static_data
      - /${MIGRATION_LOCAL_DATA_DIR}:${MIGRATION_SERVER_DATA_DIR}
    depends_on:
      # web-init:
      #   condition: service_completed_successfully
      search:
        condition: service_started
      cache:
        condition: service_started
      mq:
        condition: service_started
volumes:
  archived_data:
  static_data:
  uploaded_data:
  database_data:
  cache_data:
  mq_data:
  search_data:
  pgadmin_data:
