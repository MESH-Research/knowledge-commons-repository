# Example of a full infrastructure stack
#
# Note, this file is not suitable for a production deployment. It is only an
# example of all the infrastructure components needed in a real production
# deployment.
#
# Usage::
#
#   $ docker-compose up -f docker-compose.yml -d
#
# Following services are included:
# - Frontend: Nginx (exposed ports: 80 and 443)
# - Cache: Redis (exposed port: 6379)
# - DB: (PostgresSQL/MySQL) (exposed port: 5432 or 3306)
# - Message queue: RabbitMQ (exposed ports: 5672, 15672)
# - Search platform: (OpenSearch/Elasticsearch) (exposed ports: 9200, 9300)
# - OpenSearch Dashboard/Kibana (view OS/ES indexes) (exposed ports: 5601)
#
version: '2.2'
services:
  cache:
    extends:
      file: docker-services.yml
      service: cache
  db:
    extends:
      file: docker-services.yml
      service: db
  mq:
    extends:
      file: docker-services.yml
      service: mq
  search:
    extends:
      file: docker-services.yml
      service: search
  opensearch-dashboards:
    extends:
      file: docker-services.yml
      service: opensearch-dashboards
  pgadmin:
    extends:
      file: docker-services.yml
      service: pgadmin
  # Frontend
  frontend:
    extends:
      file: docker-services.yml
      service: frontend
    volumes:
      - ${INVENIO_INSTANCE_PATH}/static:/opt/invenio/var/instance/static
    ports:
      - "80:80"
      - "443:443"

  # Worker
  worker:
    extends:
      file: docker-services.yml
      service: app
    command: ["celery -A invenio_app.celery worker --beat --loglevel=INFO"]
    image: knowledge-commons-repository:latest
    volumes:
      - ${INVENIO_INSTANCE_PATH}:/opt/invenio/var/instance/data
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started