{"version":3,"file":"js/5668.6c1d1f6e1cb0602289ff.js","mappings":"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","sources":["webpack://invenio-assets/./templates/custom_fields/BookSeriesField.js","webpack://invenio-assets/./translations/invenio_rdm_records/messages/index.js","webpack://invenio-assets/./translations/invenio_rdm_records/i18next.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  FieldLabel,\n  GroupField,\n  Input,\n  Array,\n  TextField,\n} from \"react-invenio-forms\";\nimport { Grid, Form, Button, Icon } from \"semantic-ui-react\";\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\nimport { FieldArray, useFormikContext } from \"formik\";\n\nconst newSeries = {\n  series_title: \"\",\n  series_volume: \"\",\n};\n\nconst BookSeriesField = ({\n  fieldPath, // injected by the custom field loader via the `field` config property\n  series_title,\n  series_volume,\n  icon = \"list\",\n  description = \"\",\n  required = false,\n  label = \"\",\n  showEmptyValue = true,\n  addButtonLabel = \"Add new series\",\n}) => {\n  const { values, setFieldValue } = useFormikContext();\n  const [seriesLength, setSeriesLength] = useState(0);\n  const [haveChangedNumber, setHaveChangedNumber] = useState(false);\n\n  useEffect(() => {\n    if (!!haveChangedNumber) {\n      if (seriesLength < 0) {\n        // console.log(document.getElementById(`${fieldPath}.add-button`));\n        document.getElementById(`${fieldPath}.add-button`)?.focus();\n      } else {\n        document\n          .getElementById(`${fieldPath}.${seriesLength}.series_title`)\n          ?.focus();\n        // console.log(document.getElementById(`${fieldPath}.${seriesLength}.series_title`));\n      }\n    }\n  }, [seriesLength]);\n\n  useEffect(() => {\n    if (\n      showEmptyValue === true &&\n      (!values.custom_fields || !values.custom_fields[\"kcr:book_series\"])\n    ) {\n      setFieldValue(fieldPath, [newSeries]);\n    }\n  });\n\n  const handleAddNew = (arrayHelpers, newItem) => {\n    console.log(arrayHelpers);\n    setHaveChangedNumber(true);\n    arrayHelpers.push(newItem);\n    setSeriesLength(seriesLength + 1);\n  };\n\n  const handleRemove = (arrayHelpers, index) => {\n    setHaveChangedNumber(true);\n    arrayHelpers.remove(index);\n    setSeriesLength(seriesLength - 1);\n  };\n\n  return (\n    <FieldArray\n      name={fieldPath}\n      className=\"invenio-array-field\"\n      // showEmptyValue={showEmptyValue}\n      // addButtonLabel={addButtonLabel}\n      defaultNewValue={newSeries}\n      // description={description}\n      // icon={icon}\n      // label={\"\"}\n      render={(arrayHelpers) => (\n        <>\n          {/* <Form.Field required={required}>\n              <FieldLabel htmlFor={fieldPath} icon={labelIcon} label={label} />\n            </Form.Field> */}\n\n          {!!values.custom_fields\n            ? values.custom_fields[\"kcr:book_series\"]?.map(\n                ({ title, volume }, index) => {\n                  const fieldPathPrefix = `${fieldPath}.${index}`;\n                  // const hasNumber = (!!my_volume || my_volume!==\"\");\n                  return (\n                    <Form.Group key={index}>\n                      <TextField\n                        fieldPath={`${fieldPathPrefix}.series_title`}\n                        id={`${fieldPathPrefix}.series_title`}\n                        label={\n                          <label>\n                            <Icon name={icon} />\n                            {i18next.t(series_title.label)}\n                          </label>\n                        }\n                        required={required}\n                        placeholder={series_title.placeholder}\n                        description={series_title.description}\n                        width={11}\n                      />\n                      <TextField\n                        fieldPath={`${fieldPathPrefix}.series_volume`}\n                        id={`${fieldPathPrefix}.series_title`}\n                        label={i18next.t(series_volume.label)}\n                        required={required}\n                        placeholder={series_volume.placeholder}\n                        description={series_volume.description}\n                        width={4}\n                      />\n                      <Form.Field>\n                        <Button\n                          aria-label={i18next.t(\"Remove field\")}\n                          className=\"close-btn\"\n                          icon=\"close\"\n                          onClick={() => handleRemove(arrayHelpers, index)}\n                          type=\"button\"\n                          width={2}\n                        />\n                      </Form.Field>\n                    </Form.Group>\n                  );\n                }\n              )\n            : \"\"}\n          <Button\n            type=\"button\"\n            onClick={() => handleAddNew(arrayHelpers, newSeries)}\n            icon\n            className=\"align-self-end add-button\"\n            labelPosition=\"left\"\n            id={`${fieldPath}.add-button`}\n          >\n            <Icon name=\"add\" />\n            {addButtonLabel}\n          </Button>\n        </>\n      )}\n    />\n  );\n};\n\nBookSeriesField.propTypes = {\n  fieldPath: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  series_title: PropTypes.object,\n  series_volume: PropTypes.object,\n  required: PropTypes.bool,\n  showEmptyValue: PropTypes.bool,\n  icon: PropTypes.string,\n  description: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nexport { BookSeriesField };\n","import TRANSLATE_EN from \"./en/translations.json\";\nimport TRANSLATE_DE from \"./de/translations.json\";\nimport TRANSLATE_EL from \"./el/translations.json\";\n\nexport const translations = {\n  el: { translation: TRANSLATE_EL },\n  en: { translation: TRANSLATE_EN },\n  de: { translation: TRANSLATE_DE },\n};\n","// This file is part of InvenioRdmRecords\n// Copyright (C) 2022 CERN.\n//\n// Invenio RDM is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport i18n from \"i18next\";\n\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { translations } from \"./messages\";\nimport { initReactI18next } from \"react-i18next\";\n\nconst options = {\n  fallbackLng: \"en\", // fallback keys\n  returnEmptyString: false,\n  debug: process.env.NODE_ENV === \"development\",\n  resources: translations,\n  keySeparator: false,\n  nsSeparator: false,\n  // specify language detection order\n  detection: {\n    order: [\"htmlTag\"],\n    // cache user language off\n    caches: [],\n  },\n  react: {\n    // Set empty - to allow html tags convert to trans tags\n    // HTML TAG | Trans TAG\n    //  <span>  | <1>\n    transKeepBasicHtmlNodesFor: [],\n  },\n};\n\nconst i18next = i18n.createInstance();\ni18next.use(LanguageDetector).use(initReactI18next).init(options);\n\nexport { i18next };\n"],"names":["newSeries","series_title","series_volume","BookSeriesField","_ref","fieldPath","_ref$icon","icon","_ref$required","description","required","_ref$showEmptyValue","label","showEmptyValue","_ref$addButtonLabel","addButtonLabel","_useFormikContext","useFormikContext","values","setFieldValue","_useState","useState","_useState2","_slicedToArray","seriesLength","setSeriesLength","_useState3","_useState4","haveChangedNumber","setHaveChangedNumber","useEffect","_document$getElementB","_document$getElementB2","document","getElementById","concat","focus","custom_fields","React","FieldArray","name","className","defaultNewValue","render","arrayHelpers","_values$custom_fields","map","_ref2","index","title","volume","fieldPathPrefix","Form","Group","key","TextField","id","Icon","i18next","t","placeholder","width","Field","Button","onClick","remove","handleRemove","type","newItem","console","log","push","handleAddNew","labelPosition","propTypes","PropTypes","isRequired","translations","el","translation","en","TRANSLATE_EN","de","TRANSLATE_DE","options","fallbackLng","returnEmptyString","debug","process","resources","keySeparator","nsSeparator","detection","order","caches","react","transKeepBasicHtmlNodesFor","i18n","createInstance","use","LanguageDetector","initReactI18next","init"],"sourceRoot":""}