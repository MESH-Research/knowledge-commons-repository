{"version":3,"file":"js/invenio-communities-profile-custom.b670fe69680e8ffc90c1.js","mappings":"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","sources":["webpack://invenio-assets/./js/collections/api/CommunityApi.js","webpack://invenio-assets/./js/collections/api/members/api.js","webpack://invenio-assets/./js/collections/api/serializers.js","webpack://invenio-assets/./js/collections/settings/profile/CustomFieldSerializer.js","webpack://invenio-assets/./js/collections/settings/profile/RenameCommunitySlugButton.js","webpack://invenio-assets/./js/collections/settings/profile/DeleteCommunityModal.js","webpack://invenio-assets/./js/collections/settings/profile/DangerZone.js","webpack://invenio-assets/./js/collections/settings/profile/DeleteButton.js","webpack://invenio-assets/./js/collections/settings/profile/LogoUploader.js","webpack://invenio-assets/./js/collections/settings/profile/CommunityProfileForm.js","webpack://invenio-assets/./js/collections/settings/profile/index.js"],"sourcesContent":["// This file is part of Invenio-Communities\n// Copyright (C) 2021 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { http } from \"react-invenio-forms\";\n\n/**\n * API Client for communities.\n *\n * It mostly uses the API links passed to it from responses.\n *\n */\nexport class CommunityApi {\n  baseUrl = \"/api/communities\";\n\n  /**\n   * Create a new community.\n   *\n   * @param {object} payload - Serialized community\n   * @param {object} options - Custom options\n   */\n  async create(payload, options) {\n    options = options || {};\n    return http.post(this.baseUrl, payload, {\n      ...options,\n    });\n  }\n\n  /**\n   * Update a pre-existing community.\n   *\n   * @param {string} communityId - identifier\n   * @param {object} payload - Serialized community\n   * @param {object} options - Custom options\n   */\n  async update(communityId, payload, options) {\n    options = options || {};\n    return http.put(`${this.baseUrl}/${communityId}`, payload, {\n      ...options,\n    });\n  }\n\n  /**\n   * Delete the community.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} options - Custom options\n   */\n  async delete(communityId, options) {\n    options = options || {};\n    return http.delete(`${this.baseUrl}/${communityId}`, {\n      ...options,\n    });\n  }\n\n  /**\n   * Change the identifier of a community.\n   *\n   * @param {string} communityId - the community identifier\n   * @param {object} newSlug - the new slug\n   * @param {object} options - Custom options\n   */\n  async renameSlug(communityId, newSlug, options) {\n    options = options || {};\n    return http.post(\n      `${this.baseUrl}/${communityId}/rename`,\n      { slug: newSlug },\n      {\n        ...options,\n      }\n    );\n  }\n\n  /**\n   * Update the community logo.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} payload - File\n   * @param {object} options - Custom options\n   */\n  async updateLogo(communityId, payload, options) {\n    options = options || {};\n    const headers = {\n      \"Content-Type\": \"application/octet-stream\",\n    };\n    return http.put(`${this.baseUrl}/${communityId}/logo`, payload, {\n      headers: headers,\n      ...options,\n    });\n  }\n\n  /**\n   * Delete the community logo.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} options - Custom options\n   */\n  async deleteLogo(communityId, options) {\n    options = options || {};\n    const headers = {\n      \"Content-Type\": \"application/octet-stream\",\n    };\n    return http.delete(`${this.baseUrl}/${communityId}/logo`, {\n      headers: headers,\n      ...options,\n    });\n  }\n}\n","// This file is part of Invenio-communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { CommunityLinksExtractor } from \"../CommunityLinksExtractor\";\nimport { http } from \"react-invenio-forms\";\nimport { bulkMembersSerializer } from \"../serializers\";\n\nexport class CommunityMembersApi {\n  #urls;\n\n  constructor(community, LinksExtractor = CommunityLinksExtractor) {\n    this.#urls = new LinksExtractor(community);\n  }\n\n  get endpoint() {\n    return this.#urls.membersUrl;\n  }\n\n  getMembers = async () => {\n    return await http.get(this.endpoint);\n  };\n\n  removeMemberBase = async (payload) => {\n    return await http.delete(this.endpoint, {\n      data: payload,\n    });\n  };\n\n  removeMember = async ({ type, id }) => {\n    const payload = {\n      members: [{ type, id }],\n    };\n\n    return this.removeMemberBase(payload);\n  };\n\n  bulkRemoveMembers = async (members) => {\n    const memberSerialized = bulkMembersSerializer(members);\n\n    return this.removeMemberBase({ members: memberSerialized });\n  };\n\n  #updateMembers = async (payload, { refresh = false } = {}) => {\n    const url = new URL(this.endpoint);\n    const params = url.searchParams;\n    params.delete(\"refresh\");\n    refresh && params.set(\"refresh\", refresh);\n    url.search = params.toString();\n    return await http.put(url.toString(), payload);\n  };\n\n  updateRole = async (member, role) => {\n    const memberSerialized = bulkMembersSerializer([member]);\n    const payload = { members: memberSerialized, role: role };\n    return await this.#updateMembers(payload);\n  };\n\n  updateVisibility = async (member, visibility) => {\n    const memberSerialized = bulkMembersSerializer([member]);\n    const payload = { members: memberSerialized, visible: visibility };\n    return await this.#updateMembers(payload);\n  };\n\n  bulkUpdateRoles = (members, role) => {\n    const membersSerialized = bulkMembersSerializer(members);\n    const payload = { members: membersSerialized, role: role };\n    return this.#updateMembers(payload, { refresh: true });\n  };\n\n  bulkUpdateVisibilities = (members, visibility) => {\n    const membersSerialized = bulkMembersSerializer(members);\n\n    const payload = { members: membersSerialized, visible: visibility };\n    return this.#updateMembers(payload, { refresh: true });\n  };\n}\n","// This file is part of Invenio-communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nexport const errorSerializer = (error) =>\n  error?.response?.data?.message || error?.message;\n\nexport const payloadSerializer = (content, format) => ({\n  payload: {\n    content,\n    format,\n  },\n});\n\nexport const communityErrorSerializer = (error) => ({\n  message: error?.response?.data?.message,\n  errors: error?.response?.data?.errors,\n  status: error?.response?.data?.status,\n});\n\nexport const bulkMembersSerializer = (members) =>\n  Object.entries(members).map(([memberId, memberData]) => ({\n    id: memberData.id,\n    type: memberData.type,\n  }));\n","// This file is part of Invenio-Communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-Communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport _get from \"lodash/get\";\nimport _set from \"lodash/set\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isArray from \"lodash/isArray\";\n\nexport class CustomFieldSerializer {\n  constructor({\n    fieldpath,\n    deserializedDefault = null,\n    serializedDefault = null,\n    allowEmpty = false,\n    vocabularyFields = [],\n  }) {\n    this.fieldpath = fieldpath;\n    this.deserializedDefault = deserializedDefault;\n    this.serializedDefault = serializedDefault;\n    this.allowEmpty = allowEmpty;\n    this.vocabularyFields = vocabularyFields;\n  }\n\n  #mapCustomFields(record, customFields, mapValue) {\n    if (customFields !== null) {\n      for (const [key, value] of Object.entries(customFields)) {\n        const isVocabularyField = this.vocabularyFields.includes(key);\n        const _value = _isArray(value)\n          ? value.map((v, i) => mapValue(v, i, isVocabularyField))\n          : mapValue(value, null, isVocabularyField);\n        record = _set(record, `custom_fields.${key}`, _value);\n      }\n    }\n  }\n\n  deserialize(record) {\n    const _deserialize = (value, i = undefined, isVocabulary = false) => {\n      if (isVocabulary && value?.id) {\n        return value.id;\n      }\n      // Add __key if i is passed i.e is an array. This is needed because of ArrayField\n      // internal implementation\n      if (i) value.__key = i;\n      return value;\n    };\n    const _record = _cloneDeep(record);\n    const customFields = _get(record, this.fieldpath, this.deserializedDefault);\n    this.#mapCustomFields(_record, customFields, _deserialize);\n    return _record;\n  }\n\n  serialize(record) {\n    const _serialize = (value, i = undefined, isVocabulary = false) => {\n      if (isVocabulary && typeof value === \"string\") {\n        return { id: value };\n      }\n      // Delete internal __key from the sent request payload\n      delete value.__key;\n      return value;\n    };\n    const _record = _cloneDeep(record);\n    const customFields = _get(record, this.fieldpath, this.serializedDefault);\n    this.#mapCustomFields(_record, customFields, _serialize);\n    return _record;\n  }\n}\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2021 CERN.\n * Copyright (C) 2021 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { Component } from \"react\";\nimport { withCancel } from \"react-invenio-forms\";\nimport { Button, Form, Icon, Modal } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport PropTypes from \"prop-types\";\n\nexport class RenameCommunitySlugButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalOpen: false,\n      loading: false,\n      error: \"\",\n    };\n\n    this.formInputRef = React.createRef();\n    this.modalTriggerRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.formInputRef.current && this.formInputRef.current.focus();\n  }\n\n  componentWillUnmount() {\n    this.cancellableRename && this.cancellableRename.cancel();\n  }\n\n  handleOpen = () => this.setState({ modalOpen: true });\n\n  handleClose = () => {\n    this.setState({ modalOpen: false });\n    this.modalTriggerRef.current.focus();\n  };\n\n  handleChange = async (event) => {\n    // stop event propagation so the submit event is restricted to the modal\n    // form\n    event.stopPropagation();\n    const { community } = this.props;\n    const newSlug = this.formInputRef.current.value;\n    const client = new CommunityApi();\n\n    this.cancellableRename = withCancel(client.renameSlug(community.id, newSlug));\n    this.setState({ loading: true });\n\n    try {\n      await this.cancellableRename.promise;\n\n      window.location.href = `/communities/${newSlug}/settings`;\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n\n      this.setState({ loading: false });\n      const { errors } = communityErrorSerializer(error);\n\n      if (errors) {\n        const invalidIdError = errors\n          .filter((error) => error.field === \"slug\")\n          .map((error) => error.messages[0]);\n        this.setState({ error: invalidIdError });\n        this.formInputRef.current.focus();\n      }\n    }\n  };\n\n  render() {\n    const { modalOpen, loading, error } = this.state;\n\n    return (\n      <>\n        <Button\n          ref={this.modalTriggerRef}\n          compact\n          negative\n          onClick={this.handleOpen}\n          fluid\n          icon\n          labelPosition=\"left\"\n          type=\"button\"\n        >\n          <Icon name=\"pencil\" />\n          {i18next.t(\"Change identifier\")}\n        </Button>\n\n        <Modal open={modalOpen} onClose={this.handleClose} size=\"tiny\">\n          <Modal.Content>\n            <Form onSubmit={this.handleChange}>\n              <Form.Input\n                label={i18next.t(\"New unique identifier of the community\")}\n                placeholder={i18next.t(\"New unique identifier of the community\")}\n                fluid\n                input={{ ref: this.formInputRef }}\n                {...(error\n                  ? {\n                      error: {\n                        content: error,\n                        pointing: \"above\",\n                      },\n                    }\n                  : {})}\n              />\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              onClick={this.handleClose}\n              loading={loading}\n              disabled={loading}\n              floated=\"left\"\n            >\n              {i18next.t(\"Cancel\")}\n            </Button>\n            <Button\n              negative\n              onClick={this.handleChange}\n              loading={loading}\n              disabled={loading}\n            >\n              {i18next.t(\"Change\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </>\n    );\n  }\n}\n\nRenameCommunitySlugButton.propTypes = {\n  community: PropTypes.object.isRequired,\n  onError: PropTypes.func.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2023 CERN.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { Component } from \"react\";\nimport {\n  Button,\n  Icon,\n  Loader,\n  Modal,\n  Message,\n  Checkbox,\n  Input,\n} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { Trans } from \"react-i18next\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport { ErrorMessage, http, withCancel } from \"react-invenio-forms\";\n\nexport class DeleteCommunityModal extends Component {\n  constructor(props) {\n    super(props);\n    this.INITIAL_STATE = {\n      modalOpen: false,\n      loading: true,\n      checkboxMembers: false,\n      checkboxRecords: false,\n      checkboxSlug: false,\n      inputSlug: \"\",\n      error: undefined,\n    };\n    this.checkboxRef = React.createRef();\n    this.openModalBtnRef = React.createRef();\n    this.state = this.INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    this.updateCommunityMetrics();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { loading, modalOpen } = this.state;\n    if (!loading && modalOpen && modalOpen !== prevState.modalOpen) {\n      const {\n        current: { inputRef },\n      } = this.checkboxRef;\n      inputRef.current.focus();\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellableDelete && this.cancellableDelete.cancel();\n    this.cancellableMembersCountFetch && this.cancellableMembersCountFetch.cancel();\n    this.cancellableRecordsCountFetch && this.cancellableRecordsCountFetch.cancel();\n  }\n\n  updateCommunityMetrics = async () => {\n    this.setState({ loading: true });\n    const { community } = this.props;\n    this.cancellableMembersCountFetch = withCancel(http.get(community.links.members));\n    this.cancellableRecordsCountFetch = withCancel(http.get(community.links.records));\n\n    try {\n      const membersResponse = await this.cancellableMembersCountFetch.promise;\n      const recordsResponse = await this.cancellableRecordsCountFetch.promise;\n      this.setState({\n        loading: false,\n        membersCount: membersResponse.data.hits.total,\n        recordsCount:\n          recordsResponse.data.length === 0 ? 0 : recordsResponse.data.hits.total,\n      });\n    } catch (error) {\n      console.error(error);\n      const { message } = communityErrorSerializer(error);\n      if (message) {\n        this.setState({ error: message, loading: false });\n      }\n    }\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ inputSlug: event.target.value });\n  };\n\n  handleCheckboxChange = (e, { id, checked }) => {\n    if (id === \"members-confirm\") {\n      this.setState({\n        checkboxMembers: checked,\n      });\n    }\n    if (id === \"records-confirm\") {\n      this.setState({\n        checkboxRecords: checked,\n      });\n    }\n    if (id === \"slug-confirm\") {\n      this.setState({\n        checkboxSlug: checked,\n      });\n    }\n  };\n\n  handleButtonDisabled = (slug) => {\n    const { checkboxRecords, checkboxMembers, checkboxSlug, inputSlug } = this.state;\n    return !(checkboxMembers && checkboxRecords && checkboxSlug && inputSlug === slug);\n  };\n\n  openConfirmModal = () => this.setState({ modalOpen: true });\n\n  closeConfirmModal = () => {\n    let { loading } = this.state;\n    this.setState({ ...this.INITIAL_STATE, loading: loading });\n    this.openModalBtnRef?.current?.focus();\n  };\n\n  handleDelete = async () => {\n    this.setState({ loading: true });\n    const { onDelete, redirectURL } = this.props;\n\n    this.cancellableDelete = withCancel(onDelete());\n    try {\n      await this.cancellableDelete.promise;\n\n      if (redirectURL) {\n        window.location.href = redirectURL;\n      }\n\n      this.closeConfirmModal();\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n      console.error(error);\n      const { message } = communityErrorSerializer(error);\n      if (message) {\n        this.setState({ error: message, loading: false });\n      }\n    }\n  };\n\n  render() {\n    const {\n      modalOpen,\n      loading,\n      error,\n      checkboxMembers,\n      checkboxRecords,\n      checkboxSlug,\n      inputSlug,\n      membersCount,\n      recordsCount,\n    } = this.state;\n    const { label, community } = this.props;\n    const communitySlug = community.slug;\n    return (\n      <>\n        <Button\n          ref={this.openModalBtnRef}\n          compact\n          negative\n          onClick={this.openConfirmModal}\n          fluid\n          icon\n          labelPosition=\"left\"\n          type=\"button\"\n          aria-haspopup=\"dialog\"\n          aria-controls=\"warning-modal\"\n          aria-expanded={modalOpen}\n          id=\"delete-community-button\"\n        >\n          <Icon name=\"trash\" />\n          {label}\n        </Button>\n\n        <Modal\n          id=\"warning-modal\"\n          role=\"dialog\"\n          aria-labelledby=\"delete-community-button\"\n          open={modalOpen}\n          onClose={this.closeConfirmModal}\n          size=\"tiny\"\n        >\n          <Modal.Header as=\"h2\">\n            {i18next.t(\"Permanently delete community\")}\n          </Modal.Header>\n          {loading && <Loader active={loading} />}\n          <Modal.Content>\n            <p>\n              <Trans>\n                Are you <strong>absolutely sure</strong> you want to delete the\n                community?\n              </Trans>\n            </p>\n\n            <Message negative>\n              <Message.Header className=\"rel-mb-1\">\n                <Icon name=\"warning sign\" className=\"rel-mr-1\" />\n                {i18next.t(\"This action CANNOT be undone!\")}\n              </Message.Header>\n              <>\n                <Checkbox\n                  id=\"members-confirm\"\n                  ref={this.checkboxRef}\n                  label={\n                    <label htmlFor=\"members-confirm\">\n                      <Trans>\n                        <strong>{`${membersCount}`} members</strong> will be removed\n                        from the community.\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxMembers}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n                <Checkbox\n                  id=\"records-confirm\"\n                  label={\n                    <label htmlFor=\"records-confirm\">\n                      <Trans>\n                        <strong>{`${recordsCount}`} records</strong> will be removed\n                        from the community.\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxRecords}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n                <Checkbox\n                  id=\"slug-confirm\"\n                  label={\n                    <label htmlFor=\"slug-confirm\">\n                      <Trans>\n                        You <strong>CANNOT</strong> reuse the community identifier \"\n                        {{ communitySlug }}\".\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxSlug}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n              </>\n            </Message>\n\n            <label htmlFor=\"confirm-delete\">\n              <Trans>\n                Please type <strong>{{ communitySlug }}</strong> to confirm.\n              </Trans>\n            </label>\n            <Input\n              id=\"confirm-delete\"\n              fluid\n              value={inputSlug}\n              onChange={this.handleInputChange}\n            />\n          </Modal.Content>\n          <Modal.Actions>\n            {error && (\n              <ErrorMessage\n                header={i18next.t(\"Unable to delete\")}\n                content={i18next.t(error)}\n                icon=\"exclamation\"\n                className=\"text-align-left\"\n                negative\n              />\n            )}\n            <Button onClick={this.closeConfirmModal} floated=\"left\">\n              {i18next.t(\"Cancel\")}\n            </Button>\n            <Button\n              negative\n              onClick={() => this.handleDelete()}\n              disabled={this.handleButtonDisabled(communitySlug)}\n            >\n              {i18next.t(\"Permanently delete\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </>\n    );\n  }\n}\n\nDeleteCommunityModal.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  redirectURL: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  community: PropTypes.object.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2023 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React from \"react\";\nimport { Grid, Header, Segment } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { RenameCommunitySlugButton } from \"./RenameCommunitySlugButton\";\nimport PropTypes from \"prop-types\";\nimport { DeleteCommunityModal } from \"./DeleteCommunityModal\";\n\nconst DangerZone = ({ community, onError, permissions }) => {\n  if (permissions.can_delete || permissions.can_rename) {\n    return (\n      <Segment className=\"negative rel-mt-2\">\n        <Header as=\"h2\" className=\"negative\">\n          {i18next.t(\"Danger zone\")}\n        </Header>\n        <Grid>\n          {permissions.can_rename && (\n            <>\n              <Grid.Column mobile={16} tablet={10} computer={12}>\n                <Header as=\"h3\" size=\"small\">\n                  {i18next.t(\"Change identifier\")}\n                </Header>\n                <p>\n                  {i18next.t(\n                    \"Changing your community's unique identifier can have unintended side effects.\"\n                  )}\n                </p>\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={6} computer={4} floated=\"right\">\n                <RenameCommunitySlugButton community={community} onError={onError} />\n              </Grid.Column>\n            </>\n          )}\n          {permissions.can_delete && (\n            <>\n              <Grid.Column mobile={16} tablet={10} computer={12} floated=\"left\">\n                <Header as=\"h3\" size=\"small\">\n                  {i18next.t(\"Delete community\")}\n                </Header>\n                <p>\n                  {i18next.t(\n                    \"Once deleted, it will be gone forever. Please be certain.\"\n                  )}\n                </p>\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={6} computer={4} floated=\"right\">\n                <DeleteCommunityModal\n                  community={community}\n                  label={i18next.t(\"Delete community\")}\n                  redirectURL=\"/communities\"\n                  onDelete={async () => {\n                    const client = new CommunityApi();\n                    await client.delete(community.id);\n                  }}\n                />\n              </Grid.Column>\n            </>\n          )}\n        </Grid>\n      </Segment>\n    );\n  } else {\n    return null;\n  }\n};\n\nDangerZone.propTypes = {\n  community: PropTypes.object.isRequired,\n  onError: PropTypes.func.isRequired,\n  permissions: PropTypes.object.isRequired,\n};\n\nexport default DangerZone;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2021 CERN.\n * Copyright (C) 2021 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\n\nexport const DeleteButton = (props) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const cancelBtnRef = React.createRef();\n  const openModalBtnRef = React.createRef();\n\n  const handleOpen = () => setModalOpen(true);\n\n  const handleClose = () => {\n    setModalOpen(false);\n    setLoading(false);\n    openModalBtnRef?.current?.focus();\n  };\n\n  const handleDelete = async () => {\n    setLoading(true);\n    const { onDelete, redirectURL, onError } = props;\n    try {\n      await onDelete();\n      if (redirectURL) {\n        window.location.href = redirectURL;\n      }\n    } catch (error) {\n      onError(error);\n    }\n    handleClose();\n  };\n\n  useEffect(() => {\n    if (modalOpen) cancelBtnRef?.current?.focus();\n  }, [modalOpen, cancelBtnRef]);\n\n  const { label, confirmationMessage, id } = props;\n\n  return (\n    <>\n      <Button\n        ref={openModalBtnRef}\n        compact\n        negative\n        onClick={handleOpen}\n        fluid\n        icon\n        labelPosition=\"left\"\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-controls=\"warning-modal\"\n        aria-expanded={modalOpen}\n        id={id}\n      >\n        <Icon name=\"trash\" />\n        {label}\n      </Button>\n\n      <Modal\n        id=\"warning-modal\"\n        role=\"dialog\"\n        aria-labelledby={id}\n        open={modalOpen}\n        onClose={handleClose}\n        size=\"tiny\"\n      >\n        <Modal.Content>{confirmationMessage}</Modal.Content>\n        <Modal.Actions>\n          <Button\n            ref={cancelBtnRef}\n            onClick={handleClose}\n            loading={loading}\n            floated=\"left\"\n          >\n            {i18next.t(\"Cancel\")}\n          </Button>\n          <Button negative onClick={handleDelete} loading={loading}>\n            {i18next.t(\"Delete\")}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nDeleteButton.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  redirectURL: PropTypes.string.isRequired,\n  onError: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  confirmationMessage: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2022 CERN.\n * Copyright (C) 2021-2023 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { humanReadableBytes } from \"react-invenio-forms\";\nimport { Image } from \"react-invenio-forms\";\nimport { Button, Divider, Header, Icon, Message } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { DeleteButton } from \"./DeleteButton\";\nimport PropTypes from \"prop-types\";\n\nfunction noCacheUrl(url) {\n  const result = new URL(url);\n  const randomValue = new Date().getMilliseconds() * 5;\n  result.searchParams.set(\"no-cache\", randomValue.toString());\n  return result.toString();\n}\n\nconst LogoUploader = ({ community, defaultLogo, hasLogo, onError, logoMaxSize }) => {\n  /* State */\n  // props initilization is fine since original props don't change after\n  // initial mounting.\n  const [logoUrl, logoSetUrl] = useState(community.links.logo);\n  const [logoUpdated, logoSetUpdated] = useState(false);\n  const [logoExists, logoSetExists] = useState(hasLogo);\n\n  // Nicer naming\n  const logoDefault = defaultLogo;\n\n  let dropzoneParams = {\n    preventDropOnDocument: true,\n    onDropAccepted: async (acceptedFiles) => {\n      const file = acceptedFiles[0];\n\n      try {\n        const client = new CommunityApi();\n        await client.updateLogo(community.id, file);\n\n        const logoUrlNoCache = noCacheUrl(logoUrl);\n        logoSetUrl(logoUrlNoCache);\n        logoSetUpdated(true);\n        logoSetExists(true);\n      } catch (error) {\n        onError(error);\n      }\n    },\n    onDropRejected: (rejectedFiles) => {\n      // TODO: show error message when files are rejected e.g size limit\n      console.error(rejectedFiles[0].errors);\n    },\n    multiple: false,\n    noClick: true,\n    noDrag: true,\n    noKeyboard: true,\n    disabled: false,\n    maxFiles: 1,\n    maxSize: 5000000, // 5Mb limit\n    accept: \".jpeg,.jpg,.png\",\n  };\n\n  const deleteLogo = async () => {\n    const client = new CommunityApi();\n    await client.deleteLogo(community.id);\n\n    const logoUrlNoCache = noCacheUrl(logoUrl);\n    logoSetUrl(logoUrlNoCache);\n    logoSetUpdated(true);\n    logoSetExists(false);\n  };\n\n  return (\n    <Dropzone {...dropzoneParams}>\n      {({ getRootProps, getInputProps, open: openFileDialog }) => (\n        <>\n          <span {...getRootProps()}>\n            <input {...getInputProps()} />\n            <Header as=\"h2\" size=\"small\" className=\"\">\n              {i18next.t(\"Collection profile image\")}\n            </Header>\n            <Image\n              /* Change in key will cause a remounting. */\n              key={logoUrl}\n              src={logoUrl}\n              fallbackSrc={logoDefault}\n              loadFallbackFirst\n              fluid\n              wrapped\n              rounded\n              className=\"community-logo settings\"\n            />\n\n            <Divider hidden />\n          </span>\n\n          <Button\n            fluid\n            icon\n            labelPosition=\"left\"\n            type=\"button\"\n            onClick={openFileDialog}\n            className=\"rel-mt-1 rel-mb-1\"\n          >\n            <Icon name=\"upload\" />\n            {i18next.t(\"Upload new picture\")}\n          </Button>\n          <label className=\"helptext\">\n            {i18next.t(\"File must be smaller than {{fileSize}}\", {\n              fileSize: humanReadableBytes(logoMaxSize, true),\n            })}\n          </label>\n          {logoExists && (\n            <DeleteButton\n              id=\"delete-picture-button\"\n              label={i18next.t(\"Delete picture\")}\n              confirmationMessage={\n                <Header as=\"h2\" size=\"medium\">\n                  {i18next.t(\"Are you sure you want to delete this picture?\")}\n                </Header>\n              }\n              onDelete={deleteLogo}\n              onError={onError}\n            />\n          )}\n          {logoUpdated && (\n            <Message\n              info\n              icon=\"warning circle\"\n              size=\"small\"\n              content={i18next.t(\n                \"It may take a few moments for changes to be visible everywhere\"\n              )}\n            />\n          )}\n        </>\n      )}\n    </Dropzone>\n  );\n};\n\nLogoUploader.propTypes = {\n  community: PropTypes.object.isRequired,\n  defaultLogo: PropTypes.string.isRequired,\n  hasLogo: PropTypes.bool.isRequired,\n  onError: PropTypes.func.isRequired,\n  logoMaxSize: PropTypes.number.isRequired,\n};\n\nexport default LogoUploader;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2023 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport { Formik } from \"formik\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _defaultsDeep from \"lodash/defaultsDeep\";\nimport _get from \"lodash/get\";\nimport _isArray from \"lodash/isArray\";\nimport _isBoolean from \"lodash/isBoolean\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isNull from \"lodash/isNull\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isObject from \"lodash/isObject\";\nimport _map from \"lodash/map\";\nimport _mapValues from \"lodash/mapValues\";\nimport _pick from \"lodash/pick\";\nimport _pickBy from \"lodash/pickBy\";\nimport _unset from \"lodash/unset\";\nimport React, { Component } from \"react\";\nimport { FundingField } from \"@js/invenio_vocabularies\";\nimport {\n  AccordionField,\n  CustomFields,\n  FieldLabel,\n  RemoteSelectField,\n  SelectField,\n  TextField,\n  TextAreaField,\n} from \"react-invenio-forms\";\nimport { Button, Form, Grid, Icon, Message, Divider } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { CommunityApi } from \"../../api\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport { CustomFieldSerializer } from \"./CustomFieldSerializer\";\nimport PropTypes from \"prop-types\";\nimport { default as DangerZone } from \"./DangerZone\";\nimport { default as LogoUploader } from \"./LogoUploader\";\nimport Overridable from \"react-overridable\";\n\nconst COMMUNITY_VALIDATION_SCHEMA = Yup.object({\n  metadata: Yup.object({\n    title: Yup.string().max(250, i18next.t(\"Maximum number of characters is 2000\")),\n    description: Yup.string().max(\n      250,\n      i18next.t(\"Maximum number of characters is 250\")\n    ),\n    website: Yup.string().url(i18next.t(\"Must be a valid URL\")),\n    type: Yup.object().shape({\n      id: Yup.string(),\n    }),\n  }),\n});\n\n/**\n * Remove empty fields from community\n * Copied from react-invenio-deposit\n * @method\n * @param {object} obj - potentially empty object\n * @returns {object} community - without empty fields\n */\nconst removeEmptyValues = (obj) => {\n  if (_isArray(obj)) {\n    let mappedValues = obj.map((value) => removeEmptyValues(value));\n    return mappedValues.filter((value) => {\n      if (_isBoolean(value) || _isNumber(value)) {\n        return value;\n      }\n      return !_isEmpty(value);\n    });\n  } else if (_isObject(obj)) {\n    let mappedValues = _mapValues(obj, (value) => removeEmptyValues(value));\n    return _pickBy(mappedValues, (value) => {\n      if (_isArray(value) || _isObject(value)) {\n        return !_isEmpty(value);\n      }\n      return !_isNull(value);\n    });\n  }\n  return _isNumber(obj) || _isBoolean(obj) || obj ? obj : null;\n};\n\nclass CommunityProfileForm extends Component {\n  state = {\n    error: \"\",\n  };\n  knownOrganizations = {};\n\n  getInitialValues = () => {\n    const { community } = this.props;\n    let initialValues = _defaultsDeep(community, {\n      id: \"\",\n      slug: \"\",\n      metadata: {\n        description: \"\",\n        title: \"\",\n        curation_policy: \"\",\n        type: {},\n        website: \"\",\n        organizations: [],\n        funding: [],\n      },\n      // TODO: should this come from the backend?\n      access: {\n        visibility: \"public\",\n        member_policy: \"open\",\n        record_policy: \"open\",\n      },\n    });\n\n    // create a map with all organizations that are not custom (part of the\n    // vocabulary), so that on form submission, newly custom organization input\n    // by the user can be identified and correctly sent to the backend.\n    const organizationsNames = initialValues.metadata.organizations.map((org) => {\n      const isNonCustomOrganization = org.id;\n      if (isNonCustomOrganization) {\n        this.knownOrganizations[org.name] = org.id;\n      }\n      return org.name;\n    });\n\n    _unset(initialValues, \"metadata.type.title\");\n    /**\n     * Deserializes a funding record (e.g. funder or award)\n     *\n     * @param {object} fund\n     *\n     * @returns {object} an object containing the deserialized record\n     */\n    const deserializeFunding = (fund) => {\n      const _deserialize = (value) => {\n        const deserializedValue = _cloneDeep(value);\n\n        if (value?.title_l10n) {\n          deserializedValue.title = value.title_l10n;\n        }\n\n        if (value.identifiers) {\n          const allowedIdentifiers = [\"url\"];\n\n          allowedIdentifiers.forEach((identifier) => {\n            let identifierValue = null;\n            value.identifiers.forEach((v) => {\n              if (v.scheme === identifier) {\n                identifierValue = v.identifier;\n              }\n            });\n\n            if (identifierValue) {\n              deserializedValue[identifier] = identifierValue;\n            }\n          });\n\n          delete deserializedValue[\"identifiers\"];\n        }\n        return deserializedValue;\n      };\n\n      let deserializedValue = {};\n      if (fund !== null) {\n        deserializedValue = Array.isArray(fund)\n          ? fund.map(_deserialize)\n          : _deserialize(fund);\n      }\n\n      return deserializedValue;\n    };\n\n    const funding = initialValues.ui.funding?.map((fund) => {\n      return {\n        ...(fund.award && { award: deserializeFunding(fund.award) }),\n        funder: deserializeFunding(fund.funder),\n      };\n    });\n    const { customFields } = this.props;\n\n    // Deserialize custom fields\n    initialValues = new CustomFieldSerializer({\n      fieldpath: \"custom_fields\",\n      deserializedDefault: {},\n      serializedDefault: {},\n      vocabularyFields: customFields.vocabularies,\n    }).deserialize(initialValues);\n\n    return {\n      ...initialValues,\n      metadata: {\n        ...initialValues.metadata,\n        organizations: organizationsNames,\n        funding,\n      },\n    };\n  };\n\n  /**\n   * Serializes community values\n   *\n   * @param {object} values\n   *\n   * @returns\n   */\n  serializeValues = (values) => {\n    /**\n     * Serializes a funding record (e.g. funder or award)\n     *\n     * @param {object} fund\n     *\n     * @returns {object} an object containing the serialized record\n     */\n    const serializeFunding = (fund) => {\n      const _serialize = (value) => {\n        if (value.id) {\n          return { id: value.id };\n        }\n\n        // Record is a custom record, without explicit 'id'\n        let clonedValue = _cloneDeep(value);\n        // allowed keys\n        const allowedKeys = [\"identifiers\", \"number\", \"title\"];\n        clonedValue = _pick(clonedValue, allowedKeys);\n\n        if (value.title) {\n          clonedValue.title = {\n            en: value.title,\n          };\n        }\n\n        if (value.url) {\n          clonedValue.identifiers = [\n            {\n              identifier: value.url,\n              scheme: \"url\",\n            },\n          ];\n          delete clonedValue[\"url\"];\n        }\n\n        return clonedValue;\n      };\n\n      let serializedValue = {};\n      if (fund !== null) {\n        serializedValue = Array.isArray(fund) ? fund.map(_serialize) : _serialize(fund);\n      }\n      return serializedValue;\n    };\n\n    let submittedCommunity = _cloneDeep(values);\n\n    // Serialize organisations. If it is known and has an id, serialize a pair 'id/name'. Otherwise use 'name' only\n    const organizations = submittedCommunity.metadata.organizations.map(\n      (organization) => {\n        const orgID = this.knownOrganizations[organization];\n        return {\n          ...(orgID && { id: orgID }),\n          name: organization,\n        };\n      }\n    );\n    // Serialize each funding record, award being optional.\n    const funding = submittedCommunity.metadata?.funding?.map((fund) => {\n      return {\n        ...(fund.award && { award: serializeFunding(fund.award) }),\n        funder: serializeFunding(fund.funder),\n      };\n    });\n    const { customFields } = this.props;\n    // Serialize custom fields\n    submittedCommunity = new CustomFieldSerializer({\n      fieldpath: \"custom_fields\",\n      deserializedDefault: {},\n      serializedDefault: {},\n      vocabularyFields: customFields.vocabularies,\n    }).serialize(submittedCommunity);\n\n    submittedCommunity = {\n      ...submittedCommunity,\n      metadata: { ...values.metadata, organizations, funding },\n    };\n\n    // Clean values\n    submittedCommunity = removeEmptyValues(submittedCommunity);\n\n    return submittedCommunity;\n  };\n\n  setGlobalError = (error) => {\n    const { message } = communityErrorSerializer(error);\n    this.setState({ error: message });\n  };\n\n  onSubmit = async (values, { setSubmitting, setFieldError }) => {\n    setSubmitting(true);\n    const payload = this.serializeValues(values);\n    const client = new CommunityApi();\n    const { community } = this.props;\n\n    try {\n      await client.update(community.id, payload);\n      window.location.reload();\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n\n      const { message, errors } = communityErrorSerializer(error);\n\n      setSubmitting(false);\n\n      if (message) {\n        this.setGlobalError(error);\n      }\n      if (errors) {\n        errors.map(({ field, messages }) => setFieldError(field, messages[0]));\n      }\n    }\n  };\n\n  render() {\n    const {\n      types,\n      customFields,\n      community,\n      hasLogo,\n      defaultLogo,\n      logoMaxSize,\n      permissions,\n    } = this.props;\n    const { error } = this.state;\n    return (\n      <Formik\n        initialValues={this.getInitialValues(community)}\n        validationSchema={COMMUNITY_VALIDATION_SCHEMA}\n        onSubmit={this.onSubmit}\n      >\n        {({ isSubmitting, isValid, handleSubmit }) => (\n          <Form onSubmit={handleSubmit} className=\"communities-profile\">\n            <Message hidden={error === \"\"} negative>\n              <Grid container>\n                <Grid.Column width={15} textAlign=\"left\">\n                  <strong>{error}</strong>\n                </Grid.Column>\n              </Grid>\n            </Message>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column\n                  as=\"section\"\n                  mobile={16}\n                  tablet={10}\n                  computer={11}\n                  className=\"rel-pb-2\"\n                >\n                  <AccordionField\n                    includesPaths={[\n                      \"metadata.title\",\n                      \"metadata.type.id\",\n                      \"metadata.website\",\n                      \"metadata.organizations\",\n                      \"metadata.description\",\n                    ]}\n                    label={i18next.t(\"Basic information\")}\n                    active\n                  >\n                    <div className=\"rel-ml-1 rel-mr-1\">\n                      <TextField\n                        fluid\n                        fieldPath=\"metadata.title\"\n                        label={\n                          <FieldLabel\n                            htmlFor=\"metadata.title\"\n                            icon=\"book\"\n                            label={i18next.t(\"Name\")}\n                          />\n                        }\n                      />\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.TextAreaField.MetadataDescription\"\n                        community={community}\n                      >\n                        <TextAreaField\n                          fieldPath=\"metadata.description\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.description\"\n                              icon=\"pencil\"\n                              label={i18next.t(\"Short description\")}\n                            />\n                          }\n                          fluid\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.SelectField.MetadataType\"\n                        community={community}\n                      >\n                        <SelectField\n                          search\n                          clearable\n                          fieldPath=\"metadata.type.id\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.type.id\"\n                              icon=\"tag\"\n                              label={i18next.t(\"Type\")}\n                            />\n                          }\n                          options={types.map((ct) => {\n                            return {\n                              value: ct.id,\n                              text: ct?.title_l10n ?? ct.id,\n                            };\n                          })}\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.TextField.MetadataWebsite\"\n                        community={community}\n                      >\n                        <TextField\n                          fieldPath=\"metadata.website\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.website\"\n                              icon=\"chain\"\n                              label={i18next.t(\"Website\")}\n                            />\n                          }\n                          fluid\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.RemoteSelectField.MetadataOrganizations\"\n                        community={community}\n                      >\n                        <RemoteSelectField\n                          fieldPath=\"metadata.organizations\"\n                          suggestionAPIUrl=\"/api/affiliations\"\n                          suggestionAPIHeaders={{\n                            Accept: \"application/json\",\n                          }}\n                          placeholder={i18next.t(\"Search for an organization by name\")}\n                          clearable\n                          multiple\n                          initialSuggestions={_get(\n                            community,\n                            \"metadata.organizations\",\n                            []\n                          )}\n                          serializeSuggestions={(organizations) =>\n                            _map(organizations, (organization) => {\n                              // eslint-disable-next-line no-prototype-builtins\n                              const isKnownOrg = this.knownOrganizations.hasOwnProperty(\n                                organization.name\n                              );\n                              if (!isKnownOrg) {\n                                this.knownOrganizations = {\n                                  ...this.knownOrganizations,\n                                  [organization.name]: organization.id,\n                                };\n                              }\n                              return {\n                                text: organization.name,\n                                value: organization.name,\n                                key: organization.name,\n                              };\n                            })\n                          }\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.organizations\"\n                              icon=\"group\"\n                              label={i18next.t(\"Organizations\")}\n                            />\n                          }\n                          noQueryMessage={i18next.t(\"Search for organizations...\")}\n                          allowAdditions\n                          search={(filteredOptions, searchQuery) => filteredOptions}\n                        />\n                      </Overridable>\n                    </div>\n                  </AccordionField>\n\n                  <Overridable\n                    id=\"InvenioCommunities.CommunityProfileForm.AccordionField.MetadataFunding\"\n                    community={community}\n                  >\n                    <AccordionField\n                      includesPaths={[\"metadata.funding\"]}\n                      label={i18next.t(\"Funding information\")}\n                    >\n                      <div className=\"rel-ml-1 rel-mr-1\">\n                        <FundingField\n                          fieldPath=\"metadata.funding\"\n                          searchConfig={{\n                            searchApi: {\n                              axios: {\n                                headers: {\n                                  Accept: \"application/vnd.inveniordm.v1+json\",\n                                },\n                                url: \"/api/awards\",\n                                withCredentials: false,\n                              },\n                            },\n                            initialQueryState: {\n                              sortBy: \"bestmatch\",\n                              sortOrder: \"asc\",\n                              layout: \"list\",\n                              page: 1,\n                              size: 5,\n                            },\n                          }}\n                          label={i18next.t(\"Awards\")}\n                          labelIcon=\"money bill alternate outline\"\n                          deserializeAward={(award) => {\n                            return {\n                              title: award.title_l10n,\n                              pid: award.pid,\n                              number: award.number,\n                              funder: award.funder ?? \"\",\n                              id: award.id,\n                              ...(award.identifiers && {\n                                identifiers: award.identifiers,\n                              }),\n                              ...(award.acronym && { acronym: award.acronym }),\n                            };\n                          }}\n                          deserializeFunder={(funder) => {\n                            return {\n                              id: funder.id,\n                              name: funder.name,\n                              ...(funder.title_l10n && { title: funder.title_l10n }),\n                              ...(funder.pid && { pid: funder.pid }),\n                              ...(funder.country && { country: funder.country }),\n                              ...(funder.identifiers && {\n                                identifiers: funder.identifiers,\n                              }),\n                            };\n                          }}\n                          computeFundingContents={(funding) => {\n                            let headerContent,\n                              descriptionContent = \"\";\n                            let awardOrFunder = \"award\";\n                            if (funding.award) {\n                              headerContent = funding.award.title;\n                            }\n\n                            if (funding.funder) {\n                              const funderName =\n                                funding.funder?.name ??\n                                funding.funder?.title ??\n                                funding.funder?.id ??\n                                \"\";\n                              descriptionContent = funderName;\n                              if (!headerContent) {\n                                awardOrFunder = \"funder\";\n                                headerContent = funderName;\n                                descriptionContent = \"\";\n                              }\n                            }\n\n                            return {\n                              headerContent,\n                              descriptionContent,\n                              awardOrFunder,\n                            };\n                          }}\n                        />\n                      </div>\n                    </AccordionField>\n                  </Overridable>\n\n                  {!_isEmpty(customFields.ui) && (\n                    <CustomFields\n                      config={customFields.ui}\n                      templateLoaders={[\n                        (widget) => import(`@templates/custom_fields/${widget}.js`),\n                        (widget) => import(`react-invenio-forms`),\n                      ]}\n                      fieldPathPrefix=\"custom_fields\"\n                    />\n                  )}\n\n                  <Divider hidden />\n                  <Divider />\n                  <Button\n                    disabled={!isValid || isSubmitting}\n                    loading={isSubmitting}\n                    labelPosition=\"left\"\n                    primary\n                    type=\"button\"\n                    icon\n                    onClick={(event) => handleSubmit(event)}\n                  >\n                    <Icon name=\"save\" />\n                    {i18next.t(\"Save\")}\n                  </Button>\n                </Grid.Column>\n                <Grid.Column\n                  as=\"section\"\n                  mobile={16}\n                  tablet={5}\n                  computer={4}\n                  floated=\"right\"\n                  className=\"logo-upload-column\"\n                >\n                  <Overridable\n                    id=\"InvenioCommunities.CommunityProfileForm.LogoUploader.ProfilePicture\"\n                    community={community}\n                  >\n                    <LogoUploader\n                      community={community}\n                      hasLogo={hasLogo}\n                      defaultLogo={defaultLogo}\n                      onError={this.setGlobalError}\n                      logoMaxSize={logoMaxSize}\n                    />\n                  </Overridable>\n                </Grid.Column>\n              </Grid.Row>\n              <Overridable\n                id=\"InvenioCommunities.CommunityProfileForm.GridRow.DangerZone\"\n                community={community}\n              >\n                <Grid.Row className=\"danger-zone\">\n                  <Grid.Column as=\"section\" width={16}>\n                    <DangerZone\n                      community={community}\n                      onError={this.setGlobalError}\n                      permissions={permissions}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Overridable>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nCommunityProfileForm.propTypes = {\n  community: PropTypes.object.isRequired,\n  defaultLogo: PropTypes.string.isRequired,\n  hasLogo: PropTypes.bool.isRequired,\n  logoMaxSize: PropTypes.number.isRequired,\n  customFields: PropTypes.object.isRequired,\n  types: PropTypes.array.isRequired,\n  permissions: PropTypes.object.isRequired,\n};\n\nexport default CommunityProfileForm;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2023 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { default as CommunityProfileForm } from \"./CommunityProfileForm\";\nimport { OverridableContext, overrideStore } from \"react-overridable\";\n\nconst domContainer = document.getElementById(\"app\");\nconst community = JSON.parse(domContainer.dataset.community);\nconst hasLogo = JSON.parse(domContainer.dataset.hasLogo);\nconst types = JSON.parse(domContainer.dataset.types);\nconst logoMaxSize = JSON.parse(domContainer.dataset.logoMaxSize);\nconst customFields = JSON.parse(domContainer.dataset.customFields);\nconst permissions = JSON.parse(domContainer.dataset.permissions);\nconst overriddenComponents = overrideStore.getAll();\n\nReactDOM.render(\n  <OverridableContext.Provider value={overriddenComponents}>\n    <CommunityProfileForm\n      community={community}\n      hasLogo={hasLogo}\n      defaultLogo=\"/static/images/square-placeholder.png\"\n      types={types}\n      logoMaxSize={logoMaxSize}\n      customFields={customFields}\n      permissions={permissions}\n    />\n  </OverridableContext.Provider>,\n  domContainer\n);\n"],"names":["CommunityApi","_createClass","_classCallCheck","_defineProperty","key","value","_create","_asyncToGenerator","_regeneratorRuntime","_callee","payload","options","_context","prev","next","abrupt","http","post","this","baseUrl","_objectSpread","stop","_x","_x2","apply","arguments","_update","_callee2","communityId","_context2","put","concat","_x3","_x4","_x5","_delete2","_callee3","_context3","_x6","_x7","_renameSlug","_callee4","newSlug","_context4","slug","_x8","_x9","_x10","_updateLogo","_callee5","headers","_context5","_x11","_x12","_x13","_deleteLogo","_callee6","_context6","_x14","_x15","communityErrorSerializer","error","_error$response2","_error$response3","_error$response4","message","response","data","errors","status","_CustomFieldSerializer_brand","WeakSet","CustomFieldSerializer","_ref","fieldpath","_ref$deserializedDefa","deserializedDefault","_ref$serializedDefaul","serializedDefault","_ref$allowEmpty","allowEmpty","_ref$vocabularyFields","vocabularyFields","_classPrivateMethodInitSpec","record","_record","_cloneDeep","customFields","_get","_assertClassBrand","_mapCustomFields","call","i","length","undefined","id","__key","mapValue","_this","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i","isVocabularyField","includes","_value","_isArray","map","v","_set","Object","entries","RenameCommunitySlugButton","_Component","props","_callSuper","setState","modalOpen","modalTriggerRef","current","focus","event","community","client","_communityErrorSerial","invalidIdError","stopPropagation","formInputRef","cancellableRename","withCancel","renameSlug","loading","promise","window","location","href","t0","filter","field","messages","state","React","_inherits","cancel","_this$state","Button","ref","compact","negative","onClick","handleOpen","fluid","icon","labelPosition","type","Icon","name","i18next","t","Modal","open","onClose","handleClose","size","Content","Form","onSubmit","handleChange","Input","_extends","label","placeholder","input","content","pointing","Actions","disabled","floated","Component","propTypes","PropTypes","isRequired","onError","DeleteCommunityModal","membersResponse","recordsResponse","cancellableMembersCountFetch","get","links","members","cancellableRecordsCountFetch","records","sent","membersCount","hits","total","recordsCount","console","inputSlug","target","e","_ref2","checked","checkboxMembers","checkboxRecords","checkboxSlug","_this$openModalBtnRef","INITIAL_STATE","openModalBtnRef","_this$props","onDelete","redirectURL","_communityErrorSerial2","cancellableDelete","closeConfirmModal","checkboxRef","updateCommunityMetrics","prevProps","prevState","_this$state2","inputRef","_this2","_this$state3","_this$props2","communitySlug","openConfirmModal","role","Header","as","Loader","active","Trans","Message","className","Checkbox","htmlFor","onChange","handleCheckboxChange","handleInputChange","ErrorMessage","header","handleDelete","handleButtonDisabled","DangerZone","permissions","can_delete","can_rename","Segment","Grid","Column","mobile","tablet","computer","DeleteButton","_useState","useState","_useState2","setModalOpen","_useState3","_useState4","setLoading","cancelBtnRef","_openModalBtnRef$curr","useEffect","_cancelBtnRef$current","confirmationMessage","noCacheUrl","url","result","URL","randomValue","Date","getMilliseconds","searchParams","set","toString","LogoUploader","defaultLogo","hasLogo","logoMaxSize","logo","logoUrl","logoSetUrl","logoUpdated","logoSetUpdated","_useState5","_useState6","logoExists","logoSetExists","logoDefault","dropzoneParams","preventDropOnDocument","onDropAccepted","_onDropAccepted","acceptedFiles","file","logoUrlNoCache","updateLogo","onDropRejected","rejectedFiles","multiple","noClick","noDrag","noKeyboard","maxFiles","maxSize","accept","deleteLogo","Dropzone","_ref3","getRootProps","getInputProps","openFileDialog","Image","src","fallbackSrc","loadFallbackFirst","wrapped","rounded","Divider","hidden","fileSize","humanReadableBytes","info","COMMUNITY_VALIDATION_SCHEMA","Yup","metadata","title","max","description","website","shape","removeEmptyValues","obj","_isBoolean","_isNumber","_isEmpty","_isObject","mappedValues","_mapValues","_pickBy","_isNull","CommunityProfileForm","_len","args","Array","_key","_initialValues$ui$fun","initialValues","_defaultsDeep","curation_policy","organizations","funding","access","visibility","member_policy","record_policy","organizationsNames","org","knownOrganizations","_unset","deserializeFunding","fund","_deserialize","deserializedValue","title_l10n","identifiers","forEach","identifier","identifierValue","scheme","isArray","ui","award","funder","vocabularies","deserialize","values","_submittedCommunity$m","serializeFunding","_serialize","clonedValue","_pick","en","serializedValue","submittedCommunity","organization","orgID","serialize","setSubmitting","setFieldError","serializeValues","update","reload","setGlobalError","types","Formik","getInitialValues","validationSchema","_ref4","isSubmitting","isValid","handleSubmit","container","width","textAlign","Row","AccordionField","includesPaths","TextField","fieldPath","FieldLabel","Overridable","TextAreaField","SelectField","search","clearable","ct","_ct$title_l10n","text","RemoteSelectField","suggestionAPIUrl","suggestionAPIHeaders","Accept","initialSuggestions","serializeSuggestions","_map","hasOwnProperty","noQueryMessage","allowAdditions","filteredOptions","searchQuery","FundingField","searchConfig","searchApi","axios","withCredentials","initialQueryState","sortBy","sortOrder","layout","page","labelIcon","deserializeAward","_award$funder","pid","number","acronym","deserializeFunder","country","computeFundingContents","headerContent","descriptionContent","awardOrFunder","_ref5","_ref6","_funding$funder$name","_funding$funder","_funding$funder2","_funding$funder3","funderName","CustomFields","config","templateLoaders","widget","fieldPathPrefix","primary","domContainer","document","getElementById","JSON","parse","dataset","overriddenComponents","overrideStore","getAll","ReactDOM","OverridableContext","Provider"],"sourceRoot":""}