{"version":3,"file":"js/invenio-communities-profile.4af76bb1bcc3fd93aec9.js","mappings":"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","sources":["webpack://invenio-assets/./js/invenio_communities/settings/profile/CustomFieldSerializer.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/RenameCommunitySlugButton.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/DeleteCommunityModal.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/DangerZone.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/DeleteButton.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/LogoUploader.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/CommunityProfileForm.js","webpack://invenio-assets/./js/invenio_communities/settings/profile/index.js"],"sourcesContent":["// This file is part of Invenio-Communities\n// Copyright (C) 2022-2024 CERN.\n//\n// Invenio-Communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport _get from \"lodash/get\";\nimport _set from \"lodash/set\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isArray from \"lodash/isArray\";\n\nexport class CustomFieldSerializer {\n  constructor({\n    fieldpath,\n    deserializedDefault = null,\n    serializedDefault = null,\n    allowEmpty = false,\n    vocabularyFields = [],\n    genericVocabularies = [],\n  }) {\n    this.fieldpath = fieldpath;\n    this.deserializedDefault = deserializedDefault;\n    this.serializedDefault = serializedDefault;\n    this.allowEmpty = allowEmpty;\n    this.vocabularyFields = vocabularyFields;\n    this.genericVocabularies = genericVocabularies;\n  }\n\n  #mapCustomFields(record, customFields, mapValue) {\n    if (customFields !== null) {\n      for (const [key, value] of Object.entries(customFields)) {\n        const isVocabularyField = this.vocabularyFields.includes(key);\n        const isGenericVocabulary = this.genericVocabularies.includes(key);\n        const _value = _isArray(value)\n          ? value.map((v, i) => mapValue(v, i, isVocabularyField, isGenericVocabulary))\n          : mapValue(value, null, isVocabularyField, isGenericVocabulary);\n        record = _set(record, `custom_fields.${key}`, _value);\n      }\n    }\n  }\n\n  deserialize(record) {\n    const _deserialize = (\n      value,\n      i = undefined,\n      isVocabulary = false,\n      isGenericVocabulary = false\n    ) => {\n      if (isVocabulary && !isGenericVocabulary) {\n        return value;\n      }\n      if (isVocabulary && value?.id) {\n        return value.id;\n      }\n      // Add __key if i is passed i.e is an array. This is needed because of ArrayField\n      // internal implementation\n      if (i) value.__key = i;\n      return value;\n    };\n    const _record = _cloneDeep(record);\n    const customFields = _get(record, this.fieldpath, this.deserializedDefault);\n    this.#mapCustomFields(_record, customFields, _deserialize);\n    return _record;\n  }\n\n  serialize(record) {\n    const _serialize = (value, i = undefined, isVocabulary = false) => {\n      if (isVocabulary && typeof value === \"string\") {\n        return { id: value };\n      }\n      // Delete internal __key from the sent request payload\n      delete value.__key;\n      return value;\n    };\n    const _record = _cloneDeep(record);\n    const customFields = _get(record, this.fieldpath, this.serializedDefault);\n    this.#mapCustomFields(_record, customFields, _serialize);\n    return _record;\n  }\n}\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2021 CERN.\n * Copyright (C) 2021 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { Component } from \"react\";\nimport { withCancel } from \"react-invenio-forms\";\nimport { Button, Form, Icon, Modal } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport PropTypes from \"prop-types\";\n\nexport class RenameCommunitySlugButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalOpen: false,\n      loading: false,\n      error: \"\",\n    };\n\n    this.formInputRef = React.createRef();\n    this.modalTriggerRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.formInputRef.current && this.formInputRef.current.focus();\n  }\n\n  componentWillUnmount() {\n    this.cancellableRename && this.cancellableRename.cancel();\n  }\n\n  handleOpen = () => this.setState({ modalOpen: true });\n\n  handleClose = () => {\n    this.setState({ modalOpen: false });\n    this.modalTriggerRef.current.focus();\n  };\n\n  handleChange = async (event) => {\n    // stop event propagation so the submit event is restricted to the modal\n    // form\n    event.stopPropagation();\n    const { community } = this.props;\n    const newSlug = this.formInputRef.current.value;\n    const client = new CommunityApi();\n\n    this.cancellableRename = withCancel(client.renameSlug(community.id, newSlug));\n    this.setState({ loading: true });\n\n    try {\n      await this.cancellableRename.promise;\n\n      window.location.href = `/communities/${newSlug}/settings`;\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n\n      this.setState({ loading: false });\n      const { errors } = communityErrorSerializer(error);\n\n      if (errors) {\n        const invalidIdError = errors\n          .filter((error) => error.field === \"slug\")\n          .map((error) => error.messages[0]);\n        this.setState({ error: invalidIdError });\n        this.formInputRef.current.focus();\n      }\n    }\n  };\n\n  render() {\n    const { modalOpen, loading, error } = this.state;\n\n    return (\n      <>\n        <Button\n          ref={this.modalTriggerRef}\n          compact\n          negative\n          onClick={this.handleOpen}\n          fluid\n          icon\n          labelPosition=\"left\"\n          type=\"button\"\n        >\n          <Icon name=\"pencil\" />\n          {i18next.t(\"Change identifier\")}\n        </Button>\n\n        <Modal open={modalOpen} onClose={this.handleClose} size=\"tiny\">\n          <Modal.Content>\n            <Form onSubmit={this.handleChange}>\n              <Form.Input\n                label={i18next.t(\"New unique identifier of the community\")}\n                placeholder={i18next.t(\"New unique identifier of the community\")}\n                fluid\n                input={{ ref: this.formInputRef }}\n                {...(error\n                  ? {\n                      error: {\n                        content: error,\n                        pointing: \"above\",\n                      },\n                    }\n                  : {})}\n              />\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              onClick={this.handleClose}\n              loading={loading}\n              disabled={loading}\n              floated=\"left\"\n            >\n              {i18next.t(\"Cancel\")}\n            </Button>\n            <Button\n              negative\n              onClick={this.handleChange}\n              loading={loading}\n              disabled={loading}\n            >\n              {i18next.t(\"Change\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </>\n    );\n  }\n}\n\nRenameCommunitySlugButton.propTypes = {\n  community: PropTypes.object.isRequired,\n  onError: PropTypes.func.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2023 CERN.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { Component } from \"react\";\nimport {\n  Button,\n  Icon,\n  Loader,\n  Modal,\n  Message,\n  Checkbox,\n  Input,\n} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { Trans } from \"react-i18next\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport { ErrorMessage, http, withCancel } from \"react-invenio-forms\";\n\nexport class DeleteCommunityModal extends Component {\n  constructor(props) {\n    super(props);\n    this.INITIAL_STATE = {\n      modalOpen: false,\n      loading: true,\n      checkboxMembers: false,\n      checkboxRecords: false,\n      checkboxSlug: false,\n      inputSlug: \"\",\n      error: undefined,\n    };\n    this.checkboxRef = React.createRef();\n    this.openModalBtnRef = React.createRef();\n    this.state = this.INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    this.updateCommunityMetrics();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { loading, modalOpen } = this.state;\n    if (!loading && modalOpen && modalOpen !== prevState.modalOpen) {\n      const {\n        current: { inputRef },\n      } = this.checkboxRef;\n      inputRef.current.focus();\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellableDelete && this.cancellableDelete.cancel();\n    this.cancellableMembersCountFetch && this.cancellableMembersCountFetch.cancel();\n    this.cancellableRecordsCountFetch && this.cancellableRecordsCountFetch.cancel();\n  }\n\n  updateCommunityMetrics = async () => {\n    this.setState({ loading: true });\n    const { community } = this.props;\n    this.cancellableMembersCountFetch = withCancel(http.get(community.links.members));\n    this.cancellableRecordsCountFetch = withCancel(http.get(community.links.records));\n\n    try {\n      const membersResponse = await this.cancellableMembersCountFetch.promise;\n      const recordsResponse = await this.cancellableRecordsCountFetch.promise;\n      this.setState({\n        loading: false,\n        membersCount: membersResponse.data.hits.total,\n        recordsCount:\n          recordsResponse.data.length === 0 ? 0 : recordsResponse.data.hits.total,\n      });\n    } catch (error) {\n      console.error(error);\n      const { message } = communityErrorSerializer(error);\n      if (message) {\n        this.setState({ error: message, loading: false });\n      }\n    }\n  };\n\n  handleInputChange = (event) => {\n    this.setState({ inputSlug: event.target.value });\n  };\n\n  handleCheckboxChange = (e, { id, checked }) => {\n    if (id === \"members-confirm\") {\n      this.setState({\n        checkboxMembers: checked,\n      });\n    }\n    if (id === \"records-confirm\") {\n      this.setState({\n        checkboxRecords: checked,\n      });\n    }\n    if (id === \"slug-confirm\") {\n      this.setState({\n        checkboxSlug: checked,\n      });\n    }\n  };\n\n  handleButtonDisabled = (slug) => {\n    const { checkboxRecords, checkboxMembers, checkboxSlug, inputSlug } = this.state;\n    return !(checkboxMembers && checkboxRecords && checkboxSlug && inputSlug === slug);\n  };\n\n  openConfirmModal = () => this.setState({ modalOpen: true });\n\n  closeConfirmModal = () => {\n    let { loading } = this.state;\n    this.setState({ ...this.INITIAL_STATE, loading: loading });\n    this.openModalBtnRef?.current?.focus();\n  };\n\n  handleDelete = async () => {\n    this.setState({ loading: true });\n    const { onDelete, redirectURL } = this.props;\n\n    this.cancellableDelete = withCancel(onDelete());\n    try {\n      await this.cancellableDelete.promise;\n\n      if (redirectURL) {\n        window.location.href = redirectURL;\n      }\n\n      this.closeConfirmModal();\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n      console.error(error);\n      const { message } = communityErrorSerializer(error);\n      if (message) {\n        this.setState({ error: message, loading: false });\n      }\n    }\n  };\n\n  render() {\n    const {\n      modalOpen,\n      loading,\n      error,\n      checkboxMembers,\n      checkboxRecords,\n      checkboxSlug,\n      inputSlug,\n      membersCount,\n      recordsCount,\n    } = this.state;\n    const { label, community } = this.props;\n    const communitySlug = community.slug;\n    return (\n      <>\n        <Button\n          ref={this.openModalBtnRef}\n          compact\n          negative\n          onClick={this.openConfirmModal}\n          fluid\n          icon\n          labelPosition=\"left\"\n          type=\"button\"\n          aria-haspopup=\"dialog\"\n          aria-controls=\"warning-modal\"\n          aria-expanded={modalOpen}\n          id=\"delete-community-button\"\n        >\n          <Icon name=\"trash\" />\n          {label}\n        </Button>\n\n        <Modal\n          id=\"warning-modal\"\n          role=\"dialog\"\n          aria-labelledby=\"delete-community-button\"\n          open={modalOpen}\n          onClose={this.closeConfirmModal}\n          size=\"tiny\"\n        >\n          <Modal.Header as=\"h2\">\n            {i18next.t(\"Permanently delete community\")}\n          </Modal.Header>\n          {loading && <Loader active={loading} />}\n          <Modal.Content>\n            <p>\n              <Trans>\n                Are you <strong>absolutely sure</strong> you want to delete the\n                community?\n              </Trans>\n            </p>\n\n            <Message negative>\n              <Message.Header className=\"rel-mb-1\">\n                <Icon name=\"warning sign\" className=\"rel-mr-1\" />\n                {i18next.t(\"This action CANNOT be undone!\")}\n              </Message.Header>\n              <>\n                <Checkbox\n                  id=\"members-confirm\"\n                  ref={this.checkboxRef}\n                  label={\n                    <label htmlFor=\"members-confirm\">\n                      <Trans>\n                        <strong>{`${membersCount}`} members</strong> will be removed\n                        from the community.\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxMembers}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n                <Checkbox\n                  id=\"records-confirm\"\n                  label={\n                    <label htmlFor=\"records-confirm\">\n                      <Trans>\n                        <strong>{`${recordsCount}`} records</strong> will be removed\n                        from the community.\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxRecords}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n                <Checkbox\n                  id=\"slug-confirm\"\n                  label={\n                    <label htmlFor=\"slug-confirm\">\n                      <Trans>\n                        You <strong>CANNOT</strong> reuse the community identifier \"\n                        {{ communitySlug }}\".\n                      </Trans>\n                    </label>\n                  }\n                  checked={checkboxSlug}\n                  onChange={this.handleCheckboxChange}\n                  className=\"mb-5\"\n                />\n              </>\n            </Message>\n\n            <label htmlFor=\"confirm-delete\">\n              <Trans>\n                Please type <strong>{{ communitySlug }}</strong> to confirm.\n              </Trans>\n            </label>\n            <Input\n              id=\"confirm-delete\"\n              fluid\n              value={inputSlug}\n              onChange={this.handleInputChange}\n            />\n          </Modal.Content>\n          <Modal.Actions>\n            {error && (\n              <ErrorMessage\n                header={i18next.t(\"Unable to delete\")}\n                content={i18next.t(error)}\n                icon=\"exclamation\"\n                className=\"text-align-left\"\n                negative\n              />\n            )}\n            <Button onClick={this.closeConfirmModal} floated=\"left\">\n              {i18next.t(\"Cancel\")}\n            </Button>\n            <Button\n              negative\n              onClick={() => this.handleDelete()}\n              disabled={this.handleButtonDisabled(communitySlug)}\n            >\n              {i18next.t(\"Permanently delete\")}\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </>\n    );\n  }\n}\n\nDeleteCommunityModal.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  redirectURL: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  community: PropTypes.object.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2023 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React from \"react\";\nimport { Grid, Header, Segment } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { RenameCommunitySlugButton } from \"./RenameCommunitySlugButton\";\nimport PropTypes from \"prop-types\";\nimport { DeleteCommunityModal } from \"./DeleteCommunityModal\";\n\nconst DangerZone = ({ community, onError, permissions }) => {\n  if (permissions.can_delete || permissions.can_rename) {\n    return (\n      <Segment className=\"negative rel-mt-2\">\n        <Header as=\"h2\" className=\"negative\">\n          {i18next.t(\"Danger zone\")}\n        </Header>\n        <Grid>\n          {permissions.can_rename && (\n            <>\n              <Grid.Column mobile={16} tablet={10} computer={12}>\n                <Header as=\"h3\" size=\"small\">\n                  {i18next.t(\"Change identifier\")}\n                </Header>\n                <p>\n                  {i18next.t(\n                    \"Changing your community's unique identifier can have unintended side effects.\"\n                  )}\n                </p>\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={6} computer={4} floated=\"right\">\n                <RenameCommunitySlugButton community={community} onError={onError} />\n              </Grid.Column>\n            </>\n          )}\n          {permissions.can_delete && (\n            <>\n              <Grid.Column mobile={16} tablet={10} computer={12} floated=\"left\">\n                <Header as=\"h3\" size=\"small\">\n                  {i18next.t(\"Delete community\")}\n                </Header>\n                <p>\n                  {i18next.t(\n                    \"Once deleted, it will be gone forever. Please be certain.\"\n                  )}\n                </p>\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={6} computer={4} floated=\"right\">\n                <DeleteCommunityModal\n                  community={community}\n                  label={i18next.t(\"Delete community\")}\n                  redirectURL=\"/communities\"\n                  onDelete={async () => {\n                    const client = new CommunityApi();\n                    await client.delete(community.id);\n                  }}\n                />\n              </Grid.Column>\n            </>\n          )}\n        </Grid>\n      </Segment>\n    );\n  } else {\n    return null;\n  }\n};\n\nDangerZone.propTypes = {\n  community: PropTypes.object.isRequired,\n  onError: PropTypes.func.isRequired,\n  permissions: PropTypes.object.isRequired,\n};\n\nexport default DangerZone;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2021 CERN.\n * Copyright (C) 2021 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Icon, Modal } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\n\nexport const DeleteButton = (props) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const cancelBtnRef = React.createRef();\n  const openModalBtnRef = React.createRef();\n\n  const handleOpen = () => setModalOpen(true);\n\n  const handleClose = () => {\n    setModalOpen(false);\n    setLoading(false);\n    openModalBtnRef?.current?.focus();\n  };\n\n  const handleDelete = async () => {\n    setLoading(true);\n    const { onDelete, redirectURL, onError } = props;\n    try {\n      await onDelete();\n      if (redirectURL) {\n        window.location.href = redirectURL;\n      }\n    } catch (error) {\n      onError(error);\n    }\n    handleClose();\n  };\n\n  useEffect(() => {\n    if (modalOpen) cancelBtnRef?.current?.focus();\n  }, [modalOpen, cancelBtnRef]);\n\n  const { label, confirmationMessage, id } = props;\n\n  return (\n    <>\n      <Button\n        ref={openModalBtnRef}\n        compact\n        negative\n        onClick={handleOpen}\n        fluid\n        icon\n        labelPosition=\"left\"\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-controls=\"warning-modal\"\n        aria-expanded={modalOpen}\n        id={id}\n      >\n        <Icon name=\"trash\" />\n        {label}\n      </Button>\n\n      <Modal\n        id=\"warning-modal\"\n        role=\"dialog\"\n        aria-labelledby={id}\n        open={modalOpen}\n        onClose={handleClose}\n        size=\"tiny\"\n      >\n        <Modal.Content>{confirmationMessage}</Modal.Content>\n        <Modal.Actions>\n          <Button\n            ref={cancelBtnRef}\n            onClick={handleClose}\n            loading={loading}\n            floated=\"left\"\n          >\n            {i18next.t(\"Cancel\")}\n          </Button>\n          <Button negative onClick={handleDelete} loading={loading}>\n            {i18next.t(\"Delete\")}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n};\n\nDeleteButton.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  redirectURL: PropTypes.string.isRequired,\n  onError: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n  confirmationMessage: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2022 CERN.\n * Copyright (C) 2021-2023 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { humanReadableBytes } from \"react-invenio-forms\";\nimport { Image } from \"react-invenio-forms\";\nimport { Button, Divider, Header, Icon, Message } from \"semantic-ui-react\";\nimport { CommunityApi } from \"../../api\";\nimport { DeleteButton } from \"./DeleteButton\";\nimport PropTypes from \"prop-types\";\n\nfunction noCacheUrl(url) {\n  const result = new URL(url);\n  const randomValue = new Date().getMilliseconds() * 5;\n  result.searchParams.set(\"no-cache\", randomValue.toString());\n  return result.toString();\n}\n\nconst LogoUploader = ({ community, defaultLogo, hasLogo, onError, logoMaxSize }) => {\n  /* State */\n  // props initilization is fine since original props don't change after\n  // initial mounting.\n  const [logoUrl, logoSetUrl] = useState(community.links.logo);\n  const [logoUpdated, logoSetUpdated] = useState(false);\n  const [logoExists, logoSetExists] = useState(hasLogo);\n\n  // Nicer naming\n  const logoDefault = defaultLogo;\n\n  let dropzoneParams = {\n    preventDropOnDocument: true,\n    onDropAccepted: async (acceptedFiles) => {\n      const file = acceptedFiles[0];\n\n      try {\n        const client = new CommunityApi();\n        await client.updateLogo(community.id, file);\n\n        const logoUrlNoCache = noCacheUrl(logoUrl);\n        logoSetUrl(logoUrlNoCache);\n        logoSetUpdated(true);\n        logoSetExists(true);\n      } catch (error) {\n        onError(error);\n      }\n    },\n    onDropRejected: (rejectedFiles) => {\n      // TODO: show error message when files are rejected e.g size limit\n      console.error(rejectedFiles[0].errors);\n    },\n    multiple: false,\n    noClick: true,\n    noDrag: true,\n    noKeyboard: true,\n    disabled: false,\n    maxFiles: 1,\n    maxSize: 5000000, // 5Mb limit\n    accept: \".jpeg,.jpg,.png\",\n  };\n\n  const deleteLogo = async () => {\n    const client = new CommunityApi();\n    await client.deleteLogo(community.id);\n\n    const logoUrlNoCache = noCacheUrl(logoUrl);\n    logoSetUrl(logoUrlNoCache);\n    logoSetUpdated(true);\n    logoSetExists(false);\n  };\n\n  return (\n    <Dropzone {...dropzoneParams}>\n      {({ getRootProps, getInputProps, open: openFileDialog }) => (\n        <>\n          <span {...getRootProps()}>\n            <input {...getInputProps()} />\n            <Header as=\"h2\" size=\"small\" className=\"mt-0\">\n              {i18next.t(\"Profile picture\")}\n            </Header>\n            <Image\n              /* Change in key will cause a remounting. */\n              key={logoUrl}\n              src={logoUrl}\n              fallbackSrc={logoDefault}\n              loadFallbackFirst\n              fluid\n              wrapped\n              rounded\n              className=\"community-logo settings\"\n            />\n\n            <Divider hidden />\n          </span>\n\n          <Button\n            fluid\n            icon\n            labelPosition=\"left\"\n            type=\"button\"\n            onClick={openFileDialog}\n            className=\"rel-mt-1 rel-mb-1\"\n          >\n            <Icon name=\"upload\" />\n            {i18next.t(\"Upload new picture\")}\n          </Button>\n          <label className=\"helptext\">\n            {i18next.t(\"File must be smaller than {{fileSize}}\", {\n              fileSize: humanReadableBytes(logoMaxSize, true),\n            })}\n          </label>\n          {logoExists && (\n            <DeleteButton\n              id=\"delete-picture-button\"\n              label={i18next.t(\"Delete picture\")}\n              confirmationMessage={\n                <Header as=\"h2\" size=\"medium\">\n                  {i18next.t(\"Are you sure you want to delete this picture?\")}\n                </Header>\n              }\n              onDelete={deleteLogo}\n              onError={onError}\n            />\n          )}\n          {logoUpdated && (\n            <Message\n              info\n              icon=\"warning circle\"\n              size=\"small\"\n              content={i18next.t(\n                \"It may take a few moments for changes to be visible everywhere\"\n              )}\n            />\n          )}\n        </>\n      )}\n    </Dropzone>\n  );\n};\n\nLogoUploader.propTypes = {\n  community: PropTypes.object.isRequired,\n  defaultLogo: PropTypes.string.isRequired,\n  hasLogo: PropTypes.bool.isRequired,\n  onError: PropTypes.func.isRequired,\n  logoMaxSize: PropTypes.number.isRequired,\n};\n\nexport default LogoUploader;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2024 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { i18next } from \"@translations/invenio_communities/i18next\";\nimport { Formik } from \"formik\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _defaultsDeep from \"lodash/defaultsDeep\";\nimport _get from \"lodash/get\";\nimport _isArray from \"lodash/isArray\";\nimport _isBoolean from \"lodash/isBoolean\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isNull from \"lodash/isNull\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isObject from \"lodash/isObject\";\nimport _map from \"lodash/map\";\nimport _mapValues from \"lodash/mapValues\";\nimport _pick from \"lodash/pick\";\nimport _pickBy from \"lodash/pickBy\";\nimport _unset from \"lodash/unset\";\nimport React, { Component } from \"react\";\nimport { FundingField } from \"@js/invenio_vocabularies\";\nimport {\n  AccordionField,\n  CustomFields,\n  FieldLabel,\n  RemoteSelectField,\n  SelectField,\n  TextField,\n  TextAreaField,\n} from \"react-invenio-forms\";\nimport { Button, Form, Grid, Icon, Message, Divider } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { CommunityApi } from \"../../api\";\nimport { communityErrorSerializer } from \"../../api/serializers\";\nimport { CustomFieldSerializer } from \"./CustomFieldSerializer\";\nimport PropTypes from \"prop-types\";\nimport { default as DangerZone } from \"./DangerZone\";\nimport { default as LogoUploader } from \"./LogoUploader\";\nimport Overridable from \"react-overridable\";\n\nconst COMMUNITY_VALIDATION_SCHEMA = Yup.object({\n  metadata: Yup.object({\n    title: Yup.string().max(250, i18next.t(\"Maximum number of characters is 2000\")),\n    description: Yup.string().max(\n      250,\n      i18next.t(\"Maximum number of characters is 250\")\n    ),\n    website: Yup.string().url(i18next.t(\"Must be a valid URL\")),\n    type: Yup.object().shape({\n      id: Yup.string(),\n    }),\n  }),\n});\n\n/**\n * Remove empty fields from community\n * Copied from react-invenio-deposit\n * @method\n * @param {object} obj - potentially empty object\n * @returns {object} community - without empty fields\n */\nconst removeEmptyValues = (obj) => {\n  if (_isArray(obj)) {\n    let mappedValues = obj.map((value) => removeEmptyValues(value));\n    return mappedValues.filter((value) => {\n      if (_isBoolean(value) || _isNumber(value)) {\n        return value;\n      }\n      return !_isEmpty(value);\n    });\n  } else if (_isObject(obj)) {\n    let mappedValues = _mapValues(obj, (value) => removeEmptyValues(value));\n    return _pickBy(mappedValues, (value) => {\n      if (_isArray(value) || _isObject(value)) {\n        return !_isEmpty(value);\n      }\n      return !_isNull(value);\n    });\n  }\n  return _isNumber(obj) || _isBoolean(obj) || obj ? obj : null;\n};\n\nclass CommunityProfileForm extends Component {\n  state = {\n    error: \"\",\n  };\n  knownOrganizations = {};\n\n  getInitialValues = () => {\n    const { community } = this.props;\n    let initialValues = _defaultsDeep(community, {\n      id: \"\",\n      slug: \"\",\n      metadata: {\n        description: \"\",\n        title: \"\",\n        curation_policy: \"\",\n        type: {},\n        website: \"\",\n        organizations: [],\n        funding: [],\n      },\n      // TODO: should this come from the backend?\n      access: {\n        visibility: \"public\",\n        member_policy: \"open\",\n        record_policy: \"open\",\n      },\n    });\n\n    // create a map with all organizations that are not custom (part of the\n    // vocabulary), so that on form submission, newly custom organization input\n    // by the user can be identified and correctly sent to the backend.\n    const organizationsNames = initialValues.metadata.organizations.map((org) => {\n      const isNonCustomOrganization = org.id;\n      if (isNonCustomOrganization) {\n        this.knownOrganizations[org.name] = org.id;\n      }\n      return org.name;\n    });\n\n    _unset(initialValues, \"metadata.type.title\");\n    /**\n     * Deserializes a funding record (e.g. funder or award)\n     *\n     * @param {object} fund\n     *\n     * @returns {object} an object containing the deserialized record\n     */\n    const deserializeFunding = (fund) => {\n      const _deserialize = (value) => {\n        const deserializedValue = _cloneDeep(value);\n\n        if (value?.title_l10n) {\n          deserializedValue.title = value.title_l10n;\n        }\n\n        if (value.identifiers) {\n          const allowedIdentifiers = [\"url\"];\n\n          allowedIdentifiers.forEach((identifier) => {\n            let identifierValue = null;\n            value.identifiers.forEach((v) => {\n              if (v.scheme === identifier) {\n                identifierValue = v.identifier;\n              }\n            });\n\n            if (identifierValue) {\n              deserializedValue[identifier] = identifierValue;\n            }\n          });\n\n          delete deserializedValue[\"identifiers\"];\n        }\n        return deserializedValue;\n      };\n\n      let deserializedValue = {};\n      if (fund !== null) {\n        deserializedValue = Array.isArray(fund)\n          ? fund.map(_deserialize)\n          : _deserialize(fund);\n      }\n\n      return deserializedValue;\n    };\n\n    const funding = initialValues.ui.funding?.map((fund) => {\n      return {\n        ...(fund.award && { award: deserializeFunding(fund.award) }),\n        funder: deserializeFunding(fund.funder),\n      };\n    });\n    const { customFields } = this.props;\n    const genericVocabFields = [];\n\n    if (customFields.ui && customFields.ui.length > 0) {\n      customFields.ui.forEach((section) => {\n        if (section.fields && section.fields.length > 0) {\n          section.fields.forEach((field) => {\n            if (field.isGenericVocabulary) {\n              genericVocabFields.push(field.field);\n            }\n          });\n        }\n      });\n    }\n\n    // Deserialize custom fields\n    initialValues = new CustomFieldSerializer({\n      fieldpath: \"custom_fields\",\n      deserializedDefault: {},\n      serializedDefault: {},\n      vocabularyFields: customFields.vocabularies,\n      genericVocabularies: genericVocabFields,\n    }).deserialize(initialValues);\n\n    return {\n      ...initialValues,\n      metadata: {\n        ...initialValues.metadata,\n        organizations: organizationsNames,\n        funding,\n      },\n    };\n  };\n\n  /**\n   * Serializes community values\n   *\n   * @param {object} values\n   *\n   * @returns\n   */\n  serializeValues = (values) => {\n    /**\n     * Serializes a funding record (e.g. funder or award)\n     *\n     * @param {object} fund\n     *\n     * @returns {object} an object containing the serialized record\n     */\n    const serializeFunding = (fund) => {\n      const _serialize = (value) => {\n        if (value.id) {\n          return { id: value.id };\n        }\n\n        // Record is a custom record, without explicit 'id'\n        let clonedValue = _cloneDeep(value);\n        // allowed keys\n        const allowedKeys = [\"identifiers\", \"number\", \"title\"];\n        clonedValue = _pick(clonedValue, allowedKeys);\n\n        if (value.title) {\n          clonedValue.title = {\n            en: value.title,\n          };\n        }\n\n        if (value.url) {\n          clonedValue.identifiers = [\n            {\n              identifier: value.url,\n              scheme: \"url\",\n            },\n          ];\n          delete clonedValue[\"url\"];\n        }\n\n        return clonedValue;\n      };\n\n      let serializedValue = {};\n      if (fund !== null) {\n        serializedValue = Array.isArray(fund) ? fund.map(_serialize) : _serialize(fund);\n      }\n      return serializedValue;\n    };\n\n    let submittedCommunity = _cloneDeep(values);\n\n    // Serialize organisations. If it is known and has an id, serialize a pair 'id/name'. Otherwise use 'name' only\n    const organizations = submittedCommunity.metadata.organizations.map(\n      (organization) => {\n        const orgID = this.knownOrganizations[organization];\n        return {\n          ...(orgID && { id: orgID }),\n          name: organization,\n        };\n      }\n    );\n    // Serialize each funding record, award being optional.\n    const funding = submittedCommunity.metadata?.funding?.map((fund) => {\n      return {\n        ...(fund.award && { award: serializeFunding(fund.award) }),\n        funder: serializeFunding(fund.funder),\n      };\n    });\n    const { customFields } = this.props;\n    // Serialize custom fields\n    submittedCommunity = new CustomFieldSerializer({\n      fieldpath: \"custom_fields\",\n      deserializedDefault: {},\n      serializedDefault: {},\n      vocabularyFields: customFields.vocabularies,\n    }).serialize(submittedCommunity);\n\n    submittedCommunity = {\n      ...submittedCommunity,\n      metadata: { ...values.metadata, organizations, funding },\n    };\n\n    // Clean values\n    submittedCommunity = removeEmptyValues(submittedCommunity);\n\n    return submittedCommunity;\n  };\n\n  setGlobalError = (error) => {\n    const { message } = communityErrorSerializer(error);\n    this.setState({ error: message });\n  };\n\n  onSubmit = async (values, { setSubmitting, setFieldError }) => {\n    setSubmitting(true);\n    const payload = this.serializeValues(values);\n    const client = new CommunityApi();\n    const { community } = this.props;\n\n    try {\n      await client.update(community.id, payload);\n      window.location.reload();\n    } catch (error) {\n      if (error === \"UNMOUNTED\") return;\n\n      const { message, errors } = communityErrorSerializer(error);\n\n      setSubmitting(false);\n\n      if (message) {\n        this.setGlobalError(error);\n      }\n      if (errors) {\n        errors.map(({ field, messages }) => setFieldError(field, messages[0]));\n      }\n    }\n  };\n\n  render() {\n    const {\n      types,\n      customFields,\n      community,\n      hasLogo,\n      defaultLogo,\n      logoMaxSize,\n      permissions,\n    } = this.props;\n    const { error } = this.state;\n    return (\n      <Formik\n        initialValues={this.getInitialValues(community)}\n        validationSchema={COMMUNITY_VALIDATION_SCHEMA}\n        onSubmit={this.onSubmit}\n      >\n        {({ isSubmitting, isValid, handleSubmit }) => (\n          <Form onSubmit={handleSubmit} className=\"communities-profile\">\n            <Message hidden={error === \"\"} negative>\n              <Grid container>\n                <Grid.Column width={15} textAlign=\"left\">\n                  <strong>{error}</strong>\n                </Grid.Column>\n              </Grid>\n            </Message>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column\n                  as=\"section\"\n                  mobile={16}\n                  tablet={10}\n                  computer={11}\n                  className=\"rel-pb-2\"\n                >\n                  <AccordionField\n                    includesPaths={[\n                      \"metadata.title\",\n                      \"metadata.type.id\",\n                      \"metadata.website\",\n                      \"metadata.organizations\",\n                      \"metadata.description\",\n                    ]}\n                    label={i18next.t(\"Basic information\")}\n                    active\n                  >\n                    <div className=\"rel-ml-1 rel-mr-1\">\n                      <TextField\n                        fluid\n                        fieldPath=\"metadata.title\"\n                        label={\n                          <FieldLabel\n                            htmlFor=\"metadata.title\"\n                            icon=\"book\"\n                            label={i18next.t(\"Name\")}\n                          />\n                        }\n                      />\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.TextAreaField.MetadataDescription\"\n                        community={community}\n                      >\n                        <TextAreaField\n                          fieldPath=\"metadata.description\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.description\"\n                              icon=\"pencil\"\n                              label={i18next.t(\"Short description\")}\n                            />\n                          }\n                          fluid\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.SelectField.MetadataType\"\n                        community={community}\n                      >\n                        <SelectField\n                          search\n                          clearable\n                          fieldPath=\"metadata.type.id\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.type.id\"\n                              icon=\"tag\"\n                              label={i18next.t(\"Type\")}\n                            />\n                          }\n                          options={types.map((ct) => {\n                            return {\n                              value: ct.id,\n                              text: ct?.title_l10n ?? ct.id,\n                            };\n                          })}\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.TextField.MetadataWebsite\"\n                        community={community}\n                      >\n                        <TextField\n                          fieldPath=\"metadata.website\"\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.website\"\n                              icon=\"chain\"\n                              label={i18next.t(\"Website\")}\n                            />\n                          }\n                          fluid\n                        />\n                      </Overridable>\n\n                      <Overridable\n                        id=\"InvenioCommunities.CommunityProfileForm.RemoteSelectField.MetadataOrganizations\"\n                        community={community}\n                      >\n                        <RemoteSelectField\n                          fieldPath=\"metadata.organizations\"\n                          suggestionAPIUrl=\"/api/affiliations\"\n                          suggestionAPIHeaders={{\n                            Accept: \"application/json\",\n                          }}\n                          placeholder={i18next.t(\"Search for an organization by name\")}\n                          clearable\n                          multiple\n                          initialSuggestions={_get(\n                            community,\n                            \"metadata.organizations\",\n                            []\n                          )}\n                          serializeSuggestions={(organizations) =>\n                            _map(organizations, (organization) => {\n                              // eslint-disable-next-line no-prototype-builtins\n                              const isKnownOrg = this.knownOrganizations.hasOwnProperty(\n                                organization.name\n                              );\n                              if (!isKnownOrg) {\n                                this.knownOrganizations = {\n                                  ...this.knownOrganizations,\n                                  [organization.name]: organization.id,\n                                };\n                              }\n                              return {\n                                text: organization.name,\n                                value: organization.name,\n                                key: organization.name,\n                              };\n                            })\n                          }\n                          label={\n                            <FieldLabel\n                              htmlFor=\"metadata.organizations\"\n                              icon=\"group\"\n                              label={i18next.t(\"Organizations\")}\n                            />\n                          }\n                          noQueryMessage={i18next.t(\"Search for organizations...\")}\n                          allowAdditions\n                          search={(filteredOptions, searchQuery) => filteredOptions}\n                        />\n                      </Overridable>\n                    </div>\n                  </AccordionField>\n\n                  <Overridable\n                    id=\"InvenioCommunities.CommunityProfileForm.AccordionField.MetadataFunding\"\n                    community={community}\n                  >\n                    <AccordionField\n                      includesPaths={[\"metadata.funding\"]}\n                      label={i18next.t(\"Funding information\")}\n                      active\n                    >\n                      <div className=\"rel-ml-1 rel-mr-1\">\n                        <FundingField\n                          fieldPath=\"metadata.funding\"\n                          searchConfig={{\n                            searchApi: {\n                              axios: {\n                                headers: {\n                                  Accept: \"application/vnd.inveniordm.v1+json\",\n                                },\n                                url: \"/api/awards\",\n                                withCredentials: false,\n                              },\n                            },\n                            initialQueryState: {\n                              sortBy: \"bestmatch\",\n                              sortOrder: \"asc\",\n                              layout: \"list\",\n                              page: 1,\n                              size: 5,\n                            },\n                          }}\n                          label={i18next.t(\"Awards\")}\n                          labelIcon=\"money bill alternate outline\"\n                          deserializeAward={(award) => {\n                            return {\n                              title: award.title_l10n,\n                              pid: award.pid,\n                              number: award.number,\n                              funder: award.funder ?? \"\",\n                              id: award.id,\n                              ...(award.identifiers && {\n                                identifiers: award.identifiers,\n                              }),\n                              ...(award.acronym && { acronym: award.acronym }),\n                            };\n                          }}\n                          deserializeFunder={(funder) => {\n                            return {\n                              id: funder.id,\n                              name: funder.name,\n                              ...(funder.title_l10n && { title: funder.title_l10n }),\n                              ...(funder.pid && { pid: funder.pid }),\n                              ...(funder.country && { country: funder.country }),\n                              ...(funder.identifiers && {\n                                identifiers: funder.identifiers,\n                              }),\n                            };\n                          }}\n                          computeFundingContents={(funding) => {\n                            let headerContent,\n                              descriptionContent = \"\";\n                            let awardOrFunder = \"award\";\n                            if (funding.award) {\n                              headerContent = funding.award.title;\n                            }\n\n                            if (funding.funder) {\n                              const funderName =\n                                funding.funder?.name ??\n                                funding.funder?.title ??\n                                funding.funder?.id ??\n                                \"\";\n                              descriptionContent = funderName;\n                              if (!headerContent) {\n                                awardOrFunder = \"funder\";\n                                headerContent = funderName;\n                                descriptionContent = \"\";\n                              }\n                            }\n\n                            return {\n                              headerContent,\n                              descriptionContent,\n                              awardOrFunder,\n                            };\n                          }}\n                        />\n                      </div>\n                    </AccordionField>\n                  </Overridable>\n\n                  {!_isEmpty(customFields.ui) && (\n                    <CustomFields\n                      config={customFields.ui}\n                      templateLoaders={[\n                        (widget) => import(`@templates/custom_fields/${widget}.js`),\n                        (widget) => import(`react-invenio-forms`),\n                      ]}\n                      fieldPathPrefix=\"custom_fields\"\n                    />\n                  )}\n\n                  <Divider hidden />\n                  <Divider />\n                  <Button\n                    disabled={!isValid || isSubmitting}\n                    loading={isSubmitting}\n                    labelPosition=\"left\"\n                    primary\n                    type=\"button\"\n                    icon\n                    onClick={(event) => handleSubmit(event)}\n                  >\n                    <Icon name=\"save\" />\n                    {i18next.t(\"Save\")}\n                  </Button>\n                </Grid.Column>\n                <Grid.Column\n                  as=\"section\"\n                  mobile={16}\n                  tablet={5}\n                  computer={4}\n                  floated=\"right\"\n                >\n                  <Overridable\n                    id=\"InvenioCommunities.CommunityProfileForm.LogoUploader.ProfilePicture\"\n                    community={community}\n                  >\n                    <LogoUploader\n                      community={community}\n                      hasLogo={hasLogo}\n                      defaultLogo={defaultLogo}\n                      onError={this.setGlobalError}\n                      logoMaxSize={logoMaxSize}\n                    />\n                  </Overridable>\n                </Grid.Column>\n              </Grid.Row>\n              <Overridable\n                id=\"InvenioCommunities.CommunityProfileForm.GridRow.DangerZone\"\n                community={community}\n              >\n                <Grid.Row className=\"danger-zone\">\n                  <Grid.Column as=\"section\" width={16}>\n                    <DangerZone\n                      community={community}\n                      onError={this.setGlobalError}\n                      permissions={permissions}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Overridable>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nCommunityProfileForm.propTypes = {\n  community: PropTypes.object.isRequired,\n  defaultLogo: PropTypes.string.isRequired,\n  hasLogo: PropTypes.bool.isRequired,\n  logoMaxSize: PropTypes.number.isRequired,\n  customFields: PropTypes.object.isRequired,\n  types: PropTypes.array.isRequired,\n  permissions: PropTypes.object.isRequired,\n};\n\nexport default CommunityProfileForm;\n","/*\n * This file is part of Invenio.\n * Copyright (C) 2016-2023 CERN.\n * Copyright (C) 2021-2022 Northwestern University.\n *\n * Invenio is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { default as CommunityProfileForm } from \"./CommunityProfileForm\";\nimport { OverridableContext, overrideStore } from \"react-overridable\";\n\nconst domContainer = document.getElementById(\"app\");\nconst community = JSON.parse(domContainer.dataset.community);\nconst hasLogo = JSON.parse(domContainer.dataset.hasLogo);\nconst types = JSON.parse(domContainer.dataset.types);\nconst logoMaxSize = JSON.parse(domContainer.dataset.logoMaxSize);\nconst customFields = JSON.parse(domContainer.dataset.customFields);\nconst permissions = JSON.parse(domContainer.dataset.permissions);\nconst overriddenComponents = overrideStore.getAll();\n\nReactDOM.render(\n  <OverridableContext.Provider value={overriddenComponents}>\n    <CommunityProfileForm\n      community={community}\n      hasLogo={hasLogo}\n      defaultLogo=\"/static/images/square-placeholder.png\"\n      types={types}\n      logoMaxSize={logoMaxSize}\n      customFields={customFields}\n      permissions={permissions}\n    />\n  </OverridableContext.Provider>,\n  domContainer\n);\n"],"names":["_CustomFieldSerializer_brand","WeakSet","CustomFieldSerializer","_createClass","_ref","fieldpath","_ref$deserializedDefa","deserializedDefault","_ref$serializedDefaul","serializedDefault","_ref$allowEmpty","allowEmpty","_ref$vocabularyFields","vocabularyFields","_ref$genericVocabular","genericVocabularies","_classCallCheck","_classPrivateMethodInitSpec","this","key","value","record","_record","_cloneDeep","customFields","_get","_assertClassBrand","_mapCustomFields","call","i","arguments","length","undefined","isVocabulary","id","__key","mapValue","_this","_loop","_Object$entries$_i","_slicedToArray","_Object$entries","_i","isVocabularyField","includes","isGenericVocabulary","_value","_isArray","map","v","_set","concat","Object","entries","RenameCommunitySlugButton","_Component","props","_callSuper","_defineProperty","setState","modalOpen","modalTriggerRef","current","focus","_asyncToGenerator","_regeneratorRuntime","_callee","event","community","newSlug","client","_communityErrorSerial","errors","invalidIdError","_context","prev","next","stopPropagation","formInputRef","CommunityApi","cancellableRename","withCancel","renameSlug","loading","promise","window","location","href","t0","abrupt","communityErrorSerializer","filter","error","field","messages","stop","_x","apply","state","React","_inherits","cancel","_this$state","Button","ref","compact","negative","onClick","handleOpen","fluid","icon","labelPosition","type","Icon","name","i18next","t","Modal","open","onClose","handleClose","size","Content","Form","onSubmit","handleChange","Input","_extends","label","placeholder","input","content","pointing","Actions","disabled","floated","Component","propTypes","PropTypes","isRequired","onError","DeleteCommunityModal","membersResponse","recordsResponse","message","cancellableMembersCountFetch","http","get","links","members","cancellableRecordsCountFetch","records","sent","membersCount","data","hits","total","recordsCount","console","inputSlug","target","e","_ref2","checked","checkboxMembers","checkboxRecords","checkboxSlug","slug","_this$openModalBtnRef","_objectSpread","INITIAL_STATE","openModalBtnRef","_callee2","_this$props","onDelete","redirectURL","_communityErrorSerial2","_context2","cancellableDelete","closeConfirmModal","checkboxRef","updateCommunityMetrics","prevProps","prevState","_this$state2","inputRef","_this2","_this$state3","_this$props2","communitySlug","openConfirmModal","role","Header","as","Loader","active","Trans","Message","className","Checkbox","htmlFor","onChange","handleCheckboxChange","handleInputChange","ErrorMessage","header","handleDelete","handleButtonDisabled","DangerZone","permissions","can_delete","can_rename","Segment","Grid","Column","mobile","tablet","computer","DeleteButton","_useState","useState","_useState2","setModalOpen","_useState3","_useState4","setLoading","cancelBtnRef","_openModalBtnRef$curr","useEffect","_cancelBtnRef$current","confirmationMessage","noCacheUrl","url","result","URL","randomValue","Date","getMilliseconds","searchParams","set","toString","LogoUploader","defaultLogo","hasLogo","logoMaxSize","logo","logoUrl","logoSetUrl","logoUpdated","logoSetUpdated","_useState5","_useState6","logoExists","logoSetExists","logoDefault","dropzoneParams","preventDropOnDocument","onDropAccepted","_onDropAccepted","acceptedFiles","file","logoUrlNoCache","updateLogo","onDropRejected","rejectedFiles","multiple","noClick","noDrag","noKeyboard","maxFiles","maxSize","accept","deleteLogo","Dropzone","_ref3","getRootProps","getInputProps","openFileDialog","Image","src","fallbackSrc","loadFallbackFirst","wrapped","rounded","Divider","hidden","fileSize","humanReadableBytes","info","COMMUNITY_VALIDATION_SCHEMA","Yup","metadata","title","max","description","website","shape","removeEmptyValues","obj","_isBoolean","_isNumber","_isEmpty","_isObject","mappedValues","_mapValues","_pickBy","_isNull","CommunityProfileForm","_len","args","Array","_key","_initialValues$ui$fun","initialValues","_defaultsDeep","curation_policy","organizations","funding","access","visibility","member_policy","record_policy","organizationsNames","org","knownOrganizations","_unset","deserializeFunding","fund","_deserialize","deserializedValue","title_l10n","identifiers","forEach","identifier","identifierValue","scheme","isArray","ui","award","funder","genericVocabFields","section","fields","push","vocabularies","deserialize","values","_submittedCommunity$m","serializeFunding","_serialize","clonedValue","_pick","en","serializedValue","submittedCommunity","organization","orgID","serialize","setSubmitting","setFieldError","payload","serializeValues","update","reload","setGlobalError","_x2","types","Formik","getInitialValues","validationSchema","_ref4","isSubmitting","isValid","handleSubmit","container","width","textAlign","Row","AccordionField","includesPaths","TextField","fieldPath","FieldLabel","Overridable","TextAreaField","SelectField","search","clearable","options","ct","_ct$title_l10n","text","RemoteSelectField","suggestionAPIUrl","suggestionAPIHeaders","Accept","initialSuggestions","serializeSuggestions","_map","hasOwnProperty","noQueryMessage","allowAdditions","filteredOptions","searchQuery","FundingField","searchConfig","searchApi","axios","headers","withCredentials","initialQueryState","sortBy","sortOrder","layout","page","labelIcon","deserializeAward","_award$funder","pid","number","acronym","deserializeFunder","country","computeFundingContents","headerContent","descriptionContent","awardOrFunder","_ref5","_ref6","_funding$funder$name","_funding$funder","_funding$funder2","_funding$funder3","funderName","CustomFields","config","templateLoaders","widget","fieldPathPrefix","primary","domContainer","document","getElementById","JSON","parse","dataset","overriddenComponents","overrideStore","getAll","ReactDOM","OverridableContext","Provider"],"sourceRoot":""}