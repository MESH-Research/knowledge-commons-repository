{"version":3,"file":"js/1751.c32035218d118bf838b9.js","mappings":"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","sources":["webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/AwardResults.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/CustomAwardForm.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/FunderDropdown.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/NoAwardResults.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/FundingModal.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/FundingFieldItem.js","webpack://invenio-assets/./js/invenio_vocabularies/src/contrib/forms/Funding/FundingField.js"],"sourcesContent":["// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _get from \"lodash/get\";\nimport { Item, Header, Radio, Label, Icon } from \"semantic-ui-react\";\nimport { withState } from \"react-searchkit\";\nimport { FastField } from \"formik\";\n\nexport const AwardResults = withState(\n  ({\n    currentResultsState: results,\n    deserializeAward,\n    deserializeFunder,\n    computeFundingContents,\n  }) => {\n    return (\n      <FastField name=\"selectedFunding\">\n        {({ form: { values, setFieldValue } }) => {\n          return (\n            <Item.Group>\n              {results.data.hits.map((award) => {\n                let funder = award?.funder;\n                const deserializedAward = deserializeAward(award);\n                const deserializedFunder = deserializeFunder(funder);\n                const funding = {\n                  award: deserializedAward,\n                  funder: deserializedFunder,\n                };\n                let { headerContent, descriptionContent, awardOrFunder } =\n                  computeFundingContents(funding);\n\n                return (\n                  <Item\n                    key={deserializedAward.id}\n                    onClick={() => setFieldValue(\"selectedFunding\", funding)}\n                    className=\"license-item\"\n                  >\n                    <Radio\n                      checked={\n                        _get(values, \"selectedFunding.award.id\") === funding.award.id\n                      }\n                      onChange={() => setFieldValue(\"selectedFunding\", funding)}\n                    />\n                    <Item.Content className=\"license-item-content\">\n                      <Header size=\"small\">\n                        {headerContent}\n                        {awardOrFunder === \"award\"\n                          ? award.number && (\n                              <Label basic size=\"mini\">\n                                {award.number}\n                              </Label>\n                            )\n                          : \"\"}\n                        {awardOrFunder === \"award\"\n                          ? award.url && (\n                              <a\n                                href={`${award.url}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                <Icon\n                                  link\n                                  name=\"external alternate\"\n                                  className=\"spaced-left\"\n                                />\n                              </a>\n                            )\n                          : \"\"}\n                      </Header>\n                      <Item.Description className=\"license-item-description\">\n                        {descriptionContent}\n                      </Item.Description>\n                    </Item.Content>\n                  </Item>\n                );\n              })}\n            </Item.Group>\n          );\n        }}\n      </FastField>\n    );\n  }\n);\n\nAwardResults.propTypes = {\n  deserializeAward: PropTypes.func.isRequired,\n  deserializeFunder: PropTypes.func.isRequired,\n  computeFundingContents: PropTypes.func.isRequired,\n};\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Form, Header } from \"semantic-ui-react\";\nimport { TextField, RemoteSelectField } from \"react-invenio-forms\";\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nfunction CustomAwardForm({ deserializeFunder, selectedFunding }) {\n  function deserializeFunderToDropdown(funderItem) {\n    let funderName = null;\n    let funderPID = null;\n    let funderCountry = null;\n\n    if (funderItem.name) {\n      funderName = funderItem.name;\n    }\n\n    if (funderItem.id) {\n      funderPID = funderItem.id;\n    }\n\n    if (funderItem.country) {\n      funderCountry = funderItem.country;\n    }\n\n    if (!funderName && !funderPID) {\n      return {};\n    }\n\n    return {\n      text: [funderName, funderCountry, funderPID].filter((val) => val).join(\", \"),\n      value: funderItem.id,\n      key: funderItem.id,\n      ...(funderName && { name: funderName }),\n      ...(funderPID && { pid: funderPID }),\n    };\n  }\n\n  function serializeFunderFromDropdown(funderDropObject) {\n    return {\n      id: funderDropObject.key,\n      ...(funderDropObject.name && { name: funderDropObject.name }),\n      ...(funderDropObject.pid && { pid: funderDropObject.pid }),\n    };\n  }\n\n  return (\n    <Form>\n      <RemoteSelectField\n        fieldPath=\"selectedFunding.funder.id\"\n        suggestionAPIUrl=\"/api/funders\"\n        suggestionAPIHeaders={{\n          Accept: \"application/vnd.inveniordm.v1+json\",\n        }}\n        placeholder={i18next.t(\"Search for a funder by name\")}\n        serializeSuggestions={(funders) => {\n          return funders.map((funder) =>\n            deserializeFunderToDropdown(deserializeFunder(funder))\n          );\n        }}\n        searchInput={{\n          autoFocus: _isEmpty(selectedFunding),\n        }}\n        label={i18next.t(\"Funder\")}\n        noQueryMessage={i18next.t(\"Search for funder...\")}\n        clearable\n        allowAdditions={false}\n        multiple={false}\n        selectOnBlur={false}\n        selectOnNavigation={false}\n        required\n        search={(options) => options}\n        isFocused\n        onValueChange={({ formikProps }, selectedFundersArray) => {\n          if (selectedFundersArray.length === 1) {\n            const selectedFunder = selectedFundersArray[0];\n            if (selectedFunder) {\n              const deserializedFunder = serializeFunderFromDropdown(selectedFunder);\n              formikProps.form.setFieldValue(\n                \"selectedFunding.funder\",\n                deserializedFunder\n              );\n            }\n          }\n        }}\n      />\n\n      <Header as=\"h3\" size=\"small\">\n        {i18next.t(\"Award information\")} ({i18next.t(\"optional\")})\n      </Header>\n      <Form.Group widths=\"equal\">\n        <TextField\n          label={i18next.t(\"Number\")}\n          placeholder={i18next.t(\"Award number\")}\n          fieldPath=\"selectedFunding.award.number\"\n        />\n        <TextField\n          label={i18next.t(\"Title\")}\n          placeholder={i18next.t(\"Award Title\")}\n          fieldPath=\"selectedFunding.award.title\"\n        />\n        <TextField\n          label={i18next.t(\"URL\")}\n          placeholder={i18next.t(\"Award URL\")}\n          fieldPath=\"selectedFunding.award.url\"\n        />\n      </Form.Group>\n    </Form>\n  );\n}\n\nCustomAwardForm.propTypes = {\n  deserializeFunder: PropTypes.func.isRequired,\n  selectedFunding: PropTypes.object,\n};\n\nCustomAwardForm.defaultProps = {\n  selectedFunding: undefined,\n};\n\nexport default CustomAwardForm;\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport React from \"react\";\n\nimport { Dropdown } from \"semantic-ui-react\";\nimport { withState } from \"react-searchkit\";\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\n\nexport const FunderDropdown = withState(\n  ({ currentResultsState: awardsList, updateQueryState, currentQueryState }) => {\n    const [fundersFromFacets] = useFundersFromFacets(awardsList);\n\n    /**\n     * Trigger on funder selection.\n     * Updated the query state to filter by the selected funder.\n     *\n     * @param {*} event\n     * @param {*} data\n     */\n    function onFunderSelect(event, data) {\n      let newFilter = [];\n\n      if (data && data.value !== \"\") {\n        newFilter = [\"funders\", data.value];\n      }\n      updateQueryState({ ...currentQueryState, filters: newFilter, page: 1 });\n    }\n\n    /**\n     * Custom hook, triggered when the awards list changes.\n     * It retrieves funders from new award's facets.\n     *\n     * @param {object} awards\n     *\n     * @returns {object[]} an array of objects, each representing a facetted funder.\n     */\n    function useFundersFromFacets(awards) {\n      const [result, setResult] = React.useState([]);\n      React.useEffect(() => {\n        /**\n         * Retrieves funders from awards facets and sets the result in state 'result'.\n         */\n        function getFundersFromAwardsFacet() {\n          if (awards.loading) {\n            setResult([]);\n            return;\n          }\n\n          const funders = awards.data.aggregations?.funders?.buckets.map((agg) => {\n            return {\n              key: agg.key,\n              value: agg.key,\n              text: agg.label,\n            };\n          });\n          setResult(funders);\n        }\n\n        getFundersFromAwardsFacet();\n      }, [awards]);\n\n      return [result];\n    }\n\n    return (\n      <Dropdown\n        placeholder={i18next.t(\"Funder\")}\n        search\n        selection\n        clearable\n        scrolling\n        multiple={false}\n        options={fundersFromFacets || []}\n        allowAdditions={false}\n        onChange={onFunderSelect}\n        fluid\n        selectOnBlur={false}\n        selectOnNavigation={false}\n      />\n    );\n  }\n);\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\n\nexport function NoAwardResults({ switchToCustom }) {\n  return (\n    <Segment\n      basic\n      content={\n        <p>\n          {i18next.t(\"Did not find your award? \")}\n          <a\n            href=\"/\"\n            onClick={(e) => {\n              e.preventDefault();\n              switchToCustom();\n            }}\n          >\n            {i18next.t(\"Add a custom award.\")}\n          </a>\n        </p>\n      }\n    />\n  );\n}\n\nNoAwardResults.propTypes = {\n  switchToCustom: PropTypes.func.isRequired,\n};\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\nimport { Formik } from \"formik\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport {\n  EmptyResults,\n  Error,\n  InvenioSearchApi,\n  Pagination,\n  ReactSearchKit,\n  ResultsLoader,\n  SearchBar,\n} from \"react-searchkit\";\nimport { Grid, Modal, Container, Button } from \"semantic-ui-react\";\nimport * as Yup from \"yup\";\nimport { AwardResults } from \"./AwardResults\";\nimport CustomAwardForm from \"./CustomAwardForm\";\nimport { FunderDropdown } from \"./FunderDropdown\";\nimport { NoAwardResults } from \"./NoAwardResults\";\n\nconst ModalTypes = {\n  STANDARD: \"standard\",\n  CUSTOM: \"custom\",\n};\n\nconst ModalActions = {\n  ADD: \"add\",\n  EDIT: \"edit\",\n};\n\nconst StandardSchema = Yup.object().shape({\n  selectedFunding: Yup.object().shape({\n    funder: Yup.object().shape({\n      id: Yup.string().required(),\n    }),\n    award: Yup.object().shape({\n      id: Yup.string().required(),\n    }),\n  }),\n});\n\nconst CustomFundingSchema = Yup.object().shape({\n  selectedFunding: Yup.object().shape({\n    funder: Yup.object().shape({\n      id: Yup.string().required(i18next.t(\"Funder is required.\")),\n    }),\n    award: Yup.object().shape({\n      title: Yup.string().test({\n        name: \"testTitle\",\n        message: i18next.t(\"Title must be set alongside number.\"),\n        test: function testTitle(value) {\n          const { number } = this.parent;\n\n          if (number && !value) {\n            return false;\n          }\n\n          return true;\n        },\n      }),\n      number: Yup.string().test({\n        name: \"testNumber\",\n        message: i18next.t(\"Number must be set alongside title.\"),\n        test: function testNumber(value) {\n          const { title } = this.parent;\n\n          if (title && !value) {\n            return false;\n          }\n\n          return true;\n        },\n      }),\n      url: Yup.string()\n        .url(i18next.t(\"URL must be valid.\"))\n        .test({\n          name: \"validateUrlDependencies\",\n          message: i18next.t(\"URL must be set alongside title and number.\"),\n          test: function testUrl(value) {\n            const { title, number } = this.parent;\n\n            if (value && value !== \"\" && !title && !number) {\n              return false;\n            }\n\n            return true;\n          },\n        }),\n    }),\n  }),\n});\n\nfunction FundingModal({\n  action,\n  mode: initialMode,\n  trigger,\n  onAwardChange,\n  searchConfig,\n  deserializeAward,\n  deserializeFunder,\n  computeFundingContents,\n  ...props\n}) {\n  const [open, setOpen] = useState(false);\n  const [mode, setMode] = useState(initialMode);\n  const openModal = () => setOpen(true);\n  const closeModal = () => {\n    setMode(initialMode);\n    setOpen(false);\n  };\n  const onSubmit = (values, formikBag) => {\n    formikBag.setSubmitting(false);\n    formikBag.resetForm();\n    setMode(initialMode);\n    closeModal();\n    onAwardChange(values.selectedFunding);\n  };\n\n  const searchApi = new InvenioSearchApi(searchConfig.searchApi);\n  const customObject = mode === ModalTypes.CUSTOM ? props.initialFunding : {};\n  const initialFunding = {\n    selectedFunding: action === ModalActions.EDIT ? customObject : {},\n  };\n\n  const FundingSchema =\n    mode === ModalTypes.CUSTOM ? CustomFundingSchema : StandardSchema;\n\n  return (\n    <Formik\n      initialValues={initialFunding}\n      onSubmit={onSubmit}\n      validationSchema={FundingSchema}\n      validateOnChange={false}\n      validateOnBlur={false}\n      enableReinitialize\n    >\n      {({ values, resetForm, handleSubmit }) => (\n        <Modal\n          role=\"dialog\"\n          centered={false}\n          onOpen={openModal}\n          open={open}\n          trigger={React.cloneElement(trigger, {\n            \"aria-expanded\": open,\n            \"aria-haspopup\": \"dialog\",\n          })}\n          onClose={closeModal}\n          closeIcon\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header as=\"h2\" className=\"pt-10 pb-10\">\n            {mode === \"standard\"\n              ? i18next.t(\"Add standard award\")\n              : i18next.t(\"Add custom award\")}\n          </Modal.Header>\n          <Modal.Content>\n            {mode === ModalTypes.STANDARD && (\n              <ReactSearchKit\n                searchApi={searchApi}\n                appName=\"awards\"\n                urlHandlerApi={{ enabled: false }}\n                initialQueryState={searchConfig.initialQueryState}\n              >\n                <Grid className=\"m-0\">\n                  <Grid.Row>\n                    <Grid.Column width={11} floated=\"left\" verticalAlign=\"middle\">\n                      <SearchBar\n                        placeholder={i18next.t(\"Search for awards\")}\n                        autofocus\n                        actionProps={{\n                          icon: \"search\",\n                          content: null,\n                          className: \"search\",\n                        }}\n                      />\n                    </Grid.Column>\n                    <Grid.Column width={5} floated=\"right\" textAlign=\"right\">\n                      <FunderDropdown />\n                    </Grid.Column>\n                  </Grid.Row>\n\n                  <Grid.Column width={16} className=\"pb-0\">\n                    <ResultsLoader>\n                      <EmptyResults />\n                      <Error />\n                      <AwardResults\n                        deserializeAward={deserializeAward}\n                        deserializeFunder={deserializeFunder}\n                        computeFundingContents={computeFundingContents}\n                      />\n                    </ResultsLoader>\n                    <Container textAlign=\"center\" className=\"rel-mb-1\">\n                      <Pagination />\n                    </Container>\n                  </Grid.Column>\n\n                  <Grid.Column width={16} textAlign=\"center\" className=\"pt-0 pb-0\">\n                    <NoAwardResults\n                      switchToCustom={() => {\n                        resetForm();\n                        setMode(ModalTypes.CUSTOM);\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </ReactSearchKit>\n            )}\n            {mode === ModalTypes.CUSTOM && (\n              <CustomAwardForm\n                deserializeFunder={deserializeFunder}\n                selectedFunding={values.selectedFunding}\n              />\n            )}\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              onClick={() => {\n                resetForm();\n                closeModal();\n              }}\n              icon=\"remove\"\n              content={i18next.t(\"Cancel\")}\n              floated=\"left\"\n            />\n            <Button\n              onClick={(event) => handleSubmit(event)}\n              primary\n              icon=\"checkmark\"\n              content={\n                action === ModalActions.ADD\n                  ? i18next.t(\"Add award\")\n                  : i18next.t(\"Change award\")\n              }\n            />\n          </Modal.Actions>\n        </Modal>\n      )}\n    </Formik>\n  );\n}\n\nFundingModal.propTypes = {\n  mode: PropTypes.oneOf([\"standard\", \"custom\"]).isRequired,\n  action: PropTypes.oneOf([\"add\", \"edit\"]).isRequired,\n  trigger: PropTypes.object.isRequired,\n  onAwardChange: PropTypes.func.isRequired,\n  searchConfig: PropTypes.shape({\n    searchApi: PropTypes.shape({\n      axios: PropTypes.shape({\n        headers: PropTypes.object,\n      }),\n    }).isRequired,\n    initialQueryState: PropTypes.object.isRequired,\n  }).isRequired,\n  deserializeAward: PropTypes.func.isRequired,\n  deserializeFunder: PropTypes.func.isRequired,\n  computeFundingContents: PropTypes.func.isRequired,\n  initialFunding: PropTypes.object,\n};\n\nFundingModal.defaultProps = {\n  initialFunding: undefined,\n};\n\nexport default FundingModal;\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n// Copyright (C) 2021 Graz University of Technology.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\nimport React from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { Button, Icon, Label, List, Ref } from \"semantic-ui-react\";\n\nimport FundingModal from \"./FundingModal\";\nimport PropTypes from \"prop-types\";\n\nexport const FundingFieldItem = ({\n  compKey,\n  index,\n  fundingItem,\n  awardType,\n  moveFunding,\n  replaceFunding,\n  removeFunding,\n  searchConfig,\n  deserializeAward,\n  deserializeFunder,\n  computeFundingContents,\n}) => {\n  const dropRef = React.useRef(null);\n  // eslint-disable-next-line no-unused-vars\n  const [_, drag, preview] = useDrag({\n    item: { index, type: \"award\" },\n  });\n  const [{ hidden }, drop] = useDrop({\n    accept: \"award\",\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      if (monitor.isOver({ shallow: true })) {\n        moveFunding(dragIndex, hoverIndex);\n        item.index = hoverIndex;\n      }\n    },\n    collect: (monitor) => ({\n      hidden: monitor.isOver({ shallow: true }),\n    }),\n  });\n\n  let { headerContent, descriptionContent, awardOrFunder } =\n    computeFundingContents(fundingItem);\n\n  // Initialize the ref explicitely\n  drop(dropRef);\n  return (\n    <Ref innerRef={dropRef} key={compKey}>\n      <List.Item\n        key={compKey}\n        className={hidden ? \"deposit-drag-listitem hidden\" : \"deposit-drag-listitem\"}\n      >\n        <List.Content floated=\"right\">\n          <FundingModal\n            searchConfig={searchConfig}\n            onAwardChange={(selectedFunding) => {\n              replaceFunding(index, selectedFunding);\n            }}\n            mode={awardType}\n            action=\"edit\"\n            trigger={\n              <Button size=\"mini\" primary type=\"button\">\n                {i18next.t(\"Edit\")}\n              </Button>\n            }\n            deserializeAward={deserializeAward}\n            deserializeFunder={deserializeFunder}\n            computeFundingContents={computeFundingContents}\n            initialFunding={fundingItem}\n          />\n          <Button size=\"mini\" type=\"button\" onClick={() => removeFunding(index)}>\n            {i18next.t(\"Remove\")}\n          </Button>\n        </List.Content>\n\n        <Ref innerRef={drag}>\n          <List.Icon name=\"bars\" className=\"drag-anchor\" />\n        </Ref>\n        <Ref innerRef={preview}>\n          <List.Content>\n            <List.Header>\n              <>\n                <span className=\"mr-5\">{headerContent}</span>\n\n                {awardOrFunder === \"award\"\n                  ? fundingItem?.award?.number && (\n                      <Label basic size=\"mini\" className=\"mr-5\">\n                        {fundingItem.award.number}\n                      </Label>\n                    )\n                  : \"\"}\n                {awardOrFunder === \"award\"\n                  ? fundingItem?.award?.url && (\n                      <a\n                        href={`${fundingItem.award.url}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        aria-label={i18next.t(\"Open external link\")}\n                      >\n                        <Icon link name=\"external alternate\" />\n                      </a>\n                    )\n                  : \"\"}\n              </>\n            </List.Header>\n            <List.Description>\n              {descriptionContent ? descriptionContent : <br />}\n            </List.Description>\n          </List.Content>\n        </Ref>\n      </List.Item>\n    </Ref>\n  );\n};\n\nFundingFieldItem.propTypes = {\n  compKey: PropTypes.any,\n  index: PropTypes.number,\n  fundingItem: PropTypes.object,\n  awardType: PropTypes.string,\n  moveFunding: PropTypes.func.isRequired,\n  replaceFunding: PropTypes.func.isRequired,\n  removeFunding: PropTypes.func.isRequired,\n  searchConfig: PropTypes.object.isRequired,\n  deserializeAward: PropTypes.func.isRequired,\n  deserializeFunder: PropTypes.func.isRequired,\n  computeFundingContents: PropTypes.func.isRequired,\n};\n\nFundingFieldItem.defaultProps = {\n  compKey: undefined,\n  index: undefined,\n  fundingItem: undefined,\n  awardType: undefined,\n};\n","// This file is part of InvenioVocabularies\n// Copyright (C) 2021-2023 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FieldArray, getIn } from \"formik\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport { Button, Form, Icon, List } from \"semantic-ui-react\";\nimport { FieldLabel } from \"react-invenio-forms\";\n\nimport { FundingFieldItem } from \"./FundingFieldItem\";\nimport FundingModal from \"./FundingModal\";\n\nimport { i18next } from \"@translations/invenio_rdm_records/i18next\";\n\nfunction FundingFieldForm(props) {\n  const {\n    label,\n    labelIcon,\n    fieldPath,\n    form: { values },\n    move: formikArrayMove,\n    push: formikArrayPush,\n    remove: formikArrayRemove,\n    replace: formikArrayReplace,\n    required,\n    deserializeAward: deserializeAwardFunc,\n    deserializeFunder: deserializeFunderFunc,\n    computeFundingContents: computeFundingContentsFunc,\n    searchConfig,\n  } = props;\n\n  const deserializeAward = deserializeAwardFunc\n    ? deserializeAwardFunc\n    : (award) => ({\n        title: award?.title_l10n,\n        number: award.number,\n        funder: award.funder ?? \"\",\n        id: award.id,\n        ...(award.identifiers && { identifiers: award.identifiers }),\n        ...(award.acronym && { acronym: award.acronym }),\n      });\n\n  const deserializeFunder = deserializeFunderFunc\n    ? deserializeFunderFunc\n    : (funder) => ({\n        id: funder.id,\n        name: funder.name,\n        ...(funder.pid && { pid: funder.pid }),\n        ...(funder.country && { country: funder.country }),\n        ...(funder.identifiers && { identifiers: funder.identifiers }),\n      });\n\n  const computeFundingContents = computeFundingContentsFunc\n    ? computeFundingContentsFunc\n    : (funding) => {\n        let headerContent,\n          descriptionContent = \"\";\n        let awardOrFunder = \"award\";\n        if (funding.award) {\n          headerContent = funding.award.title;\n        }\n\n        if (funding.funder) {\n          const funderName =\n            funding?.funder?.name ?? funding.funder?.title ?? funding?.funder?.id ?? \"\";\n          descriptionContent = funderName;\n          if (!headerContent) {\n            awardOrFunder = \"funder\";\n            headerContent = funderName;\n            descriptionContent = \"\";\n          }\n        }\n\n        return { headerContent, descriptionContent, awardOrFunder };\n      };\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Form.Field required={required}>\n        <FieldLabel htmlFor={fieldPath} icon={labelIcon} label={label} />\n        <List>\n          {getIn(values, fieldPath, []).map((value, index) => {\n            const key = `${fieldPath}.${index}`;\n            // if award does not exist or has no id, it's a custom one\n            const awardType = value?.award?.id ? \"standard\" : \"custom\";\n            return (\n              <FundingFieldItem\n                key={key}\n                {...{\n                  index,\n                  compKey: key,\n                  fundingItem: value,\n                  awardType,\n                  moveFunding: formikArrayMove,\n                  replaceFunding: formikArrayReplace,\n                  removeFunding: formikArrayRemove,\n                  searchConfig: searchConfig,\n                  computeFundingContents: computeFundingContents,\n                  deserializeAward: deserializeAward,\n                  deserializeFunder: deserializeFunder,\n                }}\n              />\n            );\n          })}\n        </List>\n        <FundingModal\n          searchConfig={searchConfig}\n          trigger={\n            <Button\n              type=\"button\"\n              key=\"custom\"\n              icon\n              labelPosition=\"left\"\n              className=\"mb-5\"\n            >\n              <Icon name=\"add\" />\n              {i18next.t(\"Add award\")}\n            </Button>\n          }\n          onAwardChange={(selectedFunding) => {\n            formikArrayPush(selectedFunding);\n          }}\n          mode=\"standard\"\n          action=\"add\"\n          deserializeAward={deserializeAward}\n          deserializeFunder={deserializeFunder}\n          computeFundingContents={computeFundingContents}\n        />\n        <FundingModal\n          searchConfig={searchConfig}\n          trigger={\n            <Button type=\"button\" key=\"custom\" icon labelPosition=\"left\">\n              <Icon name=\"add\" />\n              {i18next.t(\"Add custom\")}\n            </Button>\n          }\n          onAwardChange={(selectedFunding) => {\n            formikArrayPush(selectedFunding);\n          }}\n          mode=\"custom\"\n          action=\"add\"\n          deserializeAward={deserializeAward}\n          deserializeFunder={deserializeFunder}\n          computeFundingContents={computeFundingContents}\n        />\n      </Form.Field>\n    </DndProvider>\n  );\n}\n\nFundingFieldForm.propTypes = {\n  label: PropTypes.node,\n  labelIcon: PropTypes.node,\n  fieldPath: PropTypes.string.isRequired,\n  form: PropTypes.object,\n  move: PropTypes.func,\n  push: PropTypes.func,\n  remove: PropTypes.func,\n  replace: PropTypes.func,\n  required: PropTypes.bool,\n  deserializeAward: PropTypes.func,\n  deserializeFunder: PropTypes.func,\n  computeFundingContents: PropTypes.func,\n  searchConfig: PropTypes.object,\n};\n\nFundingFieldForm.defaultProps = {\n  label: undefined,\n  labelIcon: undefined,\n  form: undefined,\n  move: undefined,\n  push: undefined,\n  remove: undefined,\n  replace: undefined,\n  required: undefined,\n  deserializeAward: undefined,\n  deserializeFunder: undefined,\n  computeFundingContents: undefined,\n  searchConfig: undefined,\n};\n\nexport function FundingField(props) {\n  const { fieldPath } = props;\n  return (\n    <FieldArray\n      name={fieldPath}\n      component={(formikProps) => <FundingFieldForm {...formikProps} {...props} />}\n    />\n  );\n}\n\nFundingField.propTypes = {\n  fieldPath: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  labelIcon: PropTypes.string,\n  searchConfig: PropTypes.object.isRequired,\n  required: PropTypes.bool,\n  deserializeAward: PropTypes.func,\n  deserializeFunder: PropTypes.func,\n  computeFundingContents: PropTypes.func,\n};\n\nFundingField.defaultProps = {\n  label: \"Awards\",\n  labelIcon: \"money bill alternate outline\",\n  required: false,\n  deserializeAward: undefined,\n  deserializeFunder: undefined,\n  computeFundingContents: undefined,\n};\n"],"names":["AwardResults","withState","_ref","results","currentResultsState","deserializeAward","deserializeFunder","computeFundingContents","React","FastField","name","_ref2","_ref2$form","form","values","setFieldValue","Item","Group","data","hits","map","award","funder","deserializedAward","funding","_computeFundingConten","headerContent","descriptionContent","awardOrFunder","key","id","onClick","className","Radio","checked","_get","onChange","Content","Header","size","number","Label","basic","url","href","concat","target","rel","Icon","link","Description","propTypes","PropTypes","isRequired","CustomAwardForm","selectedFunding","Form","RemoteSelectField","fieldPath","suggestionAPIUrl","suggestionAPIHeaders","Accept","placeholder","i18next","t","serializeSuggestions","funders","funderItem","funderName","funderPID","funderCountry","country","_objectSpread","text","filter","val","join","value","pid","deserializeFunderToDropdown","searchInput","autoFocus","_isEmpty","label","noQueryMessage","clearable","allowAdditions","multiple","selectOnBlur","selectOnNavigation","required","search","options","isFocused","onValueChange","selectedFundersArray","funderDropObject","formikProps","length","selectedFunder","deserializedFunder","as","widths","TextField","defaultProps","undefined","FunderDropdown","awardsList","updateQueryState","currentQueryState","_useFundersFromFacets","awards","_React$useState","_React$useState2","_slicedToArray","result","setResult","_awards$data$aggregat","loading","aggregations","buckets","agg","getFundersFromAwardsFacet","useFundersFromFacets","fundersFromFacets","Dropdown","selection","scrolling","event","newFilter","filters","page","fluid","NoAwardResults","switchToCustom","Segment","content","e","preventDefault","ModalTypes","ModalActions","StandardSchema","Yup","shape","CustomFundingSchema","title","test","message","this","parent","_this$parent","FundingModal","action","initialMode","mode","trigger","onAwardChange","searchConfig","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","open","setOpen","_useState3","_useState4","setMode","openModal","closeModal","searchApi","InvenioSearchApi","customObject","initialFunding","FundingSchema","Formik","initialValues","onSubmit","formikBag","setSubmitting","resetForm","validationSchema","validateOnChange","validateOnBlur","enableReinitialize","handleSubmit","Modal","role","centered","onOpen","onClose","closeIcon","closeOnDimmerClick","ReactSearchKit","appName","urlHandlerApi","enabled","initialQueryState","Grid","Row","Column","width","floated","verticalAlign","SearchBar","autofocus","actionProps","icon","textAlign","ResultsLoader","EmptyResults","Error","Container","Pagination","Actions","Button","primary","axios","headers","FundingFieldItem","_fundingItem$award","_fundingItem$award2","compKey","index","fundingItem","awardType","moveFunding","replaceFunding","removeFunding","dropRef","_useDrag","useDrag","item","type","_useDrag2","drag","preview","_useDrop","useDrop","accept","hover","monitor","current","dragIndex","hoverIndex","isOver","shallow","collect","hidden","_useDrop2","drop","Ref","innerRef","List","FundingFieldForm","labelIcon","formikArrayMove","move","formikArrayPush","push","formikArrayRemove","remove","formikArrayReplace","replace","deserializeAwardFunc","deserializeFunderFunc","computeFundingContentsFunc","_award$funder","title_l10n","identifiers","acronym","_funding$funder$name","_funding$funder","_funding$funder2","_funding$funder3","DndProvider","backend","HTML5Backend","Field","FieldLabel","htmlFor","getIn","_value$award","labelPosition","FundingField","FieldArray","component","_extends"],"sourceRoot":""}