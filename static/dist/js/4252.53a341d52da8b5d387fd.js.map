{"version":3,"file":"js/4252.53a341d52da8b5d387fd.js","mappings":"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","sources":["webpack://invenio-assets/./js/invenio_communities/api/CommunityLinksExtractor.js","webpack://invenio-assets/./js/invenio_communities/api/CommunityApi.js","webpack://invenio-assets/./js/invenio_communities/api/invitations/api.js","webpack://invenio-assets/./js/invenio_communities/api/members/api.js","webpack://invenio-assets/./js/invenio_communities/api/serializers.js"],"sourcesContent":["export class CommunityLinksExtractor {\n  #urls;\n\n  constructor(community) {\n    if (!community?.links) {\n      throw TypeError(\"Request resource links are undefined\");\n    }\n    this.#urls = community.links;\n  }\n\n  get selfUrl() {\n    if (!this.#urls.self) {\n      throw TypeError(\"Self link missing from resource.\");\n    }\n    return this.#urls.self;\n  }\n\n  get membersUrl() {\n    if (!this.#urls.members) {\n      throw TypeError(\"Members link missing from resource.\");\n    }\n    return this.#urls.members;\n  }\n\n  get publicMembersUrl() {\n    if (!this.#urls.public_members) {\n      throw TypeError(\"Public members link missing from resource.\");\n    }\n    return this.#urls.public_members;\n  }\n\n  get invitations() {\n    if (!this.#urls.invitations) {\n      throw TypeError(\"Invitations link missing from resource.\");\n    }\n    return this.#urls.invitations;\n  }\n}\n","// This file is part of Invenio-Communities\n// Copyright (C) 2021 CERN.\n// Copyright (C) 2021 Northwestern University.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { http } from \"react-invenio-forms\";\n\n/**\n * API Client for communities.\n *\n * It mostly uses the API links passed to it from responses.\n *\n */\nexport class CommunityApi {\n  baseUrl = \"/api/communities\";\n\n  /**\n   * Create a new community.\n   *\n   * @param {object} payload - Serialized community\n   * @param {object} options - Custom options\n   */\n  async create(payload, options) {\n    options = options || {};\n    return http.post(this.baseUrl, payload, {\n      ...options,\n    });\n  }\n\n  /**\n   * Update a pre-existing community.\n   *\n   * @param {string} communityId - identifier\n   * @param {object} payload - Serialized community\n   * @param {object} options - Custom options\n   */\n  async update(communityId, payload, options) {\n    options = options || {};\n    return http.put(`${this.baseUrl}/${communityId}`, payload, {\n      ...options,\n    });\n  }\n\n  /**\n   * Delete the community.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} options - Custom options\n   */\n  async delete(communityId, options) {\n    options = options || {};\n    return http.delete(`${this.baseUrl}/${communityId}`, {\n      ...options,\n    });\n  }\n\n  /**\n   * Change the identifier of a community.\n   *\n   * @param {string} communityId - the community identifier\n   * @param {object} newSlug - the new slug\n   * @param {object} options - Custom options\n   */\n  async renameSlug(communityId, newSlug, options) {\n    options = options || {};\n    return http.post(\n      `${this.baseUrl}/${communityId}/rename`,\n      { slug: newSlug },\n      {\n        ...options,\n      }\n    );\n  }\n\n  /**\n   * Update the community logo.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} payload - File\n   * @param {object} options - Custom options\n   */\n  async updateLogo(communityId, payload, options) {\n    options = options || {};\n    const headers = {\n      \"Content-Type\": \"application/octet-stream\",\n    };\n    return http.put(`${this.baseUrl}/${communityId}/logo`, payload, {\n      headers: headers,\n      ...options,\n    });\n  }\n\n  /**\n   * Delete the community logo.\n   *\n   * @param {string} communityId - Identifier\n   * @param {object} options - Custom options\n   */\n  async deleteLogo(communityId, options) {\n    options = options || {};\n    const headers = {\n      \"Content-Type\": \"application/octet-stream\",\n    };\n    return http.delete(`${this.baseUrl}/${communityId}/logo`, {\n      headers: headers,\n      ...options,\n    });\n  }\n}\n","// This file is part of Invenio-communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { CommunityLinksExtractor } from \"../CommunityLinksExtractor\";\nimport { bulkMembersSerializer } from \"../serializers\";\nimport { http } from \"react-invenio-forms\";\n\nexport class CommunityInvitationsApi {\n  #urls;\n\n  constructor(community, LinksExtractor = CommunityLinksExtractor) {\n    this.#urls = new LinksExtractor(community);\n    this.community = community;\n  }\n\n  createInvite = async (members, role, message = undefined) => {\n    const payload = {\n      members: bulkMembersSerializer(members),\n      role: role,\n    };\n    if (message) {\n      payload.message = message;\n    }\n\n    return await http.post(this.#urls.invitations, payload);\n  };\n\n  addGroupToMembers = async (members, role, message = undefined) => {\n    const payload = {\n      members: bulkMembersSerializer(members),\n      role: role,\n    };\n    if (message) {\n      payload.message = message;\n    }\n\n    return await http.post(this.#urls.membersUrl, payload);\n  };\n\n  updateInvites = async (payload) => {\n    return await http.put(this.#urls.invitations, payload);\n  };\n\n  updateRole = async (invitation, role) => {\n    const memberSerialized = bulkMembersSerializer([invitation]);\n    const payload = { members: memberSerialized, role: role };\n    return await this.updateInvites(payload);\n  };\n}\n","// This file is part of Invenio-communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nimport { CommunityLinksExtractor } from \"../CommunityLinksExtractor\";\nimport { http } from \"react-invenio-forms\";\nimport { bulkMembersSerializer } from \"../serializers\";\n\nexport class CommunityMembersApi {\n  #urls;\n\n  constructor(community, LinksExtractor = CommunityLinksExtractor) {\n    this.#urls = new LinksExtractor(community);\n  }\n\n  get endpoint() {\n    return this.#urls.membersUrl;\n  }\n\n  getMembers = async () => {\n    return await http.get(this.endpoint);\n  };\n\n  removeMemberBase = async (payload) => {\n    return await http.delete(this.endpoint, {\n      data: payload,\n    });\n  };\n\n  removeMember = async ({ type, id }) => {\n    const payload = {\n      members: [{ type, id }],\n    };\n\n    return this.removeMemberBase(payload);\n  };\n\n  bulkRemoveMembers = async (members) => {\n    const memberSerialized = bulkMembersSerializer(members);\n\n    return this.removeMemberBase({ members: memberSerialized });\n  };\n\n  #updateMembers = async (payload, { refresh = false } = {}) => {\n    const url = new URL(this.endpoint);\n    const params = url.searchParams;\n    params.delete(\"refresh\");\n    refresh && params.set(\"refresh\", refresh);\n    url.search = params.toString();\n    return await http.put(url.toString(), payload);\n  };\n\n  updateRole = async (member, role) => {\n    const memberSerialized = bulkMembersSerializer([member]);\n    const payload = { members: memberSerialized, role: role };\n    return await this.#updateMembers(payload);\n  };\n\n  updateVisibility = async (member, visibility) => {\n    const memberSerialized = bulkMembersSerializer([member]);\n    const payload = { members: memberSerialized, visible: visibility };\n    return await this.#updateMembers(payload);\n  };\n\n  bulkUpdateRoles = (members, role) => {\n    const membersSerialized = bulkMembersSerializer(members);\n    const payload = { members: membersSerialized, role: role };\n    return this.#updateMembers(payload, { refresh: true });\n  };\n\n  bulkUpdateVisibilities = (members, visibility) => {\n    const membersSerialized = bulkMembersSerializer(members);\n\n    const payload = { members: membersSerialized, visible: visibility };\n    return this.#updateMembers(payload, { refresh: true });\n  };\n}\n","// This file is part of Invenio-communities\n// Copyright (C) 2022 CERN.\n//\n// Invenio-communities is free software; you can redistribute it and/or modify it\n// under the terms of the MIT License; see LICENSE file for more details.\n\nexport const errorSerializer = (error) =>\n  error?.response?.data?.message || error?.message;\n\nexport const payloadSerializer = (content, format) => ({\n  payload: {\n    content,\n    format,\n  },\n});\n\nexport const communityErrorSerializer = (error) => ({\n  message: error?.response?.data?.message,\n  errors: error?.response?.data?.errors,\n  status: error?.response?.data?.status,\n});\n\nexport const bulkMembersSerializer = (members) =>\n  Object.entries(members).map(([memberId, memberData]) => ({\n    id: memberData.id,\n    type: memberData.type,\n  }));\n"],"names":["CommunityLinksExtractor","_createClass","community","_classCallCheck","_classPrivateFieldInitSpec","_urls","links","TypeError","this","key","get","_classPrivateFieldGet","self","members","public_members","invitations","CommunityApi","_defineProperty","value","_create","_asyncToGenerator","_regeneratorRuntime","_callee","payload","options","_context","prev","next","abrupt","http","post","baseUrl","_objectSpread","stop","_x","_x2","apply","arguments","_update","_callee2","communityId","_context2","put","concat","_x3","_x4","_x5","_delete2","_callee3","_context3","_x6","_x7","_renameSlug","_callee4","newSlug","_context4","slug","_x8","_x9","_x10","_updateLogo","_callee5","headers","_context5","_x11","_x12","_x13","_deleteLogo","_callee6","_context6","_x14","_x15","WeakMap","CommunityInvitationsApi","_this","LinksExtractor","length","undefined","_ref","role","message","_args","bulkMembersSerializer","sent","_ref2","_args2","membersUrl","_ref3","_ref4","invitation","memberSerialized","updateInvites","_updateMembers","CommunityMembersApi","endpoint","data","type","id","removeMemberBase","_ref5","_ref6","_ref7$refresh","refresh","url","params","_args5","URL","searchParams","set","search","toString","_ref8","member","call","_ref9","_callee7","visibility","_context7","visible","errorSerializer","error","_error$response","response","communityErrorSerializer","_error$response2","_error$response3","_error$response4","errors","status","Object","entries","map","_slicedToArray","memberData"],"sourceRoot":""}