Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var semanticUiReact = require('semantic-ui-react');
var axios = require('axios');
var formik = require('formik');
var _omit = require('lodash/omit');
var _isEmpty = require('lodash/isEmpty');
var _filter = require('lodash/filter');
var _matches = require('lodash/matches');
var _get = require('lodash/get');
var _debounce = require('lodash/debounce');
var _uniqBy = require('lodash/uniqBy');
var queryString = require('query-string');
var ClassicEditor = require('@ckeditor/ckeditor5-build-classic');
var CKEditor = require('@ckeditor/ckeditor5-react');
var _isArray = require('lodash/isArray');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
var _omit__default = /*#__PURE__*/_interopDefaultLegacy(_omit);
var _isEmpty__default = /*#__PURE__*/_interopDefaultLegacy(_isEmpty);
var _filter__default = /*#__PURE__*/_interopDefaultLegacy(_filter);
var _matches__default = /*#__PURE__*/_interopDefaultLegacy(_matches);
var _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);
var _debounce__default = /*#__PURE__*/_interopDefaultLegacy(_debounce);
var _uniqBy__default = /*#__PURE__*/_interopDefaultLegacy(_uniqBy);
var queryString__default = /*#__PURE__*/_interopDefaultLegacy(queryString);
var ClassicEditor__default = /*#__PURE__*/_interopDefaultLegacy(ClassicEditor);
var CKEditor__default = /*#__PURE__*/_interopDefaultLegacy(CKEditor);
var _isArray__default = /*#__PURE__*/_interopDefaultLegacy(_isArray);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _regeneratorRuntime() {
  _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) {
      keys.push(key);
    }
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

var _excluded$c = ["alt", "className", "src", "fallbackSrc", "loadFallbackFirst"];

/**
 * Primary UI Image component providing a fallback url if src one is not
 * able to be resolved. This is a thin layer on top of the <img> element.
 */
var Image = /*#__PURE__*/function (_Component) {
  _inherits(Image, _Component);
  var _super = _createSuper(Image);
  function Image() {
    var _this;
    _classCallCheck(this, Image);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.myRef = /*#__PURE__*/React__default["default"].createRef();
    _this.setSrc = function (currentTarget, src) {
      var isFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (isFallback) {
        if (!currentTarget.classList.contains("fallback_image")) {
          currentTarget.className += " fallback_image";
        }
      } else {
        if (currentTarget.classList.contains("fallback_image")) {
          currentTarget.classList.remove("fallback_image");
        }
      }
      if (currentTarget.nodeName !== "IMG") {
        // Item.Image is wrapping the <img> in a div element
        var img = currentTarget.querySelector("img");
        if (!img) {
          throw Error("No img tag found");
        }
        currentTarget = img;
      }
      currentTarget.src = src;
    };
    return _this;
  }
  _createClass(Image, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this$props, fallbackSrc, loadFallbackFirst, src;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, fallbackSrc = _this$props.fallbackSrc, loadFallbackFirst = _this$props.loadFallbackFirst, src = _this$props.src;
                if (!loadFallbackFirst) {
                  _context.next = 11;
                  break;
                }
                _context.prev = 2;
                _context.next = 5;
                return axios__default["default"].get(src);
              case 5:
                this.setSrc(this.myRef.current, src);
                _context.next = 11;
                break;
              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](2);
                // Fallback image is already loaded
                console.warn("\n        '".concat(src, "' couldn't be resolved. '").concat(fallbackSrc, "' will be used instead."));
              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 8]]);
      }));
      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }
      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props,
        alt = _this$props2.alt,
        className = _this$props2.className,
        src = _this$props2.src,
        fallbackSrc = _this$props2.fallbackSrc,
        loadFallbackFirst = _this$props2.loadFallbackFirst,
        UIprops = _objectWithoutProperties(_this$props2, _excluded$c);
      var loadingClass = !loadFallbackFirst ? "".concat(className, " placeholder") : "".concat(className, " fallback_image");
      var url = loadFallbackFirst ? fallbackSrc : src;
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Ref, {
        innerRef: this.myRef
      }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Image, Object.assign({
        className: loadingClass,
        alt: alt,
        src: url
      }, !loadFallbackFirst && {
        onError: function onError(_ref) {
          var currentTarget = _ref.currentTarget;
          currentTarget.onerror = null; // prevents looping
          _this2.setSrc(currentTarget, fallbackSrc, true);
        },
        onLoad: function onLoad() {
          // Control the loader via ref to make it immediately invisible
          if (!loadFallbackFirst) {
            _this2.myRef.current.classList.remove("placeholder");
          }
        }
      }, UIprops)));
    }
  }]);
  return Image;
}(React.Component);
Image.defaultProps = {
  className: "",
  alt: "No image found",
  fallbackSrc: "/static/images/square-placeholder.png",
  loadFallbackFirst: false
};

// This file is part of React-Invenio-Forms
// Copyright (C) 2022 CERN.
//
// React-Invenio-Forms is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.

/**
 * Wrap a promise to be cancellable and avoid potential memory leaks
 * https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html
 * @param promise the promise to wrap
 * @returns {Object} an object containing the promise to resolve and a `cancel` fn to reject the promise
 */
var withCancel = function withCancel(promise) {
  var isCancelled = false;
  var wrappedPromise = new Promise(function (resolve, reject) {
    promise.then(function (val) {
      return isCancelled ? reject("UNMOUNTED") : resolve(val);
    }, function (error) {
      return isCancelled ? reject("UNMOUNTED") : reject(error);
    });
  });
  return {
    promise: wrappedPromise,
    cancel: function cancel() {
      isCancelled = true;
    }
  };
};

var GridResponsiveSidebarColumn = /*#__PURE__*/function (_React$Component) {
  _inherits(GridResponsiveSidebarColumn, _React$Component);
  var _super = _createSuper(GridResponsiveSidebarColumn);
  function GridResponsiveSidebarColumn() {
    _classCallCheck(this, GridResponsiveSidebarColumn);
    return _super.apply(this, arguments);
  }
  _createClass(GridResponsiveSidebarColumn, [{
    key: "render",
    value: function render() {
      var closeSidebarBtnRef = /*#__PURE__*/React__default["default"].createRef();
      var _this$props = this.props,
        mobile = _this$props.mobile,
        tablet = _this$props.tablet,
        computer = _this$props.computer,
        widescreen = _this$props.widescreen,
        largeScreen = _this$props.largeScreen,
        width = _this$props.width,
        open = _this$props.open,
        onHideClick = _this$props.onHideClick,
        children = _this$props.children;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Grid.Column, {
        mobile: mobile,
        tablet: tablet,
        width: width,
        only: "mobile tablet"
      }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Sidebar, {
        as: semanticUiReact.Segment,
        animation: "overlay",
        visible: open,
        width: "wide",
        onHide: onHideClick,
        onShow: function onShow() {
          return closeSidebarBtnRef.current.focus();
        }
      }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Button, {
        basic: true,
        icon: "close",
        size: "small",
        floated: "right",
        onClick: onHideClick,
        "aria-label": "Close filter",
        ref: closeSidebarBtnRef,
        className: "mb-20"
      }), children)), /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Grid.Column, {
        width: width,
        only: "computer",
        computer: computer,
        largeScreen: largeScreen,
        widescreen: widescreen
      }, children));
    }
  }]);
  return GridResponsiveSidebarColumn;
}(React__default["default"].Component);
GridResponsiveSidebarColumn.defaultProps = {
  width: undefined,
  mobile: undefined,
  tablet: undefined,
  computer: undefined,
  widescreen: undefined,
  largeScreen: undefined
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

var _excluded$b = ["label", "children", "active"];
var AccordionField = /*#__PURE__*/function (_Component) {
  _inherits(AccordionField, _Component);
  var _super = _createSuper(AccordionField);
  function AccordionField() {
    var _this;
    _classCallCheck(this, AccordionField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderAccordion = function (props) {
      var _props$form = props.form,
        errors = _props$form.errors,
        status = _props$form.status;

      // eslint-disable-next-line no-unused-vars
      var _this$props = _this.props,
        label = _this$props.label,
        children = _this$props.children,
        active = _this$props.active,
        ui = _objectWithoutProperties(_this$props, _excluded$b);
      var uiProps = _omit__default["default"](_objectSpread2({}, ui), ["optimized", "includesPaths"]);
      var hasError = status ? _this.hasError(status) : _this.hasError(errors);
      var panels = [{
        key: "panel-".concat(label),
        title: {
          content: label,
          icon: "angle right"
        },
        content: {
          content: /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Container, null, children)
        }
      }];
      var errorClass = hasError ? "error secondary" : "";
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Accordion, Object.assign({
        defaultActiveIndex: active ? 0 : null,
        panels: panels,
        inverted: true,
        className: "invenio-accordion-field ".concat(errorClass)
      }, uiProps));
    };
    return _this;
  }
  _createClass(AccordionField, [{
    key: "hasError",
    value: function hasError(errors) {
      var includesPaths = this.props.includesPaths;
      for (var errorPath in errors) {
        for (var subPath in errors[errorPath]) {
          if (includesPaths.includes("".concat(errorPath, ".").concat(subPath))) return true;
        }
      }
      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var optimized = this.props.optimized;
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, {
        name: "",
        component: this.renderAccordion
      });
    }
  }]);
  return AccordionField;
}(React.Component);
AccordionField.defaultProps = {
  active: false,
  includesPaths: [],
  label: "",
  optimized: false,
  children: null,
  ui: null
};

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var FieldLabel = /*#__PURE__*/function (_Component) {
  _inherits(FieldLabel, _Component);
  var _super = _createSuper(FieldLabel);
  function FieldLabel() {
    _classCallCheck(this, FieldLabel);
    return _super.apply(this, arguments);
  }
  _createClass(FieldLabel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        htmlFor = _this$props.htmlFor,
        icon = _this$props.icon,
        label = _this$props.label,
        className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: htmlFor,
        className: className
      }, icon ? /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Icon, {
        name: icon
      }) : null, label);
    }
  }]);
  return FieldLabel;
}(React.Component);
FieldLabel.defaultProps = {
  className: "field-label-class invenio-field-label",
  icon: "",
  htmlFor: undefined,
  label: undefined
};

var _excluded$a = ["form"],
  _excluded2$3 = ["addButtonLabel", "children", "defaultNewValue", "fieldPath", "label", "labelIcon", "helpText", "requiredOptions"];
var ArrayField = /*#__PURE__*/function (_Component) {
  _inherits(ArrayField, _Component);
  var _super = _createSuper(ArrayField);
  function ArrayField(_props) {
    var _this;
    _classCallCheck(this, ArrayField);
    _this = _super.call(this, _props);
    _this.hasGroupErrors = function (errors) {
      var fieldPath = _this.props.fieldPath;
      for (var field in errors) {
        if (field.startsWith(fieldPath)) {
          return true;
        }
      }
      return false;
    };
    _this.getValues = function (values, fieldPath) {
      var _this$props = _this.props,
        requiredOptions = _this$props.requiredOptions,
        defaultNewValue = _this$props.defaultNewValue,
        showEmptyValue = _this$props.showEmptyValue;
      var hasBeenShown = _this.state.hasBeenShown;
      var existingValues = formik.getIn(values, fieldPath, []);
      if (!hasBeenShown && _isEmpty__default["default"](requiredOptions) && _isEmpty__default["default"](existingValues) && showEmptyValue) {
        existingValues.push(_objectSpread2({
          __key: existingValues.length
        }, defaultNewValue));
        _this.setState({
          hasBeenShown: true
        });
      }
      var _iterator = _createForOfIteratorHelper(requiredOptions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var requiredOption = _step.value;
          var valuesMatchingRequiredOption = _filter__default["default"](existingValues, _matches__default["default"](requiredOption));
          if (valuesMatchingRequiredOption.length === 0) {
            existingValues.push(_objectSpread2({
              __key: existingValues.length
            }, requiredOption));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return existingValues;
    };
    _this.renderFormField = function (props) {
      var _props$form = props.form,
        values = _props$form.values,
        errors = _props$form.errors,
        arrayHelpers = _objectWithoutProperties(props, _excluded$a);
      var _this$props2 = _this.props,
        addButtonLabel = _this$props2.addButtonLabel,
        children = _this$props2.children,
        defaultNewValue = _this$props2.defaultNewValue,
        fieldPath = _this$props2.fieldPath,
        label = _this$props2.label,
        labelIcon = _this$props2.labelIcon,
        helpText = _this$props2.helpText;
        _this$props2.requiredOptions;
        var uiProps = _objectWithoutProperties(_this$props2, _excluded2$3);
      var hasError = _this.hasGroupErrors(errors) ? {
        error: {}
      } : {};
      var nextKey = _this.state.nextKey;
      var valuesToDisplay = _this.getValues(values, fieldPath);
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Field, Object.assign({}, uiProps, hasError), /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }), valuesToDisplay.map(function (value, index, array) {
        var arrayPath = fieldPath;
        var indexPath = index;
        var key = value.__key || index;
        return /*#__PURE__*/React__default["default"].createElement("div", {
          key: key
        }, children(_objectSpread2({
          array: array,
          arrayHelpers: arrayHelpers,
          arrayPath: arrayPath,
          indexPath: indexPath,
          key: key,
          value: value
        }, props)));
      }), /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, helpText), /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Group, null, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Button, {
        type: "button",
        icon: true,
        className: "align-self-end",
        labelPosition: "left",
        onClick: function onClick() {
          arrayHelpers.push(_objectSpread2(_objectSpread2({}, defaultNewValue), {}, {
            __key: nextKey
          }));
          _this.setState(function (state) {
            return {
              nextKey: state.nextKey - 1
            };
          });
        }
      }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Icon, {
        name: "add"
      }), addButtonLabel)));
    };
    _this.state = {
      // Chosen because it will never cross with 0-indexed pre-existing keys.
      nextKey: -1,
      hasBeenShown: false
    };
    return _this;
  }
  _createClass(ArrayField, [{
    key: "render",
    value: function render() {
      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React__default["default"].createElement(formik.FieldArray, {
        className: "invenio-array-field",
        name: fieldPath,
        component: this.renderFormField
      });
    }
  }]);
  return ArrayField;
}(React.Component);
ArrayField.defaultProps = {
  addButtonLabel: "Add new row",
  helpText: "",
  label: "",
  labelIcon: "",
  requiredOptions: [],
  showEmptyValue: false
};

var BaseForm = /*#__PURE__*/function (_Component) {
  _inherits(BaseForm, _Component);
  var _super = _createSuper(BaseForm);
  function BaseForm() {
    _classCallCheck(this, BaseForm);
    return _super.apply(this, arguments);
  }
  _createClass(BaseForm, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        formik$1 = _this$props.formik,
        onSubmit = _this$props.onSubmit,
        children = _this$props.children;
      return /*#__PURE__*/React__default["default"].createElement(formik.Formik, Object.assign({
        onSubmit: onSubmit
      }, formik$1), /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form, null, children));
    }
  }]);
  return BaseForm;
}(React.Component);
BaseForm.defaultProps = {
  formik: undefined
};

var _excluded$9 = ["fieldPath", "label"];
var BooleanField = /*#__PURE__*/function (_Component) {
  _inherits(BooleanField, _Component);
  var _super = _createSuper(BooleanField);
  function BooleanField() {
    var _this;
    _classCallCheck(this, BooleanField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (props) {
      var _this$props = _this.props,
        fieldPath = _this$props.fieldPath,
        label = _this$props.label,
        uiProps = _objectWithoutProperties(_this$props, _excluded$9);
      var _props$form = props.form,
        values = _props$form.values,
        handleBlur = _props$form.handleBlur,
        errors = _props$form.errors,
        initialErrors = _props$form.initialErrors,
        initialValues = _props$form.initialValues,
        setFieldValue = _props$form.setFieldValue;
      var value = formik.getIn(values, fieldPath, false);
      var initialValue = formik.getIn(initialValues, fieldPath, false);
      // We check if initialValue changed to display the initialError,
      // otherwise it would be displayed despite updating the field
      var fieldErrors = errors || initialValue === value && initialErrors;
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Group, {
        inline: true
      }, /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: fieldPath
      }, label), /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Checkbox, Object.assign({
        id: fieldPath,
        name: fieldPath,
        onChange: function onChange() {
          return setFieldValue(fieldPath, !value);
        },
        onBlur: handleBlur,
        checked: value,
        error: _this.renderError(fieldErrors, fieldPath)
      }, uiProps)));
    };
    return _this;
  }
  _createClass(BooleanField, [{
    key: "renderError",
    value: function renderError(errors, name) {
      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "left";
      var error = errors[name];
      return error ? {
        content: error,
        pointing: direction
      } : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        optimized = _this$props2.optimized,
        fieldPath = _this$props2.fieldPath;
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, {
        className: "invenio-boolean-field",
        name: fieldPath,
        component: this.renderFormField
      });
    }
  }]);
  return BooleanField;
}(React.Component);
BooleanField.defaultProps = {
  label: "",
  optimized: false
};

var _excluded$8 = ["fieldPath"];
var ErrorLabel = /*#__PURE__*/function (_Component) {
  _inherits(ErrorLabel, _Component);
  var _super = _createSuper(ErrorLabel);
  function ErrorLabel() {
    var _this;
    _classCallCheck(this, ErrorLabel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (_ref) {
      var _ref$form = _ref.form,
        errors = _ref$form.errors,
        initialErrors = _ref$form.initialErrors;
      var _this$props = _this.props,
        fieldPath = _this$props.fieldPath,
        uiProps = _objectWithoutProperties(_this$props, _excluded$8);
      var error = _get__default["default"](errors, fieldPath, "") || _get__default["default"](initialErrors, fieldPath, "");
      return error ? /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Label, Object.assign({
        pointing: true,
        prompt: true,
        content: error
      }, uiProps)) : null;
    };
    return _this;
  }
  _createClass(ErrorLabel, [{
    key: "render",
    value: function render() {
      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React__default["default"].createElement(formik.Field, {
        className: "invenio-error-label-field",
        name: fieldPath
      }, this.renderFormField);
    }
  }]);
  return ErrorLabel;
}(React.Component);

var _excluded$7 = ["fieldPath"];
var ErrorMessage = /*#__PURE__*/function (_Component) {
  _inherits(ErrorMessage, _Component);
  var _super = _createSuper(ErrorMessage);
  function ErrorMessage() {
    var _this;
    _classCallCheck(this, ErrorMessage);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (_ref) {
      var errors = _ref.form.errors;
      var _this$props = _this.props,
        fieldPath = _this$props.fieldPath,
        uiProps = _objectWithoutProperties(_this$props, _excluded$7);
      return errors[fieldPath] ? /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Message, Object.assign({
        negative: true,
        content: errors[fieldPath]
      }, uiProps)) : null;
    };
    return _this;
  }
  _createClass(ErrorMessage, [{
    key: "render",
    value: function render() {
      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React__default["default"].createElement(formik.Field, {
        className: "invenio-error-message-field",
        name: fieldPath
      }, this.renderFormField);
    }
  }]);
  return ErrorMessage;
}(React.Component);

var _excluded$6 = ["action", "basic", "border", "children", "fieldPath"],
  _excluded2$2 = ["optimized", "fieldPath"];
var GroupField = /*#__PURE__*/function (_React$Component) {
  _inherits(GroupField, _React$Component);
  var _super = _createSuper(GroupField);
  function GroupField() {
    var _this;
    _classCallCheck(this, GroupField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.hasGroupErrors = function (errors) {
      var fieldPath = _this.props.fieldPath;
      for (var field in errors) {
        if (field.startsWith(fieldPath)) {
          return true;
        }
      }
      return false;
    };
    _this.renderBasicField = function (action, classNames, children) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: classNames.join(" ")
      }, action && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "group-action"
      }, action), children);
    };
    _this.renderFormField = function (props) {
      var action = props.action,
        basic = props.basic,
        border = props.border,
        children = props.children,
        fieldPath = props.fieldPath,
        uiProps = _objectWithoutProperties(props, _excluded$6);
      var errors = formik.getIn(props, "form.errors");
      var classNames = ["form-group"];
      if (border) {
        classNames.push("border");
      }
      if (fieldPath && _this.hasGroupErrors(errors)) {
        classNames.push("error");
      }
      if (basic) {
        return _this.renderBasicField(action, classNames, children);
      }
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Group, Object.assign({
        className: classNames.join(" ")
      }, uiProps), action && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "group-action"
      }, action), children);
    };
    return _this;
  }
  _createClass(GroupField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        optimized = _this$props.optimized,
        fieldPath = _this$props.fieldPath,
        uiProps = _objectWithoutProperties(_this$props, _excluded2$2);
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, Object.assign({
        name: fieldPath,
        component: this.renderFormField,
        fieldPath: fieldPath,
        className: "invenio-group-field"
      }, uiProps));
    }
  }]);
  return GroupField;
}(React__default["default"].Component);
GroupField.defaultProps = {
  border: false,
  fieldPath: "",
  optimized: false,
  action: undefined,
  basic: false,
  children: undefined
};

var _excluded$5 = ["form"],
  _excluded2$1 = ["defaultValue", "error", "fieldPath", "label", "options", "onChange", "onAddItem", "multiple"],
  _excluded3$1 = ["optimized", "fieldPath"];
var SelectField = /*#__PURE__*/function (_Component) {
  _inherits(SelectField, _Component);
  var _super = _createSuper(SelectField);
  function SelectField() {
    var _this;
    _classCallCheck(this, SelectField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderError = function (errors, name, value) {
      var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "above";
      var options = _this.props.options;
      var error = null;
      if (!Array.isArray(value)) {
        if (!_isEmpty__default["default"](options) && !options.find(function (o) {
          return o.value === value;
        }) && !_isEmpty__default["default"](value)) {
          error = "The current value \"".concat(value, "\" is invalid, please select another value.");
        }
      }
      if (!error) {
        error = errors[name];
      }
      return error ? {
        content: error,
        pointing: direction
      } : null;
    };
    _this.renderFormField = function (formikProps) {
      var _formikProps$form = formikProps.form,
        values = _formikProps$form.values,
        setFieldValue = _formikProps$form.setFieldValue,
        handleBlur = _formikProps$form.handleBlur,
        errors = _formikProps$form.errors,
        initialErrors = _formikProps$form.initialErrors,
        initialValues = _formikProps$form.initialValues,
        cmpProps = _objectWithoutProperties(formikProps, _excluded$5);
      var defaultValue = cmpProps.defaultValue,
        error = cmpProps.error,
        fieldPath = cmpProps.fieldPath,
        label = cmpProps.label,
        options = cmpProps.options,
        _onChange = cmpProps.onChange,
        _onAddItem = cmpProps.onAddItem,
        multiple = cmpProps.multiple,
        uiProps = _objectWithoutProperties(cmpProps, _excluded2$1);
      var _defaultValue = multiple ? [] : "";
      var value = formik.getIn(values, fieldPath, defaultValue || _defaultValue);
      var initialValue = formik.getIn(initialValues, fieldPath, _defaultValue);
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Dropdown, Object.assign({
        fluid: true,
        className: "invenio-select-field",
        selection: true,
        error: error || formik.getIn(errors, fieldPath, null) ||
        // We check if initialValue changed to display the initialError,
        // otherwise it would be displayed despite updating the fieldu
        initialValue === value && formik.getIn(initialErrors, fieldPath, null),
        id: fieldPath,
        label: {
          children: label,
          htmlFor: fieldPath
        },
        name: fieldPath,
        onBlur: handleBlur,
        onChange: function onChange(event, data) {
          if (_onChange) {
            _onChange({
              event: event,
              data: data,
              formikProps: formikProps
            });
            event.target.value = "";
          } else {
            setFieldValue(fieldPath, data.value);
          }
        },
        onAddItem: function onAddItem(event, data) {
          if (_onAddItem) {
            _onAddItem({
              event: event,
              data: data,
              formikProps: formikProps
            });
          }
        },
        options: options,
        value: value,
        multiple: multiple
      }, uiProps));
    };
    return _this;
  }
  _createClass(SelectField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        optimized = _this$props.optimized,
        fieldPath = _this$props.fieldPath,
        uiProps = _objectWithoutProperties(_this$props, _excluded3$1);
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, Object.assign({
        name: fieldPath,
        component: this.renderFormField,
        fieldPath: fieldPath
      }, uiProps));
    }
  }]);
  return SelectField;
}(React.Component);
SelectField.defaultProps = {
  defaultValue: "",
  optimized: false,
  error: undefined,
  label: "",
  onChange: undefined,
  onAddItem: undefined,
  multiple: false
};

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var _excluded$4 = ["fieldPath", "suggestionAPIUrl", "suggestionAPIQueryParams", "serializeSuggestions", "serializeAddedValue", "suggestionAPIHeaders", "debounceTime", "noResultsMessage", "loadingMessage", "suggestionsErrorMessage", "noQueryMessage", "initialSuggestions", "preSearchChange", "onValueChange", "search"];
var DEFAULT_SUGGESTION_SIZE = 20;
var serializeSuggestions = function serializeSuggestions(suggestions) {
  return suggestions.map(function (item) {
    return {
      text: item.title,
      value: item.id,
      key: item.id
    };
  });
};
var RemoteSelectField = /*#__PURE__*/function (_Component) {
  _inherits(RemoteSelectField, _Component);
  var _super = _createSuper(RemoteSelectField);
  function RemoteSelectField(props) {
    var _this;
    _classCallCheck(this, RemoteSelectField);
    _this = _super.call(this, props);
    _this.onSelectValue = function (event, _ref, callbackFunc) {
      var options = _ref.options,
        value = _ref.value;
      var multiple = _this.props.multiple;
      var newSelectedSuggestions = options.filter(function (item) {
        return value.includes(item.value);
      });
      _this.setState({
        selectedSuggestions: newSelectedSuggestions,
        searchQuery: null,
        error: false,
        open: !!multiple
      }, function () {
        return callbackFunc(newSelectedSuggestions);
      });
    };
    _this.handleAddition = function (e, _ref2, callbackFunc) {
      var value = _ref2.value;
      var serializeAddedValue = _this.props.serializeAddedValue;
      var selectedSuggestions = _this.state.selectedSuggestions;
      var selectedSuggestion = serializeAddedValue ? serializeAddedValue(value) : {
        text: value,
        value: value,
        key: value,
        name: value
      };
      var newSelectedSuggestions = [].concat(_toConsumableArray(selectedSuggestions), [selectedSuggestion]);
      _this.setState(function (prevState) {
        return {
          selectedSuggestions: newSelectedSuggestions,
          suggestions: _uniqBy__default["default"]([].concat(_toConsumableArray(prevState.suggestions), _toConsumableArray(newSelectedSuggestions)), "value")
        };
      }, function () {
        return callbackFunc(newSelectedSuggestions);
      });
    };
    _this.onSearchChange = _debounce__default["default"]( /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e, _ref3) {
        var searchQuery, _this$props, preSearchChange, serializeSuggestions, query, suggestions, serializedSuggestions;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                searchQuery = _ref3.searchQuery;
                _this$props = _this.props, preSearchChange = _this$props.preSearchChange, serializeSuggestions = _this$props.serializeSuggestions;
                query = preSearchChange(searchQuery);
                _this.setState({
                  isFetching: true,
                  searchQuery: query
                });
                _context.prev = 4;
                _context.next = 7;
                return _this.fetchSuggestions(query);
              case 7:
                suggestions = _context.sent;
                serializedSuggestions = serializeSuggestions(suggestions);
                _this.setState(function (prevState) {
                  return {
                    suggestions: _uniqBy__default["default"]([].concat(_toConsumableArray(prevState.selectedSuggestions), _toConsumableArray(serializedSuggestions)), "value"),
                    isFetching: false,
                    error: false,
                    open: true
                  };
                });
                _context.next = 15;
                break;
              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](4);
                _this.setState({
                  error: true,
                  isFetching: false
                });
              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[4, 12]]);
      }));
      return function (_x, _x2) {
        return _ref4.apply(this, arguments);
      };
    }(), _this.props.debounceTime);
    _this.fetchSuggestions = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(searchQuery) {
        var _this$props2, suggestionAPIUrl, suggestionAPIQueryParams, suggestionAPIHeaders;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props2 = _this.props, suggestionAPIUrl = _this$props2.suggestionAPIUrl, suggestionAPIQueryParams = _this$props2.suggestionAPIQueryParams, suggestionAPIHeaders = _this$props2.suggestionAPIHeaders;
                return _context2.abrupt("return", axios__default["default"].get(suggestionAPIUrl, {
                  params: _objectSpread2({
                    suggest: searchQuery,
                    size: DEFAULT_SUGGESTION_SIZE
                  }, suggestionAPIQueryParams),
                  headers: suggestionAPIHeaders,
                  // There is a bug in axios that prevents brackets from being encoded,
                  // remove the paramsSerializer when fixed.
                  // https://github.com/axios/axios/issues/3316
                  paramsSerializer: function paramsSerializer(params) {
                    return queryString__default["default"].stringify(params, {
                      arrayFormat: "repeat"
                    });
                  }
                }).then(function (resp) {
                  var _resp$data, _resp$data$hits;
                  return resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : (_resp$data$hits = _resp$data.hits) === null || _resp$data$hits === void 0 ? void 0 : _resp$data$hits.hits;
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }();
    _this.getNoResultsMessage = function () {
      var _this$props3 = _this.props,
        loadingMessage = _this$props3.loadingMessage,
        suggestionsErrorMessage = _this$props3.suggestionsErrorMessage,
        noQueryMessage = _this$props3.noQueryMessage,
        noResultsMessage = _this$props3.noResultsMessage;
      var _this$state = _this.state,
        isFetching = _this$state.isFetching,
        error = _this$state.error,
        searchQuery = _this$state.searchQuery;
      if (isFetching) {
        return loadingMessage;
      }
      if (error) {
        return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Message, {
          negative: true,
          size: "mini",
          content: suggestionsErrorMessage
        });
      }
      if (!searchQuery) {
        return noQueryMessage;
      }
      return noResultsMessage;
    };
    _this.onClose = function () {
      _this.setState({
        open: false
      });
    };
    _this.onBlur = function () {
      _this.setState(function (prevState) {
        return {
          open: false,
          error: false,
          searchQuery: null,
          suggestions: _toConsumableArray(prevState.selectedSuggestions)
        };
      });
    };
    _this.onFocus = function () {
      _this.setState({
        open: true
      });
    };
    _this.getProps = function () {
      var _this$props4 = _this.props,
        fieldPath = _this$props4.fieldPath,
        suggestionAPIUrl = _this$props4.suggestionAPIUrl,
        suggestionAPIQueryParams = _this$props4.suggestionAPIQueryParams,
        serializeSuggestions = _this$props4.serializeSuggestions,
        serializeAddedValue = _this$props4.serializeAddedValue,
        suggestionAPIHeaders = _this$props4.suggestionAPIHeaders,
        debounceTime = _this$props4.debounceTime,
        noResultsMessage = _this$props4.noResultsMessage,
        loadingMessage = _this$props4.loadingMessage,
        suggestionsErrorMessage = _this$props4.suggestionsErrorMessage,
        noQueryMessage = _this$props4.noQueryMessage,
        initialSuggestions = _this$props4.initialSuggestions,
        preSearchChange = _this$props4.preSearchChange,
        onValueChange = _this$props4.onValueChange,
        search = _this$props4.search,
        uiProps = _objectWithoutProperties(_this$props4, _excluded$4);
      var compProps = {
        fieldPath: fieldPath,
        suggestionAPIUrl: suggestionAPIUrl,
        suggestionAPIQueryParams: suggestionAPIQueryParams,
        suggestionAPIHeaders: suggestionAPIHeaders,
        serializeSuggestions: serializeSuggestions,
        serializeAddedValue: serializeAddedValue,
        debounceTime: debounceTime,
        noResultsMessage: noResultsMessage,
        loadingMessage: loadingMessage,
        suggestionsErrorMessage: suggestionsErrorMessage,
        noQueryMessage: noQueryMessage,
        initialSuggestions: initialSuggestions,
        preSearchChange: preSearchChange,
        onValueChange: onValueChange,
        search: search
      };
      return {
        compProps: compProps,
        uiProps: uiProps
      };
    };
    var _initialSuggestions = props.initialSuggestions ? props.serializeSuggestions(props.initialSuggestions) : [];
    _this.state = {
      isFetching: false,
      suggestions: _initialSuggestions,
      selectedSuggestions: _initialSuggestions,
      error: false,
      searchQuery: null,
      open: false
    };
    return _this;
  }
  _createClass(RemoteSelectField, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$getProps = this.getProps(),
        compProps = _this$getProps.compProps,
        uiProps = _this$getProps.uiProps;
      var _this$state2 = this.state,
        error = _this$state2.error,
        suggestions = _this$state2.suggestions,
        open = _this$state2.open,
        isFetching = _this$state2.isFetching;
      return /*#__PURE__*/React__default["default"].createElement(SelectField, Object.assign({}, uiProps, {
        allowAdditions: error ? false : uiProps.allowAdditions,
        fieldPath: compProps.fieldPath,
        options: suggestions,
        noResultsMessage: this.getNoResultsMessage(),
        search: compProps.search,
        lazyLoad: true,
        open: open,
        onClose: this.onClose,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onSearchChange: this.onSearchChange,
        onAddItem: function onAddItem(_ref6) {
          var event = _ref6.event,
            data = _ref6.data,
            formikProps = _ref6.formikProps;
          _this2.handleAddition(event, data, function (selectedSuggestions) {
            if (compProps.onValueChange) {
              compProps.onValueChange({
                event: event,
                data: data,
                formikProps: formikProps
              }, selectedSuggestions);
            }
          });
        },
        onChange: function onChange(_ref7) {
          var event = _ref7.event,
            data = _ref7.data,
            formikProps = _ref7.formikProps;
          _this2.onSelectValue(event, data, function (selectedSuggestions) {
            if (compProps.onValueChange) {
              compProps.onValueChange({
                event: event,
                data: data,
                formikProps: formikProps
              }, selectedSuggestions);
            } else {
              formikProps.form.setFieldValue(compProps.fieldPath, data.value);
            }
          });
        },
        loading: isFetching,
        className: "invenio-remote-select-field"
      }));
    }
  }]);
  return RemoteSelectField;
}(React.Component);
RemoteSelectField.defaultProps = {
  debounceTime: 500,
  suggestionAPIQueryParams: {},
  suggestionAPIHeaders: {},
  serializeSuggestions: serializeSuggestions,
  suggestionsErrorMessage: "Something went wrong...",
  noQueryMessage: "Search...",
  noResultsMessage: "No results found.",
  loadingMessage: "Loading...",
  preSearchChange: function preSearchChange(x) {
    return x;
  },
  search: true,
  multiple: false,
  serializeAddedValue: undefined,
  initialSuggestions: [],
  onValueChange: undefined
};

var _excluded$3 = ["fieldPath", "error", "helpText", "disabled", "label", "optimized", "required"];
var TextField = /*#__PURE__*/function (_Component) {
  _inherits(TextField, _Component);
  var _super = _createSuper(TextField);
  function TextField() {
    _classCallCheck(this, TextField);
    return _super.apply(this, arguments);
  }
  _createClass(TextField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fieldPath = _this$props.fieldPath;
        _this$props.error;
        var helpText = _this$props.helpText,
        disabled = _this$props.disabled,
        label = _this$props.label,
        optimized = _this$props.optimized,
        required = _this$props.required,
        uiProps = _objectWithoutProperties(_this$props, _excluded$3);
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FormikField, {
        className: "invenio-text-input-field",
        id: fieldPath,
        name: fieldPath
      }, function (_ref) {
        var field = _ref.field,
          meta = _ref.meta;
        return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Input, Object.assign({}, field, {
          error: meta.error,
          disabled: disabled,
          fluid: true,
          label: label,
          required: required
        }, uiProps));
      }), helpText && /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, helpText));
    }
  }]);
  return TextField;
}(React.Component);
TextField.defaultProps = {
  error: undefined,
  helpText: "",
  disabled: false,
  optimized: false,
  required: false
};

var _excluded$2 = ["form"],
  _excluded2 = ["fieldPath"],
  _excluded3 = ["optimized", "fieldPath"];
var TextAreaField = /*#__PURE__*/function (_Component) {
  _inherits(TextAreaField, _Component);
  var _super = _createSuper(TextAreaField);
  function TextAreaField() {
    var _this;
    _classCallCheck(this, TextAreaField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (_ref) {
      var form = _ref.form,
        cmpProps = _objectWithoutProperties(_ref, _excluded$2);
      var fieldPath = cmpProps.fieldPath,
        uiProps = _objectWithoutProperties(cmpProps, _excluded2);
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Field, {
        id: fieldPath,
        className: "invenio-text-area-field"
      }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.TextArea, Object.assign({
        id: fieldPath,
        name: fieldPath,
        onChange: form.handleChange,
        onBlur: form.handleBlur,
        value: formik.getIn(form.values, fieldPath, "")
      }, uiProps)), /*#__PURE__*/React__default["default"].createElement(ErrorLabel, {
        fieldPath: fieldPath
      }));
    };
    return _this;
  }
  _createClass(TextAreaField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        optimized = _this$props.optimized,
        fieldPath = _this$props.fieldPath,
        props = _objectWithoutProperties(_this$props, _excluded3);
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, Object.assign({
        id: fieldPath,
        name: fieldPath,
        component: this.renderFormField,
        fieldPath: fieldPath
      }, props));
    }
  }]);
  return TextAreaField;
}(React.Component);
TextAreaField.defaultProps = {
  optimized: false
};

var _excluded$1 = ["checked", "fieldPath", "label", "labelIcon", "onChange", "value"];
var RadioField = /*#__PURE__*/function (_Component) {
  _inherits(RadioField, _Component);
  var _super = _createSuper(RadioField);
  function RadioField() {
    var _this;
    _classCallCheck(this, RadioField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (formikProps) {
      /** Radio Formik + Semantic-UI Field Component
       *
       * NOTE: renderFormField is run multiple times
       * TODO: might gain performance by extracting it out as own component and
       *       using class methods
       *
       * field: current Formik field (RadioField instance)
       * form: current Formik form (holds formik state that drives the UI)
       */

      var _this$props = _this.props,
        checked = _this$props.checked,
        fieldPath = _this$props.fieldPath,
        label = _this$props.label,
        labelIcon = _this$props.labelIcon,
        onChange = _this$props.onChange,
        value = _this$props.value,
        ui = _objectWithoutProperties(_this$props, _excluded$1);
      var handleChange = function handleChange(event, data) {
        if (onChange) {
          onChange({
            event: event,
            data: data,
            formikProps: formikProps
          });
        } else {
          formikProps.form.setFieldValue(fieldPath, value);
        }
      };
      var uiProps = _omit__default["default"](ui, ["optimized"]);
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Radio, Object.assign({
        name: fieldPath,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        value: formik.getIn(formikProps.form.values, fieldPath, ""),
        checked: checked,
        onChange: handleChange,
        className: "invenio-radio-field"
      }, uiProps));
    };
    return _this;
  }
  _createClass(RadioField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        optimized = _this$props2.optimized,
        fieldPath = _this$props2.fieldPath;
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, {
        name: fieldPath,
        component: this.renderFormField
      });
    }
  }]);
  return RadioField;
}(React.Component);
RadioField.defaultProps = {
  checked: false,
  label: "",
  optimized: false,
  labelIcon: "",
  onChange: undefined,
  value: ""
};

var RichInputField = /*#__PURE__*/function (_Component) {
  _inherits(RichInputField, _Component);
  var _super = _createSuper(RichInputField);
  function RichInputField() {
    var _this;
    _classCallCheck(this, RichInputField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (formikBag) {
      var _this$props = _this.props,
        editorConfig = _this$props.editorConfig,
        fieldPath = _this$props.fieldPath,
        label = _this$props.label,
        required = _this$props.required,
        className = _this$props.className;
      var value = formik.getIn(formikBag.form.values, fieldPath, "");
      var initialValue = formik.getIn(formikBag.form.initialValues, fieldPath, "");
      var error = formik.getIn(formikBag.form.errors, fieldPath, false) ||
      // We check if initialValue changed to display the initialError,
      // otherwise it would be displayed despite updating the field
      initialValue === value && formik.getIn(formikBag.form.initialErrors, fieldPath, false);
      return /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Field, {
        id: fieldPath,
        required: required,
        error: error,
        className: className
      }, /*#__PURE__*/React__default["default"].isValidElement(label) ? label : /*#__PURE__*/React__default["default"].createElement("label", {
        htmlFor: fieldPath
      }, label), /*#__PURE__*/React__default["default"].createElement(CKEditor__default["default"], {
        editor: ClassicEditor__default["default"],
        config: editorConfig,
        data: value,
        onBlur: function onBlur(event, editor) {
          formikBag.form.setFieldValue(fieldPath, editor.getData());
          formikBag.form.setFieldTouched(fieldPath, true);
        }
      }), /*#__PURE__*/React__default["default"].createElement(ErrorLabel, {
        fieldPath: fieldPath
      }));
    };
    return _this;
  }
  _createClass(RichInputField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        optimized = _this$props2.optimized,
        fieldPath = _this$props2.fieldPath;
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, {
        id: fieldPath,
        name: fieldPath,
        component: this.renderFormField
      });
    }
  }]);
  return RichInputField;
}(React.Component);
RichInputField.defaultProps = {
  className: "invenio-rich-input-field",
  optimized: false,
  editorConfig: {},
  required: false,
  label: ""
};

var _excluded = ["onValue", "offValue", "onLabel", "offLabel", "fieldPath", "onChange"];
var ToggleField = /*#__PURE__*/function (_Component) {
  _inherits(ToggleField, _Component);
  var _super = _createSuper(ToggleField);
  function ToggleField() {
    var _this;
    _classCallCheck(this, ToggleField);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.renderFormField = function (formikProps) {
      /** Radio toggle Formik + Semantic-UI Field Component
       *
       * NOTE: renderFormField is run multiple times
       * TODO: might gain performance by extracting it out as own component and
       *       using class methods
       *
       * formikProps: current Formik props (ToggleField instance)
       */

      var _this$props = _this.props,
        onValue = _this$props.onValue,
        offValue = _this$props.offValue,
        onLabel = _this$props.onLabel,
        offLabel = _this$props.offLabel,
        fieldPath = _this$props.fieldPath,
        onChange = _this$props.onChange,
        uiProps = _objectWithoutProperties(_this$props, _excluded);
      var isChecked = formik.getIn(formikProps.form.values, fieldPath) === onValue;
      var handleChange = function handleChange() {
        if (isChecked) {
          formikProps.form.setFieldValue(fieldPath, offValue);
        } else {
          formikProps.form.setFieldValue(fieldPath, onValue);
        }
        if (onChange) {
          onChange({
            checked: !isChecked
          });
        }
      };
      return /*#__PURE__*/React__default["default"].createElement(RadioField, Object.assign({}, uiProps, {
        className: "invenio-toggle-field",
        toggle: true,
        fieldPath: fieldPath,
        checked: formik.getIn(formikProps.form.values, fieldPath) === onValue,
        label: formik.getIn(formikProps.form.values, fieldPath) === onValue ? onLabel : offLabel,
        onChange: handleChange
      }));
    };
    return _this;
  }
  _createClass(ToggleField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        optimized = _this$props2.optimized,
        fieldPath = _this$props2.fieldPath;
      var FormikField = optimized ? formik.FastField : formik.Field;
      return /*#__PURE__*/React__default["default"].createElement(FormikField, {
        name: fieldPath,
        component: this.renderFormField
      });
    }
  }]);
  return ToggleField;
}(React.Component);
ToggleField.defaultProps = {
  onChange: undefined,
  optimized: true
};

/** Import function to load widget either from a specific path or local widgets
 *
 * The user defined path to import widget is of the format `@templates/<templatePath>`.
 * Note that the `@template` alias should be a correctly resolving path and it's the
 * user of this function that has to ensure that. The value is hardcoded here as the
 * dynamic import cannot rely on purely a dynamic path i.e a variable.
 */
function importWidget(_x, _x2) {
  return _importWidget.apply(this, arguments);
}

/**
 * @param config: Configuration to load widgets
 *
 * Example configuration
 *
 * {
 *  fieldPathPrefix: "mynamespace" or empty,
 *  templateLoader: UIWidget => import(`my_folder/${UIWidget}.js`),
 *  fields: [{
 *    ui_widget: "MyWidget",
 *    field: "field_id",
 *    props: {
 *      label: "My label"
 *    }
 *  }]
 * }
 *
 * @returns array fields: resolved react components
 *
 * Example return
 *
 * [
 *  <Input fieldPath={'mynamespace.field_id'} label={label} />,
 *  ...
 * ]
 *
 */
function _importWidget() {
  _importWidget = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(templateLoader, _ref) {
    var UIWidget, fieldPath, props, component, _module$default, module, _module$default2, _module;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            UIWidget = _ref.ui_widget, fieldPath = _ref.fieldPath, props = _ref.props;
            component = null;
            _context.prev = 2;
            _context.next = 5;
            return templateLoader(UIWidget);
          case 5:
            module = _context.sent;
            component = (_module$default = module.default) !== null && _module$default !== void 0 ? _module$default : module[UIWidget];
            _context.next = 21;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            _context.prev = 11;
            _context.next = 14;
            return Promise.resolve().then(function () { return index; });
          case 14:
            _module = _context.sent;
            component = (_module$default2 = _module.default) !== null && _module$default2 !== void 0 ? _module$default2 : _module[UIWidget];
            _context.next = 21;
            break;
          case 18:
            _context.prev = 18;
            _context.t1 = _context["catch"](11);
            console.error("Failed to import default component ".concat(UIWidget, ".js"));
          case 21:
            if (!component) {
              _context.next = 23;
              break;
            }
            return _context.abrupt("return", /*#__PURE__*/React__default["default"].createElement(component, _objectSpread2(_objectSpread2({}, props), {}, {
              key: fieldPath,
              fieldPath: fieldPath
            })));
          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 9], [11, 18]]);
  }));
  return _importWidget.apply(this, arguments);
}
function loadWidgetsFromConfig(_x3) {
  return _loadWidgetsFromConfig.apply(this, arguments);
}
function _loadWidgetsFromConfig() {
  _loadWidgetsFromConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {
    var templateLoader, fieldPathPrefix, fields, importWidgetsFromFolder, _fields;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            templateLoader = _ref2.templateLoader, fieldPathPrefix = _ref2.fieldPathPrefix, fields = _ref2.fields;
            importWidgetsFromFolder = function importWidgetsFromFolder(templateFolder, fieldPathPrefix, fieldsConfig) {
              var tplPromises = [];
              fieldsConfig.forEach(function (fieldCfg) {
                tplPromises.push(importWidget(templateFolder, _objectSpread2(_objectSpread2({}, fieldCfg), {}, {
                  fieldPath: fieldPathPrefix ? "".concat(fieldPathPrefix, ".").concat(fieldCfg.field) : fieldCfg.field
                })));
              });
              return Promise.all(tplPromises);
            };
            _context2.next = 4;
            return importWidgetsFromFolder(templateLoader, fieldPathPrefix, fields);
          case 4:
            _fields = _context2.sent;
            return _context2.abrupt("return", _toConsumableArray(_fields));
          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadWidgetsFromConfig.apply(this, arguments);
}

var CustomFields = /*#__PURE__*/function (_Component) {
  _inherits(CustomFields, _Component);
  var _super = _createSuper(CustomFields);
  function CustomFields() {
    var _this;
    _classCallCheck(this, CustomFields);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      sections: []
    };
    return _this;
  }
  _createClass(CustomFields, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;
      var _this$props = this.props,
        includesPaths = _this$props.includesPaths,
        fieldPathPrefix = _this$props.fieldPathPrefix;
      // use of `Promise.then()` as eslint is giving an error when calling setState() directly
      // in the componentDidMount() method
      this.loadCustomFieldsWidgets().then(function (sections) {
        sections = sections.map(function (sectionCfg) {
          var paths = includesPaths(sectionCfg.fields, fieldPathPrefix);
          return _objectSpread2(_objectSpread2({}, sectionCfg), {}, {
            paths: paths
          });
        });
        _this2.setState({
          sections: sections
        });
      }).catch(function (error) {
        console.error("Couldn't load custom fields widgets.", error);
      });
    }
  }, {
    key: "loadCustomFieldsWidgets",
    value: function () {
      var _loadCustomFieldsWidgets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this$props2, config, fieldPathPrefix, templateLoader, sections, _iterator, _step, sectionCfg, fields;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props2 = this.props, config = _this$props2.config, fieldPathPrefix = _this$props2.fieldPathPrefix, templateLoader = _this$props2.templateLoader;
                sections = [];
                _iterator = _createForOfIteratorHelper(config);
                _context.prev = 3;
                _iterator.s();
              case 5:
                if ((_step = _iterator.n()).done) {
                  _context.next = 13;
                  break;
                }
                sectionCfg = _step.value;
                _context.next = 9;
                return loadWidgetsFromConfig({
                  templateLoader: templateLoader,
                  fieldPathPrefix: fieldPathPrefix,
                  fields: sectionCfg.fields
                });
              case 9:
                fields = _context.sent;
                sections.push(_objectSpread2(_objectSpread2({}, sectionCfg), {}, {
                  fields: fields
                }));
              case 11:
                _context.next = 5;
                break;
              case 13:
                _context.next = 18;
                break;
              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](3);
                _iterator.e(_context.t0);
              case 18:
                _context.prev = 18;
                _iterator.f();
                return _context.finish(18);
              case 21:
                return _context.abrupt("return", sections);
              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 15, 18, 21]]);
      }));
      function loadCustomFieldsWidgets() {
        return _loadCustomFieldsWidgets.apply(this, arguments);
      }
      return loadCustomFieldsWidgets;
    }()
  }, {
    key: "render",
    value: function render() {
      var sections = this.state.sections;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, sections.map(function (_ref) {
        var section = _ref.section,
          fields = _ref.fields,
          paths = _ref.paths;
        return /*#__PURE__*/React__default["default"].createElement(AccordionField, {
          key: section,
          includesPaths: paths,
          label: section,
          active: true
        }, fields);
      }));
    }
  }]);
  return CustomFields;
}(React.Component);
CustomFields.defaultProps = {
  includesPaths: function includesPaths(fields) {
    return fields.map(function (field) {
      return field.key;
    });
  }
};

var AutocompleteDropdown = /*#__PURE__*/function (_Component) {
  _inherits(AutocompleteDropdown, _Component);
  var _super = _createSuper(AutocompleteDropdown);
  function AutocompleteDropdown() {
    _classCallCheck(this, AutocompleteDropdown);
    return _super.apply(this, arguments);
  }
  _createClass(AutocompleteDropdown, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        description = _this$props.description,
        fieldPath = _this$props.fieldPath,
        required = _this$props.required,
        label = _this$props.label,
        icon = _this$props.icon,
        clearable = _this$props.clearable,
        placeholder = _this$props.placeholder,
        multiple = _this$props.multiple,
        autocompleteFrom = _this$props.autocompleteFrom,
        autocompleteFromAcceptHeader = _this$props.autocompleteFromAcceptHeader;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: icon,
        label: label
      }), /*#__PURE__*/React__default["default"].createElement(formik.Field, {
        name: fieldPath
      }, function (_ref) {
        var values = _ref.form.values;
        return /*#__PURE__*/React__default["default"].createElement(RemoteSelectField, {
          clearable: clearable,
          required: required,
          fieldPath: fieldPath,
          multiple: multiple,
          noQueryMessage: placeholder,
          placeholder: placeholder,
          suggestionAPIUrl: autocompleteFrom,
          suggestionAPIHeaders: {
            Accept: autocompleteFromAcceptHeader
          },
          serializeSuggestions: function serializeSuggestions(suggestions) {
            return _isArray__default["default"](suggestions) ? suggestions.map(function (item) {
              return {
                text: item.title_l10n,
                value: item.id,
                key: item.id
              };
            }) : [{
              text: suggestions.title_l10n,
              value: suggestions.id,
              key: suggestions.id
            }];
          },
          initialSuggestions: _get__default["default"](values, "ui.".concat(fieldPath), [])
        });
      }), description && /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, description));
    }
  }]);
  return AutocompleteDropdown;
}(React.Component);
AutocompleteDropdown.defaultProps = {
  icon: undefined,
  autocompleteFromAcceptHeader: "application/vnd.inveniordm.v1+json",
  clearable: false,
  multiple: false,
  required: false
};

var Dropdown = /*#__PURE__*/function (_Component) {
  _inherits(Dropdown, _Component);
  var _super = _createSuper(Dropdown);
  function Dropdown() {
    var _this;
    _classCallCheck(this, Dropdown);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.serializeOptions = function (options) {
      return options === null || options === void 0 ? void 0 : options.map(function (option) {
        return {
          text: option.title_l10n,
          value: option.id,
          key: option.id
        };
      });
    };
    return _this;
  }
  _createClass(Dropdown, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        description = _this$props.description,
        placeholder = _this$props.placeholder,
        fieldPath = _this$props.fieldPath,
        label = _this$props.label,
        icon = _this$props.icon,
        options = _this$props.options,
        search = _this$props.search,
        multiple = _this$props.multiple,
        clearable = _this$props.clearable,
        required = _this$props.required;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(SelectField, {
        fieldPath: fieldPath,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: icon,
          label: label
        }),
        options: this.serializeOptions(options),
        search: search,
        multiple: multiple,
        placeholder: placeholder,
        clearable: clearable,
        required: required,
        optimized: true,
        defaultValue: multiple ? [] : ""
      }), description && /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, description));
    }
  }]);
  return Dropdown;
}(React.Component);
Dropdown.defaultProps = {
  icon: undefined,
  search: false,
  multiple: false,
  clearable: true,
  required: false
};

var RichInput = /*#__PURE__*/function (_Component) {
  _inherits(RichInput, _Component);
  var _super = _createSuper(RichInput);
  function RichInput() {
    _classCallCheck(this, RichInput);
    return _super.apply(this, arguments);
  }
  _createClass(RichInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fieldPath = _this$props.fieldPath,
        required = _this$props.required,
        label = _this$props.label,
        icon = _this$props.icon,
        description = _this$props.description,
        editorConfig = _this$props.editorConfig;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(RichInputField, {
        key: fieldPath,
        fieldPath: fieldPath,
        required: required,
        editorConfig: editorConfig,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: icon,
          label: label
        })
      }), description && /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, description));
    }
  }]);
  return RichInput;
}(React.Component);
RichInput.defaultProps = {
  icon: undefined,
  editorConfig: {},
  required: false
};

var TextArea = /*#__PURE__*/function (_Component) {
  _inherits(TextArea, _Component);
  var _super = _createSuper(TextArea);
  function TextArea() {
    _classCallCheck(this, TextArea);
    return _super.apply(this, arguments);
  }
  _createClass(TextArea, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fieldPath = _this$props.fieldPath,
        required = _this$props.required,
        label = _this$props.label,
        icon = _this$props.icon,
        description = _this$props.description,
        rows = _this$props.rows;
      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(TextAreaField, {
        key: fieldPath,
        fieldPath: fieldPath,
        required: required,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: icon,
          label: label
        }),
        rows: rows
      }), description && /*#__PURE__*/React__default["default"].createElement("label", {
        className: "helptext"
      }, description));
    }
  }]);
  return TextArea;
}(React.Component);
TextArea.defaultProps = {
  icon: undefined,
  required: false,
  rows: 3
};

var Input = /*#__PURE__*/function (_Component) {
  _inherits(Input, _Component);
  var _super = _createSuper(Input);
  function Input() {
    _classCallCheck(this, Input);
    return _super.apply(this, arguments);
  }
  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fieldPath = _this$props.fieldPath,
        required = _this$props.required,
        label = _this$props.label,
        icon = _this$props.icon,
        placeholder = _this$props.placeholder,
        description = _this$props.description,
        disabled = _this$props.disabled,
        type = _this$props.type;
      return /*#__PURE__*/React__default["default"].createElement(TextField, {
        key: fieldPath,
        fieldPath: fieldPath,
        required: required,
        helpText: description,
        disabled: disabled,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: icon,
          label: label
        }),
        placeholder: placeholder,
        type: type
      });
    }
  }]);
  return Input;
}(React.Component);
Input.defaultProps = {
  icon: undefined,
  required: false,
  disabled: false,
  type: "input"
};

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function MultiInput(_ref) {
  var additionLabel = _ref.additionLabel,
    description = _ref.description,
    placeholder = _ref.placeholder,
    fieldPath = _ref.fieldPath,
    label = _ref.label,
    icon = _ref.icon,
    required = _ref.required;
  var _useState = React.useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    options = _useState2[0],
    setOptions = _useState2[1];
  var _useFormikContext = formik.useFormikContext(),
    values = _useFormikContext.values;
  var serializeValues = function serializeValues(values) {
    return values === null || values === void 0 ? void 0 : values.map(function (item) {
      return {
        text: item,
        key: item,
        value: item
      };
    });
  };
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(SelectField, {
    fieldPath: fieldPath,
    label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
      htmlFor: fieldPath,
      icon: icon,
      label: label
    }),
    options: serializeValues(formik.getIn(values, fieldPath, [])),
    placeholder: placeholder,
    required: required,
    search: true,
    multiple: true,
    clearable: true,
    optimized: true,
    defaultValue: [],
    noResultsMessage: placeholder // show the placeholder to instruct user how to add new values
    ,
    additionLabel: additionLabel,
    onChange: function onChange(_ref2) {
      var data = _ref2.data,
        formikProps = _ref2.formikProps;
      setOptions(serializeValues(data.value));
      formikProps.form.setFieldValue(fieldPath, data.value);
    },
    allowAdditions: true,
    onAddItem: function onAddItem(_ref3) {
      var data = _ref3.data;
      setOptions([{
        text: data.value,
        value: data.value
      }].concat(_toConsumableArray(options)));
    }
  }), description && /*#__PURE__*/React__default["default"].createElement("label", {
    className: "helptext"
  }, description));
}
MultiInput.defaultProps = {
  additionLabel: undefined,
  icon: undefined,
  required: false
};

var NumberInput = function NumberInput(props) {
  return /*#__PURE__*/React__default["default"].createElement(Input, Object.assign({}, props, {
    type: "number"
  }));
};

function BooleanCheckbox(_ref) {
  var description = _ref.description,
    icon = _ref.icon,
    falseLabel = _ref.falseLabel,
    fieldPath = _ref.fieldPath,
    label = _ref.label,
    trueLabel = _ref.trueLabel,
    required = _ref.required;
  var _useField = formik.useField(fieldPath),
    _useField2 = _slicedToArray(_useField, 2);
    _useField2[0];
    var meta = _useField2[1];
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Group, {
    inline: true,
    className: "mb-0"
  }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Field, {
    required: required
  }, /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
    htmlFor: fieldPath,
    icon: icon,
    label: label
  })), /*#__PURE__*/React__default["default"].createElement(RadioField, {
    fieldPath: fieldPath,
    label: trueLabel,
    checked: meta.value === true,
    value: true,
    optimized: true
  }), /*#__PURE__*/React__default["default"].createElement(RadioField, {
    fieldPath: fieldPath,
    label: falseLabel,
    checked: meta.value === false,
    value: false,
    optimized: true
  }), meta.error && /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Form.Field, {
    required: required,
    className: "error"
  }, /*#__PURE__*/React__default["default"].createElement(semanticUiReact.Label, {
    pointing: "left",
    prompt: true
  }, meta.error))), description && /*#__PURE__*/React__default["default"].createElement("label", {
    className: "helptext"
  }, description));
}
BooleanCheckbox.defaultProps = {
  icon: undefined,
  required: false
};

var Array$1 = /*#__PURE__*/function (_Component) {
  _inherits(Array, _Component);
  var _super = _createSuper(Array);
  function Array() {
    _classCallCheck(this, Array);
    return _super.apply(this, arguments);
  }
  _createClass(Array, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        fieldPath = _this$props.fieldPath,
        required = _this$props.required,
        label = _this$props.label,
        icon = _this$props.icon,
        description = _this$props.description,
        disabled = _this$props.disabled,
        children = _this$props.children,
        addButtonLabel = _this$props.addButtonLabel,
        defaultNewValue = _this$props.defaultNewValue,
        className = _this$props.className;
      return /*#__PURE__*/React__default["default"].createElement(ArrayField, {
        key: fieldPath,
        fieldPath: fieldPath,
        required: required,
        helpText: description,
        disabled: disabled,
        label: /*#__PURE__*/React__default["default"].createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: icon,
          label: label
        }),
        addButtonLabel: addButtonLabel,
        defaultNewValue: defaultNewValue,
        className: className
      }, children);
    }
  }]);
  return Array;
}(React.Component);
Array$1.defaultProps = {
  icon: undefined,
  required: false,
  disabled: false,
  className: ""
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CustomFields: CustomFields,
  importWidget: importWidget,
  loadWidgetsFromConfig: loadWidgetsFromConfig,
  AutocompleteDropdown: AutocompleteDropdown,
  Dropdown: Dropdown,
  RichInput: RichInput,
  TextArea: TextArea,
  Input: Input,
  MultiInput: MultiInput,
  NumberInput: NumberInput,
  BooleanCheckbox: BooleanCheckbox,
  Array: Array$1
});

// This file is part of React-Invenio-Forms
var baseAxiosConfiguration = {
  withCredentials: true,
  xsrfCookieName: "csrftoken",
  xsrfHeaderName: "X-CSRFToken",
  headers: {
    "Accept": "application/json",
    "Content-Type": "application/json"
  }
};
var http = axios__default["default"].create(baseAxiosConfiguration);

exports.AccordionField = AccordionField;
exports.Array = Array$1;
exports.ArrayField = ArrayField;
exports.AutocompleteDropdown = AutocompleteDropdown;
exports.BaseForm = BaseForm;
exports.BooleanCheckbox = BooleanCheckbox;
exports.BooleanField = BooleanField;
exports.CustomFields = CustomFields;
exports.Dropdown = Dropdown;
exports.ErrorLabel = ErrorLabel;
exports.ErrorMessage = ErrorMessage;
exports.FieldLabel = FieldLabel;
exports.GridResponsiveSidebarColumn = GridResponsiveSidebarColumn;
exports.GroupField = GroupField;
exports.Image = Image;
exports.Input = Input;
exports.MultiInput = MultiInput;
exports.NumberInput = NumberInput;
exports.RadioField = RadioField;
exports.RemoteSelectField = RemoteSelectField;
exports.RichInput = RichInput;
exports.RichInputField = RichInputField;
exports.SelectField = SelectField;
exports.TextArea = TextArea;
exports.TextAreaField = TextAreaField;
exports.TextField = TextField;
exports.ToggleField = ToggleField;
exports.http = http;
exports.importWidget = importWidget;
exports.loadWidgetsFromConfig = loadWidgetsFromConfig;
exports.withCancel = withCancel;
//# sourceMappingURL=index.js.map
