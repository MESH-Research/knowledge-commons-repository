Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const OverridableContext = React__default.createContext({});
/**
 * Function to wrap a React component and override default props.
 * @param Component the component to wrap
 * @param extraProps the new props that will override or will be added to the wrapped component
 * @returns the wrapper component
 */

function parametrize(Component, extraProps) {
  const ParametrizedComponent = props => {
    // handle deferred prop calculation
    if (typeof extraProps === 'function') {
      extraProps = extraProps(props);
    } // Store the original component in an attribute


    if (Component.originalComponent) {
      Component = Component.originalComponent;
    } // overrideProps override props if there is a name collision


    const _props$extraProps = _objectSpread(_objectSpread({}, props), extraProps),
          children = _props$extraProps.children,
          attrProps = _objectWithoutProperties(_props$extraProps, ["children"]);

    return React__default.createElement(Component, attrProps, children);
  };

  const name = Component.displayName || Component.name;
  ParametrizedComponent.displayName = "Parametrized(".concat(name, ")");
  return ParametrizedComponent;
}
/**
 * React component to enable overriding children when rendering.
 */

function Overridable(_ref) {
  let id = _ref.id,
      children = _ref.children,
      restProps = _objectWithoutProperties(_ref, ["id", "children"]);

  const overriddenComponents = React.useContext(OverridableContext);
  const child = children ? React__default.Children.only(children) : null;
  const childProps = child ? child.props : {};

  if (id in overriddenComponents) {
    // If there's an override, we replace the component's content with the override + props
    const Overridden = overriddenComponents[id];
    return React__default.createElement(Overridden, _objectSpread(_objectSpread({}, childProps), restProps));
  } else if (child) {
    // No override? Clone the Overridable component's original children
    return React__default.cloneElement(child, childProps);
  } else {
    return null;
  }
}

Overridable.propTypes = {
  /** The children of the component */
  children: PropTypes.node,

  /** The id that the component will be bound to (normally component's name) */
  id: PropTypes.string
};
Overridable.defaultProps = {
  id: null,
  children: null
};
/**
 * High-order component to override an existing React component and provide a new component instead.
 */

Overridable.component = (id, Component) => {
  const Overridden = (_ref2) => {
    let children = _ref2.children,
        props = _objectWithoutProperties(_ref2, ["children"]);

    const overriddenComponents = React.useContext(OverridableContext);
    const overriddenComponent = overriddenComponents[id];
    return React__default.createElement(overriddenComponent || Component, props, children);
  };

  Overridden.propTypes = {
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
  };
  Overridden.defaultProps = {
    children: null
  };
  const name = Component.displayName || Component.name;
  Overridden.displayName = "Overridable(".concat(name, ")");
  Overridden.originalComponent = Component;
  return Overridden;
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Simple utility class responsible of keeping track of all overridden components.
 * @constructor object containing the initial map `id: Component` of overridden components
 */
class OverriddenComponentRepository {
  constructor(overriddenComponents) {
    _defineProperty(this, "add", (id, Component) => {
      this.components[id] = Component;
    });

    _defineProperty(this, "get", id => {
      return this.components[id];
    });

    _defineProperty(this, "getAll", () => {
      return _objectSpread$1({}, this.components);
    });

    _defineProperty(this, "clear", () => {
      this.components = {};
    });

    this.components = overriddenComponents || {};
  }

}
const overrideStore = new OverriddenComponentRepository();

exports.OverridableContext = OverridableContext;
exports.OverriddenComponentRepository = OverriddenComponentRepository;
exports.default = Overridable;
exports.overrideStore = overrideStore;
exports.parametrize = parametrize;
//# sourceMappingURL=index.js.map
