import React, { Component, useContext, createRef, useState } from 'react';
import i18n from 'i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import { Trans as Trans$1, I18nextProvider } from 'react-i18next';
import { connect as connect$1, Provider } from 'react-redux';
import { Field as Field$1, FastField, getIn, Formik, FieldArray, connect as connect$2, useFormikContext } from 'formik';
import { TextField, FieldLabel, TextAreaField, RemoteSelectField, ArrayField, GroupField, SelectField, Image, RadioField, RichInputField, http, ErrorLabel, BaseForm } from 'react-invenio-forms';
import { Button, Card, Checkbox, List, Icon, Divider, Message, Form, Header, Segment, Item, Label, Grid, Menu, Modal, Container, Ref, Popup, Table, Progress as Progress$w, Radio, Dropdown } from 'semantic-ui-react';
import Overridable, { OverridableContext } from 'react-overridable';
import _isEmpty from 'lodash/isEmpty';
import { DateTime } from 'luxon';
import { InvenioSearchApi, ReactSearchKit, SearchBar, ResultsLoader, EmptyResults, Error as Error$1, ResultsList, Pagination, withState, Toggle } from 'react-searchkit';
import _truncate from 'lodash/truncate';
import _capitalize from 'lodash/capitalize';
import _get from 'lodash/get';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { useDrag, useDrop, DndProvider } from 'react-dnd';
import * as Yup from 'yup';
import _find from 'lodash/find';
import _map from 'lodash/map';
import _unickBy from 'lodash/unionBy';
import _matches from 'lodash/matches';
import _filter from 'lodash/filter';
import _isEqual from 'lodash/isEqual';
import _has from 'lodash/has';
import _omit from 'lodash/omit';
import Dropzone from 'react-dropzone';
import _isNumber from 'lodash/isNumber';
import _isObject from 'lodash/isObject';
import _debounce from 'lodash/debounce';
import axios from 'axios';
import _join from 'lodash/join';
import _cloneDeep from 'lodash/cloneDeep';
import _defaults from 'lodash/defaults';
import _isArray from 'lodash/isArray';
import _isBoolean from 'lodash/isBoolean';
import _isNull from 'lodash/isNull';
import _mapValues from 'lodash/mapValues';
import _pick from 'lodash/pick';
import _pickBy from 'lodash/pickBy';
import _set from 'lodash/set';
import { combineReducers, createStore, applyMiddleware, compose } from 'redux';
import thunk from 'redux-thunk';

var Public$v = "";
var Restricted$v = "";
var Reason$v = "";
var Options$v = "";
var Type$v = "";
var Language$v = "";
var Affiliations$v = "";
var Edit$v = "";
var Remove$v = "";
var Added$v = "";
var Person$v = "";
var Organization$v = "";
var Name$v = "";
var Role$v = "";
var Cancel$v = "";
var Save$v = "";
var Description$v = "";
var Dates$v = "";
var Preview$v = "";
var Filename$v = "";
var Size$v = "";
var Progress$v = "";
var Pending$v = "";
var or$v = "";
var Files$v = "";
var Title$v = "";
var Creators$v = "";
var Contributors$v = "";
var Licenses$v = "";
var Languages$v = "";
var Version$v = "";
var Publisher$v = "";
var Identifier$v = "";
var Scheme$v = "";
var Recommended$v = "";
var All$v = "";
var Data$v = "";
var Software$v = "";
var Link$v = "";
var Relation$v = "";
var Subjects$v = "";
var Yes$v = "";
var No$v = "";
var DOI$v = "";
var Search$v = "";
var Publish$v = "";
var Declined$v = "";
var Expired$v = "";
var Published$v = "";
var Draft$v = "";
var Selected$v = "";
var Select$v = "";
var Change$v = "";
var Funder$v = "";
var URL$v = "";
var optional$v = "";
var Format$v = "";
var Identifiers$v = "";
var TRANSLATE_AF = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$v,
	Restricted: Restricted$v,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$v,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$v,
	"Add description": "",
	"Additional Description": "",
	Type: Type$v,
	Language: Language$v,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$v,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$v,
	Remove: Remove$v,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$v,
	Person: Person$v,
	Organization: Organization$v,
	"Family name": "",
	Name: Name$v,
	"Organization name": "",
	Role: Role$v,
	"Select role": "",
	Cancel: Cancel$v,
	Save: Save$v,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$v,
	Dates: Dates$v,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$v,
	Filename: Filename$v,
	Size: Size$v,
	Progress: Progress$v,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$v,
	or: or$v,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$v,
	"Resource type": "",
	Title: Title$v,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$v,
	Contributors: Contributors$v,
	"Additional descriptions": "",
	Licenses: Licenses$v,
	Languages: Languages$v,
	Version: Version$v,
	Publisher: Publisher$v,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$v,
	Scheme: Scheme$v,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$v,
	All: All$v,
	Data: Data$v,
	Software: Software$v,
	"License title": "",
	Link: Link$v,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$v,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$v,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$v,
	No: No$v,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$v,
	Search: Search$v,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$v,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$v,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$v,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$v,
	"Your upload is published.": "",
	Draft: Draft$v,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$v,
	Select: Select$v,
	"Select ": "",
	Change: Change$v,
	"Search for a funder by name": "",
	Funder: Funder$v,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$v,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$v,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$v,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$v,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$u = "عام";
var Restricted$u = "مقيدة";
var Reason$u = "السّبب";
var Options$u = "إختيارات";
var Type$u = "نوع";
var Language$u = "اللّغة";
var Affiliations$u = "الانتماءات";
var Edit$u = "تعديل";
var Remove$u = "حذف";
var Added$u = "أضيف";
var Person$u = "شخص";
var Organization$u = "منظمة";
var Name$u = "اسم";
var Role$u = "دور";
var Cancel$u = "إلغاء";
var Save$u = "حفظ";
var Description$u = "وصف";
var Dates$u = "تواريخ";
var Preview$u = "معاينة";
var Filename$u = "إسم الملفّ";
var Size$u = "الحجم";
var Progress$u = "سير التقدم";
var Pending$u = "قيد الإنتظار";
var or$u = "أو";
var Files$u = "الملفات";
var Title$u = "العنوان";
var Creators$u = "المنتجين";
var Contributors$u = "المساهمون";
var Licenses$u = "تراخيص";
var Languages$u = "اللغات";
var Version$u = "نسخة";
var Publisher$u = "النّاشر";
var Identifier$u = "المعرف";
var Scheme$u = "هيكل";
var Recommended$u = "مستحسن";
var All$u = "الكلّ";
var Data$u = "بيانات";
var Software$u = "برمجيّة";
var Link$u = "رابط";
var Relation$u = "علاقة";
var Subjects$u = "المواضيع";
var Yes$u = "نعم";
var No$u = "رقم";
var DOI$u = "المعرف الوحيد للأشياء DOI";
var Search$u = "بحث";
var Publish$u = "نشر";
var Declined$u = "مرفوضة";
var Expired$u = "منتهي الصلاحية";
var Published$u = "نشرت";
var Draft$u = "مسودة";
var Selected$u = "مُختارة";
var Select$u = "إختر";
var Change$u = "غير";
var Funder$u = "ممول";
var URL$u = "عنوان ويب URL";
var optional$u = "اختياري";
var Format$u = "صيغة";
var Identifiers$u = "معرّفات";
var TRANSLATE_AR = {
	"Embargo until": "محظور حتى",
	"YYYY-MM-DD": "YYYY-MM-DD",
	"The full record is restricted.": "السجل الكامل مقيد.",
	"Embargoed (full record)": "محظور (سجل كامل)",
	"Embargoed (files-only)": "محظور (فقط الملفات)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "التّسجيلة متاحة للعموم. بـ <bold>{{تاريخ}}</bold> سيقع إتاحة الملفّات آليا للعموم. إلى ذلك الحين، يمكن الولوج للملفّات <bold>حصريّا</bold> من طرف <bold>مستخدمين محدّدين</bold> المتمتّعين بإذن.",
	"The record has no files.": "التّسجيلة لا تحتوي على ملفات.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "بـ <bold>{{تاريخ}}</bold> سيقع إتاحة التّسجيلة آليّا للعموم. إلى ذلك الحين، يمكن الولوج للتّسجيلة <bold>حصريّا</bold> من طرف <bold>مستخدمين محدّدين</bold>المتمتّعين بإذن.",
	Public: Public$u,
	Restricted: Restricted$u,
	"The record and files are publicly accessible.": "السجل و الملفات متاحة للعموم.",
	"The record is publicly accessible.": "السجل متاح  للعموم.",
	"Public with restricted files": "عام مع ملفات مقيدة",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "التّسجيلة متاحة <1>حصريّا</1> لـ<3>مستخدميين محدّدين</3> المتمتّعين بإذن.",
	"Full record": "سجل كامل",
	"Files only": "فقط ملفات",
	"Apply an embargo": "تطبيق حظر",
	"Embargo reason": "اسباب الحظر",
	"Optionally, describe the reason for the embargo.": "إختياري. حدّد سبب الحظر.",
	"Embargo was lifted on {{fmtDate}}.": "تمّ رفع الحظر في {{fmtDate}}.",
	Reason: Reason$u,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "حماية التّسجيلة أو الملفات يجب أن تكون <1>مقيّدة</1> لتطبيق الحظر.",
	Options: Options$u,
	"Add description": "أضف وصفا",
	"Additional Description": "وصف إضافيّ",
	Type: Type$u,
	Language: Language$u,
	"Select language": "إختر لغة",
	"Add titles": "أضف عناوين",
	"Search or create affiliation'": "إبحث أو أضف مؤسّسة الإنتماء",
	Affiliations: Affiliations$u,
	"Search for affiliations..": "إبحث عن مؤسّسات الإنتماء..",
	"Add creator": "أضف منشئ",
	Edit: Edit$u,
	Remove: Remove$u,
	"Name identifiers": "إسم المعرّفات",
	"e.g. ORCID, ISNI or GND.": "كـ .  ORCID، ISNI أو GND.",
	"Type the value of an identifier...": "أدخل قيمة المعرف ...",
	"Save and add another": "إحفظ و أضف آخر",
	"Family name is a required field.": "حقل اللّقب وجوبي.",
	"Name is a required field.": "حقل الإسم وجوبي.",
	"Role is a required field.": "حقل الدّور وجوبي.",
	Added: Added$u,
	Person: Person$u,
	Organization: Organization$u,
	"Family name": "اللّقب",
	Name: Name$u,
	"Organization name": "إسم المنظّمة",
	Role: Role$u,
	"Select role": "إختر دورا",
	Cancel: Cancel$u,
	Save: Save$u,
	"Add date": "أضف تاريخا",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "الصّيغة: تاريخ أو تاريخ/تاريخ حيث يكون تاريخ إمّا سنة YYYY أو سنة-شهر YYYY-MM أو سنة-شهر-يوم YYYY-MM-DD",
	"Date": "التاريخ",
	Description: Description$u,
	Dates: Dates$u,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD",
	"discard changes": "تجاهل التّغييرات",
	"discard version": "تجاهل الإصدار",
	"delete": "حذف",
	"Are you sure you want to discard the changes to this draft?": "هل انت متأكد من تجاهل التّغييرات على هذه المسودّة ؟",
	"Are you sure you want to delete this new version?": "هل انت متأكد من حذفك لهذا الإصدار ؟",
	"Are you sure you want to delete this draft?": "هل أنت متأكد من حذفك لهذه المسودّة ؟",
	"New version": "إصدار جديد",
	"New upload": "إيداع جديد",
	"Edit upload": "تعديل الإيداع",
	"Uploading the selected files would result in": "تحميل الملفات المختارة سيؤدي إلى",
	"but the limit is": "لكن الحدود هي",
	"You can import files from the previous version.": "يمكنك إستيراد الملفات من الإصدار السّابق.",
	"File addition, removal or modification are not allowed after you have published your upload.": "إضاف ملف، إزالته أو تغييره غير ممكن بعد نشر التّحميل.",
	"You must create a new version to add, modify or delete files.": "يجب عليك إحداث إصدار جديد كي تضيف ملفّات، تغييرها أو تزيلها.",
	"Upload files": "تحميل الملفّات",
	"Import files": "إستيراد الملفّات",
	Preview: Preview$u,
	Filename: Filename$u,
	Size: Size$u,
	Progress: Progress$u,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "هذه هي بصمة الملف (المجموع الاختباري MD5) ، والتي يمكن استخدامها للتّحقّق من كموليّة الملف.",
	Pending: Pending$u,
	or: or$u,
	"Metadata-only record": "تسجيلة بيانات فقط",
	"Storage available": "التّخزين متوفّر",
	"{{length}} out of {{maxfiles}} files": "{{length}} من إجمالي {{maxfiles}} من الملفات",
	"out of": "بعيدا عن",
	Files: Files$u,
	"Resource type": "نوع المورد",
	Title: Title$u,
	"Additional titles": "عناوين إضافيّة",
	"Publication date": "تاريخ النشر",
	Creators: Creators$u,
	Contributors: Contributors$u,
	"Additional descriptions": "أوصاف إضافيّة",
	Licenses: Licenses$u,
	Languages: Languages$u,
	Version: Version$u,
	Publisher: Publisher$u,
	"Related works": "أعمال ذات علاقة",
	"Alternate identifiers": "معرفات بديلة",
	"Record successfully saved.": "نجح حفظ التسجيلة.",
	"Record saved with validation errors:": "حفظت التسجيلة مع خطء في التحقّق من السّلامة:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": " شيء ما حدث بشكل خاطئ! لم يتم حفظ المسودة. حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "شيء ما حدث بشكل خاطئ! لم يتم نشر المسودة. حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "شيء ما حدث بشكل خاطئ! لم يتم تحويل المسودة للمراجعة و التقييم. حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": " شيء ما حدث بشكل خاطئ! لم يتم حذف المسودة. حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": " شيء ما حدث بشكل خاطئ! لا يمكن معاينة المسودة. حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": " شيء ما حدث بشكل خاطئ! لم يتم حجزالمعرف . حاول مرة اخرى. إذا استمرت المشكلة ، اتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": " شيء ما حدث بشكل خاطئ! لم يتم تجاهل المعرف. حاول مرة اخرى. إذا استمرت المشكلة ، إتصل بخدمة دعم المستخدم.",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "حدث خطء ما! لا يمكن خفظ المسودّة قيل تحميل الملف. حاول مرّة أخرى. إن استمرت المشكلة،إتّصل بخدمة دعم المستخدم.",
	"Add award": "أضف مكافئة",
	"Add identifier": "أضف معرّف",
	Identifier: Identifier$u,
	Scheme: Scheme$u,
	"Search for languages...": "بحث عن اللّغات...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "بحث عن لّغة بالتّسمية ( \"eng\", \"fr\", \"Polish\" )",
	"Add standard": "أضف معيارا",
	"Add custom": "إضافة  خاصة",
	"Read more": "إقراء المزيد",
	"Title is a required field.": "حقل العنوان وجوبي.",
	"Link must be a valid URL": "يجب أن يكون رابط URL ساري المفعول",
	Recommended: Recommended$u,
	All: All$u,
	Data: Data$u,
	Software: Software$u,
	"License title": "عنوان التّرخيص",
	Link: Link$u,
	"License link": "رابط التّرخيص",
	"Add license": "أضف ترخيصا",
	"Change license": "غيّر التّرخيص",
	"You don't have permissions to create a new version.": "ليس لك صلوحيّات إنشاء إصدار جديد.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "في حالة نشر التحميل الخاص بك في مكان آخر سلفا، يرجى استخدام تاريخ النشر الأول بهذا الشّكل: YYYY-MM-DD أو YYYY-MM أو YYYY. للفترات الزمنية ، استخدم DATE / DATE ، على سبيل المثال 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "YYYY-MM-DD أو YYYY-MM-DD/YYYY-MM-DD للفواصل الزمنية. MM و DD اختيارية.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "يتم إعتماد الناشر لصياغة الإستشهاد، لذا خذ بعين الإعتبار أهمية الدور.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "حدّد معرّفات الأعمال المرتبطة. المعرّفات المعتمدة تشمل DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs. ",
	"Add related work": "أضف الأعمال ذات العلاقة",
	Relation: Relation$u,
	"Select relation...": "أختر علاقة...",
	"Save draft": "حفظ مسودة",
	"Suggest from": "إقتراح من طرف",
	Subjects: Subjects$u,
	"Search for a subject by name": "بحث عن موضوع عبر الإسم",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "غالبًا ما يكون ملائمًا للبرامجبات ومجموعات البيانات. يُفضل استخدام نسخة دلالية . يرجى مراجعة موقع<1> semver.org</1> ، ولكن يتم قبول أي كلمة كنسخة إصدار.",
	"Do you already have a {{pidLabel}} for this upload?": "هل لديك مسبقا {{pidLabel}} لهذا التحميل؟",
	Yes: Yes$u,
	No: No$u,
	"e.g. ROR, ISNI or GND.": "مثلا ROR ،ISNI أو GND.",
	"The following files already exist": "الملفات التالية موجودة ",
	"Disable files for this record": "تعطيل الملفات لهذا السجل",
	DOI: DOI$u,
	Search: Search$u,
	"Search or create subjects...": "بحث أو إنشاء مواضيع ...",
	"Edit creator": "تعديل منشئ",
	"Add {{mode}} license": "أضف {{mode}} رخصة",
	"Change {{mode}} license": "تغيير {{mode}} رخصة",
	"My communities": "مجتمعي",
	"Search in all communities": "البحث في كل المجتمعات",
	"Search in my communities": "البحث في مجتمعي",
	"Search for persons by name, identifier, or affiliation...": "ابحث عن الأشخاص بالاسم أو بالمعرف أو بالانتماء ...",
	"Select a community": "أختر مجموعة",
	"Submit review": "إيداع تقييم",
	Publish: Publish$u,
	"Are you sure you want to publish this record?": "هل انت متأكد من نشر هذا السجل؟",
	"The draft was not published. Record saved with validation errors:": "لم يتم نشر المسودة. تم حفظ السجل مع وجود أخطاء :",
	"The draft was not submitted for review. Record saved with validation errors:": "لم يتم تقديم المسودة للمراجعة. تم حفظ السجل مع وجود أخطاء :",
	"In review": "بصدد التثبت",
	"Community curators will review your upload. Once accepted, it will be published.": "سيراجع المتصرفون على المجتمع إيداعك. سيتم نشره إذا تم قبوله.",
	Declined: Declined$u,
	"The request to submit this upload to the community was declined.": "تم رفض طلب إرسال هذا التحميل إلى المجتمع.",
	Expired: Expired$u,
	"The request to submit this upload to the community has expired.": "تخطى طلب إرسال هذا التحميل إلى المجتمع اجله.",
	Published: Published$u,
	"Your upload is published.": "تمّ نشر التّحميل.",
	Draft: Draft$u,
	"Once your upload is complete, you can submit it for review to the community curators.": "بمجرد اكتمال التحميل ، يمكنك إرساله للمراجعة من طرف المتصرفين على المجتمع.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "بمجرد اكتمال التحميل ، يمكنك نشره أو إرساله للمراجعة من طرف المتصرفين على المجتمع.",
	"New version draft": "نسخة مسودة جديدة",
	"Once your upload is complete, you can publish it.": "مغ إنتهاء التّحميل، يمكنك النّشر.",
	"View request": "الأطلاع على الطلب",
	"Submitted for review": "تم تقديمه للمراجعة",
	"Change community": "تغيير المجتمع",
	"Publish without community": "نشر بدون مجتمع",
	"Select the community where you want to submit your record.": "أختر المجتمع الذي تريد نشر تسجيلك ضمنه.",
	"View community": "الإطلاع على المجتمع",
	"Opens in new tab": "فتح في تبويبة جديدة",
	Selected: Selected$u,
	Select: Select$u,
	"Select ": "إختر",
	Change: Change$u,
	"Search for a funder by name": "البحث على ممول عبرالأسم",
	Funder: Funder$u,
	"Search for funder...": "البحث عن ممول...",
	"Award information": "معلومات عن الجائزة",
	"Number": "رقم",
	"Award number": "رقم الجائزة",
	"Award Title": "عنوان الجائزة",
	URL: URL$u,
	"Award URL": "رابط ويب الجائزة",
	"Add standard award": "أضف معيار الجائزة",
	"Add custom award": "أضف جائزة خاصة",
	"Change award": "غير الجائزة",
	"Did not find your award? ": "لم تجد الجائزة المطلوبة؟",
	"Add a custom award.": "أضف جائزة خاصة.",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "إذا تمّ نشر التّسجيلة فلا يمكنك تغيير الملفات في التحميل! في حين يمكنك دائما تحيين ميتاداتا النّسجيلة لاحقا.",
	"Submit for review": "أرسل للمراجعة",
	optional: optional$u,
	"Open external link": "إفتح رابط خارجي",
	"Search for awards": "البحث في الجوائز",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "التّسجيلة متاحة للعموم. يمكن الولوج للملفّات <1>حصريّا</1> من طرف <4>مستخدميين محدّدين</4> في الأذونات.",
	Format: Format$u,
	"The files of this record are restricted.": "ملفّات هذه التّسجيلة مقيّدة.",
	"Remove field": "حذف الحقل",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$u,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "متصرفو '{{communityTitle}}' يمكنهم \n                 <bold>رؤية</bold> و <bold>تعديل</bold> \n                 الميتاداتا و ملفاتك المحملة.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$t = "";
var Restricted$t = "";
var Reason$t = "";
var Options$t = "";
var Type$t = "";
var Language$t = "";
var Affiliations$t = "";
var Edit$t = "Редакция";
var Remove$t = "Премахване";
var Added$t = "";
var Person$t = "";
var Organization$t = "";
var Name$t = "Име";
var Role$t = "";
var Cancel$t = "Отказ";
var Save$t = "Запази";
var Description$t = "Описание";
var Dates$t = "";
var Preview$t = "";
var Filename$t = "";
var Size$t = "";
var Progress$t = "";
var Pending$t = "Чакащ";
var or$t = "или";
var Files$t = "";
var Title$t = "Заглавие";
var Creators$t = "";
var Contributors$t = "";
var Licenses$t = "";
var Languages$t = "";
var Version$t = "";
var Publisher$t = "";
var Identifier$t = "";
var Scheme$t = "";
var Recommended$t = "";
var All$t = "";
var Data$t = "";
var Software$t = "";
var Link$t = "";
var Relation$t = "";
var Subjects$t = "";
var Yes$t = "Да";
var No$t = "Не";
var DOI$t = "";
var Search$t = "Търсене";
var Publish$t = "";
var Declined$t = "";
var Expired$t = "";
var Published$t = "";
var Draft$t = "";
var Selected$t = "";
var Select$t = "Избери";
var Change$t = "";
var Funder$t = "";
var URL$t = "";
var optional$t = "изборен";
var Format$t = "";
var Identifiers$t = "";
var TRANSLATE_BG = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$t,
	Restricted: Restricted$t,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$t,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$t,
	"Add description": "",
	"Additional Description": "",
	Type: Type$t,
	Language: Language$t,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$t,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$t,
	Remove: Remove$t,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$t,
	Person: Person$t,
	Organization: Organization$t,
	"Family name": "",
	Name: Name$t,
	"Organization name": "",
	Role: Role$t,
	"Select role": "",
	Cancel: Cancel$t,
	Save: Save$t,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Дата",
	Description: Description$t,
	Dates: Dates$t,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$t,
	Filename: Filename$t,
	Size: Size$t,
	Progress: Progress$t,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$t,
	or: or$t,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$t,
	"Resource type": "",
	Title: Title$t,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$t,
	Contributors: Contributors$t,
	"Additional descriptions": "",
	Licenses: Licenses$t,
	Languages: Languages$t,
	Version: Version$t,
	Publisher: Publisher$t,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$t,
	Scheme: Scheme$t,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$t,
	All: All$t,
	Data: Data$t,
	Software: Software$t,
	"License title": "",
	Link: Link$t,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$t,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$t,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$t,
	No: No$t,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$t,
	Search: Search$t,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$t,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$t,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$t,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$t,
	"Your upload is published.": "",
	Draft: Draft$t,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$t,
	Select: Select$t,
	"Select ": "",
	Change: Change$t,
	"Search for a funder by name": "",
	Funder: Funder$t,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$t,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$t,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$t,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$t,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$s = "Públic";
var Restricted$s = "Restringit";
var Reason$s = "";
var Options$s = "Opcions";
var Type$s = "Tipus";
var Language$s = "";
var Affiliations$s = "Afiliacions";
var Edit$s = "Edita";
var Remove$s = "Elimina";
var Added$s = "";
var Person$s = "";
var Organization$s = "";
var Name$s = "Nom";
var Role$s = "";
var Cancel$s = "Cancel·la";
var Save$s = "Desa";
var Description$s = "Descripció";
var Dates$s = "";
var Preview$s = "";
var Filename$s = "";
var Size$s = "Tamany";
var Progress$s = "Progrés";
var Pending$s = "Pendent";
var or$s = "o";
var Files$s = "Fitxers";
var Title$s = "Títol";
var Creators$s = "";
var Contributors$s = "";
var Licenses$s = "";
var Languages$s = "";
var Version$s = "Versió";
var Publisher$s = "Editor";
var Identifier$s = "Identificador";
var Scheme$s = "";
var Recommended$s = "";
var All$s = "Totes";
var Data$s = "Dades";
var Software$s = "";
var Link$s = "";
var Relation$s = "";
var Subjects$s = "";
var Yes$s = "Sí";
var No$s = "No";
var DOI$s = "";
var Search$s = "Cerca";
var Publish$s = "Publica";
var Declined$s = "";
var Expired$s = "";
var Published$s = "Publicat";
var Draft$s = "";
var Selected$s = "";
var Select$s = "Seleccionar";
var Change$s = "";
var Funder$s = "";
var URL$s = "URL";
var optional$s = "opcional";
var Format$s = "";
var Identifiers$s = "";
var TRANSLATE_CA = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$s,
	Restricted: Restricted$s,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$s,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$s,
	"Add description": "",
	"Additional Description": "",
	Type: Type$s,
	Language: Language$s,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$s,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$s,
	Remove: Remove$s,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$s,
	Person: Person$s,
	Organization: Organization$s,
	"Family name": "",
	Name: Name$s,
	"Organization name": "",
	Role: Role$s,
	"Select role": "",
	Cancel: Cancel$s,
	Save: Save$s,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Data",
	Description: Description$s,
	Dates: Dates$s,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "suprimeix",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$s,
	Filename: Filename$s,
	Size: Size$s,
	Progress: Progress$s,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$s,
	or: or$s,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$s,
	"Resource type": "",
	Title: Title$s,
	"Additional titles": "",
	"Publication date": "Data de publicació",
	Creators: Creators$s,
	Contributors: Contributors$s,
	"Additional descriptions": "",
	Licenses: Licenses$s,
	Languages: Languages$s,
	Version: Version$s,
	Publisher: Publisher$s,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$s,
	Scheme: Scheme$s,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$s,
	All: All$s,
	Data: Data$s,
	Software: Software$s,
	"License title": "",
	Link: Link$s,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$s,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$s,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$s,
	No: No$s,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$s,
	Search: Search$s,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$s,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$s,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$s,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$s,
	"Your upload is published.": "",
	Draft: Draft$s,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$s,
	Select: Select$s,
	"Select ": "",
	Change: Change$s,
	"Search for a funder by name": "",
	Funder: Funder$s,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$s,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$s,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$s,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$s,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$r = "Veřejný";
var Restricted$r = "Omezené";
var Reason$r = "";
var Options$r = "Možnosti";
var Type$r = "Typ";
var Language$r = "";
var Affiliations$r = "";
var Edit$r = "Úpravy";
var Remove$r = "Odstranit";
var Added$r = "";
var Person$r = "";
var Organization$r = "";
var Name$r = "Název";
var Role$r = "";
var Cancel$r = "Zrušit";
var Save$r = "Uložit";
var Description$r = "Popis";
var Dates$r = "";
var Preview$r = "";
var Filename$r = "";
var Size$r = "Velikost";
var Progress$r = "Průběh";
var Pending$r = "Čeká na vyřízení";
var or$r = "nebo";
var Files$r = "Soubory";
var Title$r = "Název";
var Creators$r = "";
var Contributors$r = "";
var Licenses$r = "";
var Languages$r = "";
var Version$r = "Verze";
var Publisher$r = "Vydavatelství";
var Identifier$r = "Identifikátor";
var Scheme$r = "";
var Recommended$r = "";
var All$r = "Vše";
var Data$r = "Data";
var Software$r = "";
var Link$r = "";
var Relation$r = "";
var Subjects$r = "";
var Yes$r = "Ano";
var No$r = "Ne";
var DOI$r = "";
var Search$r = "Hledej";
var Publish$r = "Publikovat";
var Declined$r = "";
var Expired$r = "";
var Published$r = "Publikováno";
var Draft$r = "";
var Selected$r = "";
var Select$r = "Vybrat";
var Change$r = "";
var Funder$r = "";
var URL$r = "URL";
var optional$r = "volitelné";
var Format$r = "";
var Identifiers$r = "";
var TRANSLATE_CS = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$r,
	Restricted: Restricted$r,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$r,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$r,
	"Add description": "",
	"Additional Description": "",
	Type: Type$r,
	Language: Language$r,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$r,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$r,
	Remove: Remove$r,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$r,
	Person: Person$r,
	Organization: Organization$r,
	"Family name": "",
	Name: Name$r,
	"Organization name": "",
	Role: Role$r,
	"Select role": "",
	Cancel: Cancel$r,
	Save: Save$r,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Datum",
	Description: Description$r,
	Dates: Dates$r,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "smazat",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$r,
	Filename: Filename$r,
	Size: Size$r,
	Progress: Progress$r,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$r,
	or: or$r,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$r,
	"Resource type": "",
	Title: Title$r,
	"Additional titles": "",
	"Publication date": "Datum vydání",
	Creators: Creators$r,
	Contributors: Contributors$r,
	"Additional descriptions": "",
	Licenses: Licenses$r,
	Languages: Languages$r,
	Version: Version$r,
	Publisher: Publisher$r,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$r,
	Scheme: Scheme$r,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "Čtěte více",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$r,
	All: All$r,
	Data: Data$r,
	Software: Software$r,
	"License title": "",
	Link: Link$r,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$r,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$r,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$r,
	No: No$r,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$r,
	Search: Search$r,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Moje komunity",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$r,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$r,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$r,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$r,
	"Your upload is published.": "",
	Draft: Draft$r,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$r,
	Select: Select$r,
	"Select ": "",
	Change: Change$r,
	"Search for a funder by name": "",
	Funder: Funder$r,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$r,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$r,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$r,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$r,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$q = "";
var Restricted$q = "";
var Reason$q = "";
var Options$q = "";
var Type$q = "";
var Language$q = "";
var Affiliations$q = "";
var Edit$q = "";
var Remove$q = "";
var Added$q = "";
var Person$q = "";
var Organization$q = "";
var Name$q = "";
var Role$q = "";
var Cancel$q = "Afbryd";
var Save$q = "";
var Description$q = "";
var Dates$q = "";
var Preview$q = "";
var Filename$q = "";
var Size$q = "";
var Progress$q = "";
var Pending$q = "";
var or$q = "";
var Files$q = "";
var Title$q = "";
var Creators$q = "";
var Contributors$q = "";
var Licenses$q = "";
var Languages$q = "";
var Version$q = "";
var Publisher$q = "";
var Identifier$q = "";
var Scheme$q = "";
var Recommended$q = "";
var All$q = "";
var Data$q = "";
var Software$q = "";
var Link$q = "";
var Relation$q = "";
var Subjects$q = "";
var Yes$q = "";
var No$q = "";
var DOI$q = "";
var Search$q = "";
var Publish$q = "";
var Declined$q = "";
var Expired$q = "";
var Published$q = "";
var Draft$q = "";
var Selected$q = "";
var Select$q = "";
var Change$q = "";
var Funder$q = "";
var URL$q = "";
var optional$q = "";
var Format$q = "";
var Identifiers$q = "";
var TRANSLATE_DA = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$q,
	Restricted: Restricted$q,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$q,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$q,
	"Add description": "",
	"Additional Description": "",
	Type: Type$q,
	Language: Language$q,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$q,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$q,
	Remove: Remove$q,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$q,
	Person: Person$q,
	Organization: Organization$q,
	"Family name": "",
	Name: Name$q,
	"Organization name": "",
	Role: Role$q,
	"Select role": "",
	Cancel: Cancel$q,
	Save: Save$q,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$q,
	Dates: Dates$q,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$q,
	Filename: Filename$q,
	Size: Size$q,
	Progress: Progress$q,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$q,
	or: or$q,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$q,
	"Resource type": "",
	Title: Title$q,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$q,
	Contributors: Contributors$q,
	"Additional descriptions": "",
	Licenses: Licenses$q,
	Languages: Languages$q,
	Version: Version$q,
	Publisher: Publisher$q,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$q,
	Scheme: Scheme$q,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$q,
	All: All$q,
	Data: Data$q,
	Software: Software$q,
	"License title": "",
	Link: Link$q,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$q,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$q,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$q,
	No: No$q,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$q,
	Search: Search$q,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$q,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$q,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$q,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$q,
	"Your upload is published.": "",
	Draft: Draft$q,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$q,
	Select: Select$q,
	"Select ": "",
	Change: Change$q,
	"Search for a funder by name": "",
	Funder: Funder$q,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$q,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$q,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$q,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$q,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$p = "Öffentlich";
var Restricted$p = "Eingeschränkt";
var Reason$p = "Grund";
var Options$p = "Optionen";
var Type$p = "Typ";
var Language$p = "Sprache";
var Affiliations$p = "Zugehörigkeiten";
var Edit$p = "Editieren";
var Remove$p = "Löschen";
var Added$p = "Hinzugefügt";
var Person$p = "Person";
var Organization$p = "Organisation";
var Name$p = "Name";
var Role$p = "Rolle";
var Cancel$p = "Abbrechen";
var Save$p = "Speichern";
var Description$p = "Beschreibung";
var Dates$p = "Daten";
var Preview$p = "Vorschau";
var Filename$p = "Dateiname";
var Size$p = "Größe";
var Progress$p = "Fortschritt";
var Pending$p = "Ausstehend";
var or$p = "oder";
var Files$p = "Dateien";
var Title$p = "Titel";
var Creators$p = "ErstellerInnen";
var Contributors$p = "Mitwirkende";
var Licenses$p = "Lizenzen";
var Languages$p = "Sprachen";
var Version$p = "Version";
var Publisher$p = "HerausgeberIn";
var Identifier$p = "Kennung";
var Scheme$p = "Schema";
var Recommended$p = "Empfohlen";
var All$p = "Alle";
var Data$p = "Daten";
var Software$p = "Software";
var Link$p = "Link";
var Relation$p = "Beziehung";
var Subjects$p = "Schlagworte";
var Yes$p = "Ja";
var No$p = "Nein";
var DOI$p = "DOI";
var Search$p = "Suchen";
var Publish$p = "Veröffentlichen";
var Declined$p = "Abgelehnt";
var Expired$p = "Abgelaufen";
var Published$p = "Veröffentlicht";
var Draft$p = "Entwurf";
var Selected$p = "Ausgewählt";
var Select$p = "Auswählen";
var Change$p = "Ändern";
var Funder$p = "FördermittelgeberIn";
var URL$p = "URL";
var optional$p = "optional";
var Format$p = "";
var Identifiers$p = "Kennungen";
var TRANSLATE_DE = {
	"Embargo until": "Embargo bis",
	"YYYY-MM-DD": "JJJJ-MM-TT",
	"The full record is restricted.": "Der gesamte Eintrag ist eingeschränkt.",
	"Embargoed (full record)": "Embargo (vollständiger Eintrag)",
	"Embargoed (files-only)": "Embargo (nur auf Dateien)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "Die Metadaten des Eintrags sind öffentlich zugänglich. Am <bold>{{ date }}</bold> werden die Dateien automatisch öffentlich zugänglich gemacht. Bis dahin können <bold>nur</bold>die in den Berechtigungen <bold>angegebenen BenutzerInnen</bold> auf die Dateien zugreifen.",
	"The record has no files.": "Der Eintrag hat keine Dateien.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "Am <bold>{{ date }}</bold>wird der Eintrag automatisch öffentlich zugänglich gemacht. Bis dahin können <bold>nur</bold>die in den Berechtigungen <bold>angegebenen BenutzerInnen</bold> auf den Eintrag zugreifen.",
	Public: Public$p,
	Restricted: Restricted$p,
	"The record and files are publicly accessible.": "Der Eintrag und die Dateien sind öffentlich zugänglich.",
	"The record is publicly accessible.": "Der Eintrag ist öffentlich zugänglich.",
	"Public with restricted files": "Öffentlich mit nicht öffentlichen Dateien",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "Auf den Eintrag können <1>nur</1>die in den Berechtigungen <3>angegebenen BenutzerInnen</3> zugreifen.",
	"Full record": "Vollständiger Eintrag",
	"Files only": "Nur Dateien",
	"Apply an embargo": "Embargo verhängen",
	"Embargo reason": "Embargo Grund",
	"Optionally, describe the reason for the embargo.": "Beschreiben Sie optional den Grund für das Embargo.",
	"Embargo was lifted on {{fmtDate}}.": "Das Embargo wurde am {{fmtDate}} aufgehoben.",
	Reason: Reason$p,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "Eintrag oder Dateien müssen auf Grund eines Embargos <1>eingeschränkt</1> werden.",
	Options: Options$p,
	"Add description": "Beschreibung hinzufügen",
	"Additional Description": "Zusätzliche Beschreibung",
	Type: Type$p,
	Language: Language$p,
	"Select language": "Wählen Sie eine Sprache",
	"Add titles": "Titel hinzufügen",
	"Search or create affiliation'": "Zugehörigkeit suchen oder erstellen",
	Affiliations: Affiliations$p,
	"Search for affiliations..": "Suche nach Zugehörigkeiten..",
	"Add creator": "ErstellerIn hinzufügen",
	Edit: Edit$p,
	Remove: Remove$p,
	"Name identifiers": "Kennungen",
	"e.g. ORCID, ISNI or GND.": "z.B. ORCID, ISNI oder GND.",
	"Type the value of an identifier...": "Geben Sie eine Kennung ein...",
	"Save and add another": "Speichern und weitere hinzufügen",
	"Family name is a required field.": "Familienname ist ein Pflichtfeld.",
	"Name is a required field.": "Name ist ein Pflichtfeld.",
	"Role is a required field.": "Rolle ist ein Pflichtfeld.",
	Added: Added$p,
	Person: Person$p,
	Organization: Organization$p,
	"Family name": "Familienname",
	Name: Name$p,
	"Organization name": "Name der Organisation",
	Role: Role$p,
	"Select role": "Wählen Sie eine Rolle",
	Cancel: Cancel$p,
	Save: Save$p,
	"Add date": "Datum hinzufügen",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Format: DATUM oder DATUM/DATUM, wobei DATUM JJJJ oder JJJJ-MM oder JJJJ-MM-TT ist.",
	"Date": "Datum",
	Description: Description$p,
	Dates: Dates$p,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "JJJJ-MM-TT oder JJJJ-MM-TT/JJJJ-MM-TT",
	"discard changes": "Änderungen verwerfen",
	"discard version": "Version verwerfen",
	"delete": "löschen",
	"Are you sure you want to discard the changes to this draft?": "Sind Sie sicher, dass Sie die Änderungen an diesem Entwurf verwerfen wollen?",
	"Are you sure you want to delete this new version?": "Sind Sie sicher, dass Sie diese neue Version löschen wollen?",
	"Are you sure you want to delete this draft?": "Sind Sie sicher, dass Sie diesen Entwurf löschen möchten?",
	"New version": "Neue Version",
	"New upload": "Neuer Eintrag",
	"Edit upload": "Upload bearbeiten",
	"Uploading the selected files would result in": "Das Hochladen der ausgewählten Dateien ergibt",
	"but the limit is": "aber die Grenze ist",
	"You can import files from the previous version.": "Sie können Dateien aus der vorherigen Version importieren.",
	"File addition, removal or modification are not allowed after you have published your upload.": "Nach der Veröffentlichung des Eintrags ist das Hinzufügen, Entfernen oder Ändern von Dateien nicht mehr möglich.",
	"You must create a new version to add, modify or delete files.": "Sie müssen eine neue Version erstellen, um Dateien hinzuzufügen, zu ändern oder zu löschen.",
	"Upload files": "Dateien hochladen",
	"Import files": "Dateien importieren",
	Preview: Preview$p,
	Filename: Filename$p,
	Size: Size$p,
	Progress: Progress$p,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "Dies ist der Datei-Fingerabdruck (MD5-Prüfsumme), der zur Überprüfung der Dateiintegrität verwendet werden kann.",
	Pending: Pending$p,
	or: or$p,
	"Metadata-only record": "Reiner-Metadateneintrag",
	"Storage available": "Verfügbarer Speicherplatz",
	"{{length}} out of {{maxfiles}} files": "{{length}} von {{maxfiles}} Dateien",
	"out of": "von",
	Files: Files$p,
	"Resource type": "Art der Ressource",
	Title: Title$p,
	"Additional titles": "Zusätzliche Titel",
	"Publication date": "Veröffentlichungsdatum",
	Creators: Creators$p,
	Contributors: Contributors$p,
	"Additional descriptions": "Zusätzliche Beschreibungen",
	Licenses: Licenses$p,
	Languages: Languages$p,
	Version: Version$p,
	Publisher: Publisher$p,
	"Related works": "Verwandte Arbeiten",
	"Alternate identifiers": "Alternative Kennungen",
	"Record successfully saved.": "Eintrag wurde erfolgreich gespeichert.",
	"Record saved with validation errors:": "Eintrag mit Überprüfungsfehlern gespeichert:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf wurde nicht gespeichert. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf wurde nicht veröffentlicht. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf wurde nicht zur Begutachtung eingereicht. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf wurde nicht gelöscht. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf kann nicht in der Vorschau angezeigt werden. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Die Kennung wurde nicht reserviert. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Die Kennung wurde nicht gelöscht. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "Ups, da ist etwas schief gelaufen! Der Entwurf konnte vor dem Hochladen der Datei nicht gespeichert werden. Bitte versuchen Sie es erneut. Wenn das Problem weiterhin besteht, wenden Sie sich an Ihren Repositoriumssupport.",
	"Add award": "Förderprogramm hinzufügen",
	"Add identifier": "Kennung hinzufügen",
	Identifier: Identifier$p,
	Scheme: Scheme$p,
	"Search for languages...": "Suche nach Sprachen...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Suche nach einer Sprache anhand des Namens (z.B. \"eng\", \"fr\" oder \"polnisch\")",
	"Add standard": "Standard hinzufügen",
	"Add custom": "Benutzerdefinierte hinzufügen",
	"Read more": "Mehr lesen",
	"Title is a required field.": "Titel ist ein Pflichtfeld.",
	"Link must be a valid URL": "Link muss eine gültige URL sein.",
	Recommended: Recommended$p,
	All: All$p,
	Data: Data$p,
	Software: Software$p,
	"License title": "Lizenztitel",
	Link: Link$p,
	"License link": "Lizenzlink",
	"Add license": "Lizenz hinzufügen",
	"Change license": "Lizenz ändern",
	"You don't have permissions to create a new version.": "Sie haben nicht die Berechtigung, eine neue Version zu erstellen.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "Falls Ihr Eintrag bereits an anderer Stelle veröffentlicht wurde, verwenden Sie bitte das Datum der Erstveröffentlichung. Format: JJJJ-MM-TT, JJJJ-MM, oder JJJJ. Für Intervalle verwenden Sie DATUM/DATUM, z. B. 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "JJJJ-MM-TT oder JJJJ-MM-TT/ JJJJ-MM-TT für Intervalle. MM und TT sind optional.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "Der Name wird in Zitierungen verwendet und ist daher von Bedeutung.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "Geben Sie Kennungen von verwandten Arbeiten an. Unterstützte Kennungen sind DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs und URLs.",
	"Add related work": "Verwandte Arbeiten hinzufügen",
	Relation: Relation$p,
	"Select relation...": "Beziehung auswählen...",
	"Save draft": "Entwurf speichern",
	"Suggest from": "Vorschlagen von",
	Subjects: Subjects$p,
	"Search for a subject by name": "Suche nach einem Thema anhand des Namens",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Hauptsächlich relevant für Software- und Datensatz-Uploads. Ein semantischer Versionsstring wird bevorzugt, siehe <1>semver.org</1>, aber jeder Versionsstring wird akzeptiert.",
	"Do you already have a {{pidLabel}} for this upload?": "Haben Sie bereits einen {{pidLabel}} für diesen Eintrag?",
	Yes: Yes$p,
	No: No$p,
	"e.g. ROR, ISNI or GND.": "z.B. ROR, ISNI oder GND.",
	"The following files already exist": "Die folgenden Dateien sind bereits vorhanden",
	"Disable files for this record": "Dateien für diesen Datensatz deaktivieren",
	DOI: DOI$p,
	Search: Search$p,
	"Search or create subjects...": "Schlagworte suchen oder erstellen...",
	"Edit creator": "ErstellerIn bearbeiten",
	"Add {{mode}} license": "Lizenz {{mode}} hinzufügen",
	"Change {{mode}} license": "Lizenz {{mode}} ändern",
	"My communities": "Meine Communitys",
	"Search in all communities": "Suche in allen Communitys",
	"Search in my communities": "Suche in meinen Communitys",
	"Search for persons by name, identifier, or affiliation...": "Suche nach Personen anhand des Namens, der Kennung oder Zugehörigkeit...",
	"Select a community": "Wählen Sie eine Community",
	"Submit review": "Begutachtung einreichen",
	Publish: Publish$p,
	"Are you sure you want to publish this record?": "Sind Sie sicher, dass Sie diesen Eintrag veröffentlichen wollen?",
	"The draft was not published. Record saved with validation errors:": "Der Entwurf wurde nicht veröffentlicht. Der Eintrag wurde mit Validierungsfehlern gespeichert:",
	"The draft was not submitted for review. Record saved with validation errors:": "Der Entwurf wurde nicht zur Begutachtung eingereicht. Der Eintrag wurde mit Validierungsfehlern gespeichert:",
	"In review": "In Begutachtung",
	"Community curators will review your upload. Once accepted, it will be published.": "Die KuratorInnen der Community werden Ihren Eintrag überprüfen. Sobald er akzeptiert ist, wird er veröffentlicht.",
	Declined: Declined$p,
	"The request to submit this upload to the community was declined.": "Der Antrag, diesen Eintrag mit der Community zu verknüpfen, wurde abgelehnt.",
	Expired: Expired$p,
	"The request to submit this upload to the community has expired.": "Die Anfrage, diesen Eintrag mit der Community zu verknüpfen, ist abgelaufen.",
	Published: Published$p,
	"Your upload is published.": "Ihr Eintrag ist veröffentlicht.",
	Draft: Draft$p,
	"Once your upload is complete, you can submit it for review to the community curators.": "Sobald Ihr Eintrag vollständig ist, können Sie ihn zur Begutachtung an die KuratorInnen der Community einreichen.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "Sobald Ihr Eintrag vollständig ist, können Sie ihn veröffentlichen oder zur Begutachtung an die KuratorInnen der Community einreichen.",
	"New version draft": "Entwurf einer neuen Version",
	"Once your upload is complete, you can publish it.": "Sobald Ihr Eintrag vollständig ist, können Sie ihn veröffentlichen.",
	"View request": "Anfrage anzeigen",
	"Submitted for review": "Zur Begutachtung eingereicht",
	"Change community": "Community ändern",
	"Publish without community": "Ohne Community veröffentlichen",
	"Select the community where you want to submit your record.": "Wählen Sie die Community aus, bei der Sie Ihren Eintrag einreichen möchten.",
	"View community": "Community anzeigen",
	"Opens in new tab": "Öffnet in neuem Tab",
	Selected: Selected$p,
	Select: Select$p,
	"Select ": "Auswählen",
	Change: Change$p,
	"Search for a funder by name": "Suche nach einem/einer FördermittelgeberIn anhand des Namens",
	Funder: Funder$p,
	"Search for funder...": "Suche nach FördermittelgeberIn...",
	"Award information": "Informationen zum Förderprogramm",
	"Number": "Nummer",
	"Award number": "Nummer des Förderprogramms",
	"Award Title": "Titel des Förderprogramms",
	URL: URL$p,
	"Award URL": "URL des Förderprogramms",
	"Add standard award": "Standardförderprogramm hinzufügen",
	"Add custom award": "Benutzerdefiniertes Förderprogramm hinzufügen",
	"Change award": "Förderprogramm ändern",
	"Did not find your award? ": "Sie haben Ihr Förderprogramm nicht gefunden?",
	"Add a custom award.": "Benutzerdefiniertes Förderprogramm hinzufügen",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "Sobald der Eintrag veröffentlicht ist, können Sie die Dateien des Eintrags nicht mehr ändern! Die Metadaten des Eintrags können jedoch weiterhin aktualisiert werden.",
	"Submit for review": "Zur Begutachtung einreichen",
	optional: optional$p,
	"Open external link": "Externen Link öffnen",
	"Search for awards": "Suche nach Förderprogrammen",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$p,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$p,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "Die '{{communityTitle}}'-KuratorInnen erhalten <bold>Sicht-</bold> und <bold>Bearbeitungsrechte</bold> für die Metadaten und Dateien Ihres Eintrags.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$o = "";
var Restricted$o = "Περιορισμένο";
var Reason$o = "";
var Options$o = "Επιλογές";
var Type$o = "Τύπος";
var Language$o = "";
var Affiliations$o = "Affiliations";
var Edit$o = "Επεξεργασία";
var Remove$o = "Διαγραφή";
var Added$o = "";
var Person$o = "";
var Organization$o = "";
var Name$o = "Όνομα";
var Role$o = "";
var Cancel$o = "Ακύρωση";
var Save$o = "Αποθήκευση";
var Description$o = "Περιγραφή";
var Dates$o = "";
var Preview$o = "";
var Filename$o = "";
var Size$o = "";
var Progress$o = "Πρόοδος";
var Pending$o = "Σε αναμονή";
var or$o = "ή";
var Files$o = "Αρχεία";
var Title$o = "Τίτλος";
var Creators$o = "";
var Contributors$o = "";
var Licenses$o = "";
var Languages$o = "";
var Version$o = "";
var Publisher$o = "Εκδότης";
var Identifier$o = "Αναγνωριστικό";
var Scheme$o = "";
var Recommended$o = "";
var All$o = "Όλα";
var Data$o = "Δεδομένα";
var Software$o = "";
var Link$o = "";
var Relation$o = "";
var Subjects$o = "";
var Yes$o = "Ναι";
var No$o = "Όχι";
var DOI$o = "";
var Search$o = "Αναζήτηση";
var Publish$o = "Δημοσίευση";
var Declined$o = "";
var Expired$o = "";
var Published$o = "";
var Draft$o = "";
var Selected$o = "";
var Select$o = "Επιλογή";
var Change$o = "";
var Funder$o = "";
var URL$o = "URL";
var optional$o = "προαιρετικό";
var Format$o = "";
var Identifiers$o = "";
var TRANSLATE_EL = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$o,
	Restricted: Restricted$o,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$o,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$o,
	"Add description": "",
	"Additional Description": "",
	Type: Type$o,
	Language: Language$o,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$o,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$o,
	Remove: Remove$o,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$o,
	Person: Person$o,
	Organization: Organization$o,
	"Family name": "",
	Name: Name$o,
	"Organization name": "",
	Role: Role$o,
	"Select role": "",
	Cancel: Cancel$o,
	Save: Save$o,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Ημ/νία",
	Description: Description$o,
	Dates: Dates$o,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "διαγραφή",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "Νέα εκδοχή",
	"New upload": "Νέα μεταφόρτωση",
	"Edit upload": "Τροποποίηση μεταφόρτωσης",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$o,
	Filename: Filename$o,
	Size: Size$o,
	Progress: Progress$o,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$o,
	or: or$o,
	"Metadata-only record": "",
	"Storage available": "Διαθέσιμη χωρητικότητα",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$o,
	"Resource type": "",
	Title: Title$o,
	"Additional titles": "",
	"Publication date": "Ημ/νία έκδοσης",
	Creators: Creators$o,
	Contributors: Contributors$o,
	"Additional descriptions": "",
	Licenses: Licenses$o,
	Languages: Languages$o,
	Version: Version$o,
	Publisher: Publisher$o,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "Προσθήκη identifier",
	Identifier: Identifier$o,
	Scheme: Scheme$o,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "Διαβάστε περισσότερα",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$o,
	All: All$o,
	Data: Data$o,
	Software: Software$o,
	"License title": "",
	Link: Link$o,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$o,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$o,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$o,
	No: No$o,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$o,
	Search: Search$o,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Οι κοινότητές μου",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$o,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$o,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$o,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$o,
	"Your upload is published.": "",
	Draft: Draft$o,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$o,
	Select: Select$o,
	"Select ": "",
	Change: Change$o,
	"Search for a funder by name": "",
	Funder: Funder$o,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$o,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$o,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$o,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$o,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var TRANSLATE_EN = {
	"New version": "New version",
	"New upload": "New upload",
	"Edit upload": "Edit upload",
	"Storage available": "Storage available"
};

var Public$n = "Público";
var Restricted$n = "Restringido";
var Reason$n = "Motivo";
var Options$n = "Opciones";
var Type$n = "Tipo";
var Language$n = "Idioma";
var Affiliations$n = "Afiliaciones";
var Edit$n = "Editar";
var Remove$n = "Eliminar";
var Added$n = "Añadido";
var Person$n = "Persona";
var Organization$n = "Organización";
var Name$n = "Nombre";
var Role$n = "Rol";
var Cancel$n = "Cancelar";
var Save$n = "Guardar";
var Description$n = "Descripción";
var Dates$n = "Fechas";
var Preview$n = "Previsualizar";
var Filename$n = "Nombre de archivo";
var Size$n = "Tamaño";
var Progress$n = "Progreso";
var Pending$n = "Pendiente";
var or$n = "o";
var Files$n = "Archivos";
var Title$n = "Título";
var Creators$n = "Creadores";
var Contributors$n = "Colaboradores";
var Licenses$n = "Licencias";
var Languages$n = "Idiomas";
var Version$n = "Versión";
var Publisher$n = "Editor";
var Identifier$n = "Identificador";
var Scheme$n = "Esquema";
var Recommended$n = "Recomendado";
var All$n = "Todas";
var Data$n = "Datos";
var Software$n = "Software";
var Link$n = "Enlace";
var Relation$n = "Relación";
var Subjects$n = "Temas";
var Yes$n = "Sí";
var No$n = "No";
var DOI$n = "DOI";
var Search$n = "Buscar";
var Publish$n = "Publicar";
var Declined$n = "Rechazado";
var Expired$n = "Caducado";
var Published$n = "Publicado";
var Draft$n = "Borrador";
var Selected$n = "Seleccionado";
var Select$n = "Seleccionar";
var Change$n = "Cambiar";
var Funder$n = "Financiador";
var URL$n = "URL";
var optional$n = "opcional";
var Format$n = "Formato";
var Identifiers$n = "Identificadores";
var TRANSLATE_ES = {
	"Embargo until": "Embargo hasta",
	"YYYY-MM-DD": "YYYY-MM-DD",
	"The full record is restricted.": "Todo el registro está restringido.",
	"Embargoed (full record)": "Embargado (registro completo)",
	"Embargoed (files-only)": "Embargado (solo archivos)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "El registro es de acceso público. El <bold>{{date}}</bold>, los archivos serán automáticamente accesibles al público. Hasta entonces, <bold>solo</bold> los <bold>usuarios especificados</bold> en los permisos pueden acceder a los archivos.",
	"The record has no files.": "El registro no tiene archivos.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "El <bold>{{date}}</bold>, el registro se hará automáticamente accesible al público. Hasta entonces, <bold>solo</bold> los <bold>usuarios especificados</bold> en los permisos pueden acceder al registro.",
	Public: Public$n,
	Restricted: Restricted$n,
	"The record and files are publicly accessible.": "El registro y los archivos son de acceso público.",
	"The record is publicly accessible.": "El registro es de acceso público.",
	"Public with restricted files": "Público pero con archivos restringidos",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "<1>Solo</1> los <3>usuarios especificados</3> en los permisos pueden acceder al registro.",
	"Full record": "Registro completo",
	"Files only": "Solo archivos",
	"Apply an embargo": "Aplicar un embargo",
	"Embargo reason": "Motivo del embargo",
	"Optionally, describe the reason for the embargo.": "Opcionalmente, describa el motivo del embargo.",
	"Embargo was lifted on {{fmtDate}}.": "El embargo fue levantado el {{fmtDate}}.",
	Reason: Reason$n,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "La protección de registros o archivos debe estar r<1>estringida</1> para aplicar un embargo.",
	Options: Options$n,
	"Add description": "Añadir descripción",
	"Additional Description": "Descripción adicional",
	Type: Type$n,
	Language: Language$n,
	"Select language": "Seleccionar idioma",
	"Add titles": "Añadir títulos",
	"Search or create affiliation'": "Buscar o crear afiliación",
	Affiliations: Affiliations$n,
	"Search for affiliations..": "Buscar afiliaciones",
	"Add creator": "Añadir creador",
	Edit: Edit$n,
	Remove: Remove$n,
	"Name identifiers": "Identificadores de nombre",
	"e.g. ORCID, ISNI or GND.": "por ej. ORCID, ISNI o GND.",
	"Type the value of an identifier...": "Escriba el valor de un identificador...",
	"Save and add another": "Guardar y añadir otro",
	"Family name is a required field.": "El apellido es un campo obligatorio.",
	"Name is a required field.": "El nombre es un campo obligatorio.",
	"Role is a required field.": "El rol es un campo obligatorio.",
	Added: Added$n,
	Person: Person$n,
	Organization: Organization$n,
	"Family name": "Apellidos",
	Name: Name$n,
	"Organization name": "Nombre de la organización",
	Role: Role$n,
	"Select role": "Seleccionar rol",
	Cancel: Cancel$n,
	Save: Save$n,
	"Add date": "Añadir fecha",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Formato: FECHA o FECHA / FECHA donde FECHA es AAAA o AAAA-MM o AAAA-MM-DD.",
	"Date": "Fecha",
	Description: Description$n,
	Dates: Dates$n,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "AAAA-MM-DD o AAAA-MM-DD / AAAA-MM-DD",
	"discard changes": "descartar cambios",
	"discard version": "descartar versión",
	"delete": "suprimir",
	"Are you sure you want to discard the changes to this draft?": "¿Está seguro de que desea descartar los cambios en este borrador?",
	"Are you sure you want to delete this new version?": "¿Está seguro de que desea eliminar esta nueva versión?",
	"Are you sure you want to delete this draft?": "¿Está seguro de querer eliminar este borrador?",
	"New version": "Nueva versión",
	"New upload": "Nuevo envío",
	"Edit upload": "Editar envío",
	"Uploading the selected files would result in": "La subida de los archivos seleccionados podría dar lugar a",
	"but the limit is": "pero el límite es",
	"You can import files from the previous version.": "No es posible importar archivos de una versión anterior.",
	"File addition, removal or modification are not allowed after you have published your upload.": "No se permite la adición, eliminación o modificación de archivos después de haber publicado su envío.",
	"You must create a new version to add, modify or delete files.": "Debe crear una nueva versión para agregar, modificar o eliminar archivos.",
	"Upload files": "Subir archivos",
	"Import files": "Importar archivos",
	Preview: Preview$n,
	Filename: Filename$n,
	Size: Size$n,
	Progress: Progress$n,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "Esta es la huella digital del archivo (suma de comprobación MD5), que se puede utilizar para verificar la integridad del archivo.",
	Pending: Pending$n,
	or: or$n,
	"Metadata-only record": "Registro solo de metadatos",
	"Storage available": "Almacenamiento disponible",
	"{{length}} out of {{maxfiles}} files": "{{length}} de {{maxfiles}} archivos",
	"out of": "de",
	Files: Files$n,
	"Resource type": "Tipo de recurso",
	Title: Title$n,
	"Additional titles": "Títulos adicionales",
	"Publication date": "Fecha de publicación",
	Creators: Creators$n,
	Contributors: Contributors$n,
	"Additional descriptions": "Descripciones adicionales",
	Licenses: Licenses$n,
	Languages: Languages$n,
	Version: Version$n,
	Publisher: Publisher$n,
	"Related works": "Trabajos relacionados",
	"Alternate identifiers": "Identificadores alternativos",
	"Record successfully saved.": "Registro guardado con éxito.",
	"Record saved with validation errors:": "Registro guardado con errores de validación:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! y el borrador no se guardó. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de asistencia al usuario.",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El borrador no fue publicado. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de asistencia al usuario.",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El borrador no fue enviado para su revisión. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de asistencia al usuario.",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El borrador no fue eliminado. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de asistencia al usuario.",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! No se puede previsualizar el borrador. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de asistencia al usuario.",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El identificador no estaba reservado. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de atención al usuario.",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El identificador no fue descartado. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de atención al usuario.",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "¡Algo salió mal! El borrador no se pudo guardar antes de subir el archivo. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de atención al usuario.",
	"Add award": "Añadir reconocimiento",
	"Add identifier": "Añadir identificador",
	Identifier: Identifier$n,
	Scheme: Scheme$n,
	"Search for languages...": "Buscar idiomas...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Busca un idioma por nombre (por ej., \"Eng\", \"es\" o \"italiano\")",
	"Add standard": "Añadir estándar",
	"Add custom": "Añadir a medida",
	"Read more": "Leer más",
	"Title is a required field.": "El título es un campo obligatorio.",
	"Link must be a valid URL": "El enlace debe ser una URL válida",
	Recommended: Recommended$n,
	All: All$n,
	Data: Data$n,
	Software: Software$n,
	"License title": "Título de licencia",
	Link: Link$n,
	"License link": "Enlace de la licencia",
	"Add license": "Añadir licencia",
	"Change license": "Cambiar licencia",
	"You don't have permissions to create a new version.": "No tiene permisos para crear una nueva versión.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "En caso de que su carga ya se haya publicado en otro lugar, utilice la fecha de la primera publicación. Formato: AAAA-MM-DD, AAAA-MM o AAAA. Para intervalos use FECHA / FECHA, por ej. 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "AAAA-MM-DD o AAAA-MM-DD / AAAA-MM-DD para intervalos. MM y DD son opcionales.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "Se utiliza al editor para formular la cita, así que considere la relevancia del rol.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "Especifique identificadores de trabajos relacionados. Los identificadores admitidos incluyen DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URN y URL.",
	"Add related work": "Añadir trabajo relacionado",
	Relation: Relation$n,
	"Select relation...": "Seleccionar relación",
	"Save draft": "Guardar borrador",
	"Suggest from": "Sugerencia de",
	Subjects: Subjects$n,
	"Search for a subject by name": "Buscar un tema por el nombre",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Principalmente relevante para la subida de software y grupos de datos. Se prefiere una cadena semántica, vea <1>semver.org</1>, pero se acepta cualquier cadena de versión.",
	"Do you already have a {{pidLabel}} for this upload?": "¿Tiene ya una {{pidLabel}} para este envío?",
	Yes: Yes$n,
	No: No$n,
	"e.g. ROR, ISNI or GND.": "ej. ROR, ISNI o GND.",
	"The following files already exist": "Los siguientes archivos ya existen",
	"Disable files for this record": "Deshabilitar archivos para este registro",
	DOI: DOI$n,
	Search: Search$n,
	"Search or create subjects...": "Buscar o crear temas...",
	"Edit creator": "Editar creador",
	"Add {{mode}} license": "Añadir licencia {{mode}} ",
	"Change {{mode}} license": "Cambiar licencia {{mode}} ",
	"My communities": "Mis comunidades",
	"Search in all communities": "Buscar en todas las comunidades",
	"Search in my communities": "Buscar en mis comunidades",
	"Search for persons by name, identifier, or affiliation...": "Buscar personas por nombre, identificador o afiliación...",
	"Select a community": "Seleccionar una comunidad",
	"Submit review": "Enviar revisión",
	Publish: Publish$n,
	"Are you sure you want to publish this record?": "¿Está seguro de querer publicar este registro?",
	"The draft was not published. Record saved with validation errors:": "El borrador no fue publicado. Registro guardado con errores de validación:",
	"The draft was not submitted for review. Record saved with validation errors:": "El borrador no fue enviado para su revisión. Registro guardado con errores de validación:",
	"In review": "En revisión",
	"Community curators will review your upload. Once accepted, it will be published.": "Los curadores de la comunidad revisarán su envío. Una vez aceptado, será publicado.",
	Declined: Declined$n,
	"The request to submit this upload to the community was declined.": "La solicitud de mandar a la comunidad su envío ha sido rechazada.",
	Expired: Expired$n,
	"The request to submit this upload to the community has expired.": "La solicitud de mandar a la comunidad su envío ha caducado.",
	Published: Published$n,
	"Your upload is published.": "Su envío está publicado.",
	Draft: Draft$n,
	"Once your upload is complete, you can submit it for review to the community curators.": "Una vez que su envío esté completado, puede enviarlo para su revisión a los curadores de la comunidad.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "Una vez que su envío esté completo, puede publicarlo o enviarlo para su revisión a los curadores de la comunidad.",
	"New version draft": "Borrador de la nueva versión",
	"Once your upload is complete, you can publish it.": "Cuando su envío esté completo podrá publicarlo.",
	"View request": "Ver solicitud",
	"Submitted for review": "Enviado para revisión",
	"Change community": "Cambiar comunidad",
	"Publish without community": "Publicar sin comunidad",
	"Select the community where you want to submit your record.": "Seleccione la comunidad donde desea enviar su registro.",
	"View community": "Ver comunidad",
	"Opens in new tab": "Se abre en una pestaña nueva",
	Selected: Selected$n,
	Select: Select$n,
	"Select ": "Seleccionar",
	Change: Change$n,
	"Search for a funder by name": "Buscar un financiador por nombre",
	Funder: Funder$n,
	"Search for funder...": "Buscar financiador...",
	"Award information": "Información del premio",
	"Number": "Número",
	"Award number": "Número de premio",
	"Award Title": "Título del premio",
	URL: URL$n,
	"Award URL": "URL del premio",
	"Add standard award": "Añadir premio estándar",
	"Add custom award": "Añadir premio personalizado",
	"Change award": "Cambiar premio",
	"Did not find your award? ": "¿No encontró su premio?",
	"Add a custom award.": "Añadir un premio personalizado.",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "Una vez que se publique el registro, no podrá cambiar los archivos en la subida. Sin embargo, podrá actualizar los metadatos del registro más adelante.",
	"Submit for review": "Enviar para revisión",
	optional: optional$n,
	"Open external link": "Abrir enlace externo",
	"Search for awards": "Buscar premios",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "El registro es de acceso público. <1>Solo</1> los usuarios especificados<4> en los permisos pueden acceder a los archivos.",
	Format: Format$n,
	"The files of this record are restricted.": "Los archivos de este registro son restringidos.",
	"Remove field": "Eliminar campo",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "¿No ha encontrado una comunidad que se adapte a usted? Envíe sin una comunidad o <2>cree la suya propia.</2>",
	"Given names": "Nombres de pila",
	"Couldn't find your person? You can <2>create a new entry</2>.": "¿No ha podido encontrar a su persona? Puede <2>crear una nueva entrada</2>.",
	"Drag and drop files": "Arrastrar y soltar archivos",
	"Default preview": "Vista previa predeterminada",
	"Delete file": "Borrar archivo",
	"This is a Metadata-only record.": "Este es un registro solo de metadatos.",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "¿Algo salió mal! Error al importar archivos de la versión anterior. Inténtalo de nuevo. Si el problema persiste, póngase en contacto con el servicio de atención a los usuarios.",
	"Funder is required.": "Se requiere financiador.",
	"Title must be set alongside number.": "El título debe establecerse junto con el número.",
	"Number must be set alongside title.": "El número debe colocarse junto al título.",
	"URL must be valid.": "La URL debe ser válida.",
	"URL must be set alongside title and number.": "La URL debe establecerse junto con el título y el número.",
	Identifiers: Identifiers$n,
	"You must accept this.": "Debe aceptar esto.",
	"Before requesting review please read and check the following:": "Antes de solicitar una revisión, lea y verifique lo siguiente:",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "Los curadores de '{{communityTitle}}' tendrán acceso a\n                 <bold>ver</bold> y <bold>editar</bold> sus\n                 archivos y metadatos subidos.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": "Si los curadores de la comunidad aceptan su envío, se <bold>publicará de inmediato</bold>. Antes de eso, aún podrá modificar los metadatos y los archivos de dicho envío."
};

var Public$m = "Avalik";
var Restricted$m = "Piiratud";
var Reason$m = "Põhjus";
var Options$m = "Valikud";
var Type$m = "Tüüp";
var Language$m = "Keel";
var Affiliations$m = "Seosed";
var Edit$m = "Redigeeri";
var Remove$m = "Eemalda";
var Added$m = "Lisatud";
var Person$m = "Isik";
var Organization$m = "Organisatsioon";
var Name$m = "Nimetus";
var Role$m = "Roll";
var Cancel$m = "Tühista";
var Save$m = "Salvesta";
var Description$m = "Kirjeldus";
var Dates$m = "Kuupäevad";
var Preview$m = "Eelvaade";
var Filename$m = "Faili nimi";
var Size$m = "Suurus";
var Progress$m = "Progress";
var Pending$m = "Ootel";
var or$m = "või";
var Files$m = "Failid";
var Title$m = "Pealkiri";
var Creators$m = "Loojad";
var Contributors$m = "Kaastöölised";
var Licenses$m = "Litsentsid";
var Languages$m = "Keeled";
var Version$m = "Versioon";
var Publisher$m = "Avaldaja";
var Identifier$m = "Identifikaator";
var Scheme$m = "Skeem";
var Recommended$m = "Soovitatud";
var All$m = "Kõik";
var Data$m = "Andmed";
var Software$m = "Tarkvara";
var Link$m = "Link";
var Relation$m = "Seotus";
var Subjects$m = "Teemad";
var Yes$m = "Jah";
var No$m = "Ei";
var DOI$m = "DOI";
var Search$m = "Otsi";
var Publish$m = "Avalda";
var Declined$m = "Tagasi lükatud";
var Expired$m = "Aegunud";
var Published$m = "Avaldatud";
var Draft$m = "Mustand";
var Selected$m = "Valitud";
var Select$m = "Vali";
var Change$m = "Muuda";
var Funder$m = "Rahastaja";
var URL$m = "URL";
var optional$m = "valikuline";
var Format$m = "Vorming";
var Identifiers$m = "Identifikaatorid";
var TRANSLATE_ET = {
	"Embargo until": "Embargo kuni",
	"YYYY-MM-DD": "AAAA-KK-PP",
	"The full record is restricted.": "Täiskirje on piiratud ligipääsuga.",
	"Embargoed (full record)": "Embargo all (täiskirje)",
	"Embargoed (files-only)": "Embargo all (ainult failid)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "Kirje on avalikult ligipääsetav. <bold>{{ date }}</bold> tehakse failid automaatselt avalikult ligipääsetavaks. Seni saavad failidele ligi <bold>ainult</bold> ligipääsuloaga <bold>määratud kasutajad</bold>.",
	"The record has no files.": "Antud kirjel failid puuduvad.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "<bold>{{ date }}</bold> tehakse kirje avalikult ligipääsetavaks. Seni saavad kirjele ligi <bold>ainult</bold> ligipääsuloaga<bold>määratud kasutajad</bold>.",
	Public: Public$m,
	Restricted: Restricted$m,
	"The record and files are publicly accessible.": "Kirje ja failid on avalikult kättesaadavad.",
	"The record is publicly accessible.": "Kirje on avaliku juurdepääsuga.",
	"Public with restricted files": "Avalik, aga failidele juurdepääs on piiratud",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "Kirjele saavad ligi <1>ainult</1> ligipääsuõigustes <3>määratud kasutajad</3>.",
	"Full record": "Täiskirje",
	"Files only": "Ainult failid",
	"Apply an embargo": "Pane embargo alla",
	"Embargo reason": "Embargo põhjus",
	"Optionally, describe the reason for the embargo.": "Soovi korral kirjelda embargo alla panemise põhjust.",
	"Embargo was lifted on {{fmtDate}}.": "Embargo lõpetati {{fmtDate}}.",
	Reason: Reason$m,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "Embargo kehtestamiseks peab kirjele või failidele juurdepääs olema <1>piiratud</1>.",
	Options: Options$m,
	"Add description": "Lisa kirjeldus",
	"Additional Description": "Täiendav kirjeldus",
	Type: Type$m,
	Language: Language$m,
	"Select language": "Vali keel",
	"Add titles": "Lisa pealkirju",
	"Search or create affiliation'": "Otsi või lisa seos",
	Affiliations: Affiliations$m,
	"Search for affiliations..": "Otsi seoseid...",
	"Add creator": "Lisa looja",
	Edit: Edit$m,
	Remove: Remove$m,
	"Name identifiers": "Nime identifikaatorid",
	"e.g. ORCID, ISNI or GND.": "nt ORCID, ISNI või GND.",
	"Type the value of an identifier...": "Sisesta identifikaator...",
	"Save and add another": "Salvesta ja lisa veel üks",
	"Family name is a required field.": "Perekonnanime väli on kohustuslik.",
	"Name is a required field.": "Nime väli on kohustuslik.",
	"Role is a required field.": "Rolli väli on kohustuslik.",
	Added: Added$m,
	Person: Person$m,
	Organization: Organization$m,
	"Family name": "Perekonnanimi",
	Name: Name$m,
	"Organization name": "Organisatsiooni nimi",
	Role: Role$m,
	"Select role": "Vali roll",
	Cancel: Cancel$m,
	Save: Save$m,
	"Add date": "Lisa kuupäev",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Formaat KUUPÄEV või KUUPÄEV/KUUPÄEV, kus KUUPÄEV on AAAA või AAAA-KK või AAA-KK-PP.",
	"Date": "Kuupäev",
	Description: Description$m,
	Dates: Dates$m,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "AAAA-KK-PP või AAAA-KK-PP/AAAA-KK-PP",
	"discard changes": "loobu muudatustest",
	"discard version": "loobu versioonist",
	"delete": "kustuta",
	"Are you sure you want to discard the changes to this draft?": "Kas oled kindel, et soovid selle mustandi muudatustest loobuda?",
	"Are you sure you want to delete this new version?": "Kas oled kindel, et soovid selle uue versiooni kustutada?",
	"Are you sure you want to delete this draft?": "Oled kindel, et soovid selle mustandi kustutada?",
	"New version": "Uus versioon",
	"New upload": "Uus üleslaadimine",
	"Edit upload": "Redigeeri üleslaadimist",
	"Uploading the selected files would result in": "Valitud failide üles laadimise tulemus on",
	"but the limit is": "aga limiit on",
	"You can import files from the previous version.": "Võid importida eelmise versiooni faile.",
	"File addition, removal or modification are not allowed after you have published your upload.": "Failide lisamine, eemaldamine või muutmine ei ole lubatud pärast üleslaadimise avaldamist.",
	"You must create a new version to add, modify or delete files.": "Pead looma uue versiooni, kui soovid faile lisada, muuta või kustutada.",
	"Upload files": "Lae failid üles",
	"Import files": "Impordi failid",
	Preview: Preview$m,
	Filename: Filename$m,
	Size: Size$m,
	Progress: Progress$m,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "See on faili sõrmejälg (MD5 checksum), mida saab kasutada faili tervikluse verifitseerimiseks.",
	Pending: Pending$m,
	or: or$m,
	"Metadata-only record": "Ainult metaandmete kirje",
	"Storage available": "Vaba salvestusruum",
	"{{length}} out of {{maxfiles}} files": "{{length}} {{maxfiles}} failist",
	"out of": " millestki",
	Files: Files$m,
	"Resource type": "Ressursi liik",
	Title: Title$m,
	"Additional titles": "Täiendavad pealkirjad",
	"Publication date": "Avaldamise kuupäev",
	Creators: Creators$m,
	Contributors: Contributors$m,
	"Additional descriptions": "Täiendavad kirjeldused",
	Licenses: Licenses$m,
	Languages: Languages$m,
	Version: Version$m,
	Publisher: Publisher$m,
	"Related works": "Seotud tööd",
	"Alternate identifiers": "Alternatiivsed identifikaatorid",
	"Record successfully saved.": "Kirje salvestamine õnnestus.",
	"Record saved with validation errors:": "Kirje salvestati valideerimise vigadega:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandit ei salvestatud. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandit ei avaldatud. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandit ei saadetud ülevaatamisele. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandit ei kustutatud. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandi eelvaadet ei ole võimalik kuvada. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Identifikaatorit ei reserveeritud. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Identifikaatorist ei õnnestunud eemaldada. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "Oih, midagi läks valesti! Mustandit ei õnnestunud enne faili üles laadimist salvestada. Palun proovi uuesti. Kui probleem ei kao, võta ühendust kasutajatoega.",
	"Add award": "Lisa auhind",
	"Add identifier": "Lisa identifikaator",
	Identifier: Identifier$m,
	Scheme: Scheme$m,
	"Search for languages...": "Otsi keeli...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Otsi keeli nende nime järgi (nt \"eng\", \"fr\" või \"Polish\")",
	"Add standard": "Lisa standard",
	"Add custom": "Lisa kohandus",
	"Read more": "Loe rohkem",
	"Title is a required field.": "Pealkirja väli on nõutud.",
	"Link must be a valid URL": "Link peab olema kehtiv URL",
	Recommended: Recommended$m,
	All: All$m,
	Data: Data$m,
	Software: Software$m,
	"License title": "Litsentsi pealkiri",
	Link: Link$m,
	"License link": "Litsentsi link",
	"Add license": "Lisa litsents",
	"Change license": "Muuda litsentsi",
	"You don't have permissions to create a new version.": "Sul ei ole õigusi uue versiooni loomiseks.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "Kui sinu üleslaetav fail on juba kuskil avaldatud, palun kasuta esimese avaldamise kuupäeva. Formaat: AAAA-KK-PP, AAAA-KK või AAAA. Intervallide jaoks kasuta KUUPÄEV/KUUPÄEV, nt 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "AAAA-KK-PP või AAAA-KK-PP/AAAA-KK-PP intervallide jaoks. KK ja PP on valikulised.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "Tsiteeringu formuleerimiseks kasutatakse kirjastajat, seega arvesta rolli esiletõstmisega.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "Täpsusta seotud tööde identifikaatoreid. Toetatud idendifikaatorid on DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URN ja URL.",
	"Add related work": "Lisa seotud tööd",
	Relation: Relation$m,
	"Select relation...": "Vali seotus...",
	"Save draft": "Salvesta mustand",
	"Suggest from": "Soovita",
	Subjects: Subjects$m,
	"Search for a subject by name": "Otsi teemat nime järgi",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Peamiselt oluline tarkvara ja andmekogumite üleslaadimise jaoks. Semantiline versioonimine on eelistatud, vaata<1>semver.org</1>, kuid vastuvõetavad on ka muud versioonistringid.",
	"Do you already have a {{pidLabel}} for this upload?": "Kas sul on juba {{pidLabel}} selle üleslaadimise jaoks?",
	Yes: Yes$m,
	No: No$m,
	"e.g. ROR, ISNI or GND.": "nt ROR, ISNI või GND.",
	"The following files already exist": "Järgnevad failid on juba olemas",
	"Disable files for this record": "Keela failid selle kirje puhul",
	DOI: DOI$m,
	Search: Search$m,
	"Search or create subjects...": "Otsi või loo teemasid...",
	"Edit creator": "Muuda loojat",
	"Add {{mode}} license": "Lisa {{mode}} litsents",
	"Change {{mode}} license": "Muuda {{mode}} litsentsi",
	"My communities": "Minu grupid",
	"Search in all communities": "Otsi kõikidest gruppidest",
	"Search in my communities": "Otsi minu gruppidest",
	"Search for persons by name, identifier, or affiliation...": "Otsi isikuid nime, identifikaatori või seose järgi...",
	"Select a community": "Vali grupp",
	"Submit review": "Lisa arvustus",
	Publish: Publish$m,
	"Are you sure you want to publish this record?": "Kas oled kindel, et soovid selle kirje avaldada?",
	"The draft was not published. Record saved with validation errors:": "Mustandit ei avaldatud. Kirje salvestati valideerimise vigadega:",
	"The draft was not submitted for review. Record saved with validation errors:": "Mustandit ei saadetud ülevaatamisele. Kirje salvestati valideerimise vigadega:",
	"In review": "Ülevaatamisel",
	"Community curators will review your upload. Once accepted, it will be published.": "Grupi kuraatorid vaatavad sinu poolt üles laaditu üle. Kui kõik sobib, siis see avaldatakse.",
	Declined: Declined$m,
	"The request to submit this upload to the community was declined.": "Taotlus lisada sinu poolt üles laaditu gruppi lükati tagasi.",
	Expired: Expired$m,
	"The request to submit this upload to the community has expired.": "Taotlus lisada sinu poolt üles laaditu gruppi on aegunud.",
	Published: Published$m,
	"Your upload is published.": "Sinu poolt üles laaditu on avaldatud.",
	Draft: Draft$m,
	"Once your upload is complete, you can submit it for review to the community curators.": "Kui üles laadimine on valmis, saad selle saata grupi kuraatoritele üle vaatamiseks.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "Kui üles laadimine on valmis, saad selle avaldada või saata selle grupi kuraatoritele üle vaatamiseks.",
	"New version draft": "Uue versiooni mustand",
	"Once your upload is complete, you can publish it.": "Kui üles laadimine on valmis, saad selle avaldada.",
	"View request": "Vaata taotlust",
	"Submitted for review": "Ülevaatamisele saadetud",
	"Change community": "Muuda gruppi",
	"Publish without community": "Avalda ilma grupita",
	"Select the community where you want to submit your record.": "Vali grupp, kuhu tahad oma kirje lisada.",
	"View community": "Vaata gruppi",
	"Opens in new tab": "Avaneb uues sakis",
	Selected: Selected$m,
	Select: Select$m,
	"Select ": "Vali",
	Change: Change$m,
	"Search for a funder by name": "Otsi rahastajat nime järgi",
	Funder: Funder$m,
	"Search for funder...": "Otsi rahastajat...",
	"Award information": "Grandi info",
	"Number": "Number",
	"Award number": "Grandi number",
	"Award Title": "Grandi pealkiri",
	URL: URL$m,
	"Award URL": "Grandi URL",
	"Add standard award": "Lisage standardauhind",
	"Add custom award": "Lisa kohandatud autasu",
	"Change award": "Muuda autasu",
	"Did not find your award? ": "Ei leidnud oma autasu?",
	"Add a custom award.": "Lisa kohandatud autasu.",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "Kui kirje on avaldatud, ei ole võimalik enam selle faile muuta! Saad aga hiljem kirje metaandmeid uuendada.",
	"Submit for review": "Saada ülevaatamisele",
	optional: optional$m,
	"Open external link": "Ava väline link",
	"Search for awards": "Otsi autasusid",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "Kirje on avalikult kättesaadav. Failidele pääsevad ligi <1>ainult</1> <4>määratud kasutajad</4>.",
	Format: Format$m,
	"The files of this record are restricted.": "Selle kirje failid on piiratud.",
	"Remove field": "Eemalda väli",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "Kas te ei leidnud teile sobivat kogukonda? Laadige üles ilma kogukonnata või<2> looge oma</2>.",
	"Given names": "Antud nimed",
	"Couldn't find your person? You can <2>create a new entry</2>.": "Kas te ei leidnud oma inimest? Saate <2>luua uue kirje</2>.",
	"Drag and drop files": "tõmmake ja pange failid",
	"Default preview": "Vaikimisi eelvaade",
	"Delete file": "Kustuta fail",
	"This is a Metadata-only record.": "See on ainult metaandmeid sisaldav kirje.",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "Oops! Midagi läks valesti! Failide importimine eelmisest versioonist ebaõnnestus. Palun proovi uuesti. Kui probleem püsib, võtke ühendust kasutajatoega.",
	"Funder is required.": "Rahastaja on vajalik.",
	"Title must be set alongside number.": "Pealkiri tuleb määrata numbri kõrvale.",
	"Number must be set alongside title.": "Pealkirja kõrvale tuleb määrata number.",
	"URL must be valid.": "URL peab olema kehtiv.",
	"URL must be set alongside title and number.": "URL tuleb määrata pealkirja ja numbri kõrvale.",
	Identifiers: Identifiers$m,
	"You must accept this.": "Peate sellega leppima.",
	"Before requesting review please read and check the following:": "Enne ülevaatuse taotlemist lugege läbi ja kontrollige järgmist.",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "Grupi '{{communityTitle}}' kuraatoritel on ligipääsuõiguse, et\n                 <bold>vaadata</bold> ja <bold>muuta</bold> sinu\n                 üles laaditud faile ja nende metaandmeid.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": "Kui kogukonna kuraatorid nõustuvad teie üleslaadimisega, <bold>avaldatakse see kohe</bold>. Enne seda saate siiski selle üleslaadimise metaandmeid ja faile muuta."
};

var Public$l = "";
var Restricted$l = "";
var Reason$l = "";
var Options$l = "";
var Type$l = "";
var Language$l = "";
var Affiliations$l = "";
var Edit$l = "";
var Remove$l = "";
var Added$l = "";
var Person$l = "";
var Organization$l = "";
var Name$l = "";
var Role$l = "";
var Cancel$l = "";
var Save$l = "";
var Description$l = "";
var Dates$l = "";
var Preview$l = "";
var Filename$l = "";
var Size$l = "";
var Progress$l = "";
var Pending$l = "";
var or$l = "";
var Files$l = "";
var Title$l = "";
var Creators$l = "";
var Contributors$l = "";
var Licenses$l = "";
var Languages$l = "";
var Version$l = "";
var Publisher$l = "";
var Identifier$l = "";
var Scheme$l = "";
var Recommended$l = "";
var All$l = "";
var Data$l = "";
var Software$l = "";
var Link$l = "";
var Relation$l = "";
var Subjects$l = "";
var Yes$l = "";
var No$l = "";
var DOI$l = "";
var Search$l = "";
var Publish$l = "";
var Declined$l = "";
var Expired$l = "";
var Published$l = "";
var Draft$l = "";
var Selected$l = "";
var Select$l = "";
var Change$l = "";
var Funder$l = "";
var URL$l = "";
var optional$l = "";
var Format$l = "";
var Identifiers$l = "";
var TRANSLATE_ET_EE = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$l,
	Restricted: Restricted$l,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$l,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$l,
	"Add description": "",
	"Additional Description": "",
	Type: Type$l,
	Language: Language$l,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$l,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$l,
	Remove: Remove$l,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$l,
	Person: Person$l,
	Organization: Organization$l,
	"Family name": "",
	Name: Name$l,
	"Organization name": "",
	Role: Role$l,
	"Select role": "",
	Cancel: Cancel$l,
	Save: Save$l,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$l,
	Dates: Dates$l,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$l,
	Filename: Filename$l,
	Size: Size$l,
	Progress: Progress$l,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$l,
	or: or$l,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$l,
	"Resource type": "",
	Title: Title$l,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$l,
	Contributors: Contributors$l,
	"Additional descriptions": "",
	Licenses: Licenses$l,
	Languages: Languages$l,
	Version: Version$l,
	Publisher: Publisher$l,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$l,
	Scheme: Scheme$l,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$l,
	All: All$l,
	Data: Data$l,
	Software: Software$l,
	"License title": "",
	Link: Link$l,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$l,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$l,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$l,
	No: No$l,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$l,
	Search: Search$l,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$l,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$l,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$l,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$l,
	"Your upload is published.": "",
	Draft: Draft$l,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$l,
	Select: Select$l,
	"Select ": "",
	Change: Change$l,
	"Search for a funder by name": "",
	Funder: Funder$l,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$l,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$l,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$l,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$l,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$k = "";
var Restricted$k = "";
var Reason$k = "";
var Options$k = "";
var Type$k = "";
var Language$k = "";
var Affiliations$k = "وابستگی ها";
var Edit$k = "ویرایش";
var Remove$k = "حذف کردن";
var Added$k = "";
var Person$k = "";
var Organization$k = "";
var Name$k = "نام";
var Role$k = "";
var Cancel$k = "لغو";
var Save$k = "";
var Description$k = "توصیف";
var Dates$k = "";
var Preview$k = "";
var Filename$k = "";
var Size$k = "";
var Progress$k = "پیشرفت";
var Pending$k = "";
var or$k = "یا";
var Files$k = "";
var Title$k = "عنوان";
var Creators$k = "";
var Contributors$k = "";
var Licenses$k = "";
var Languages$k = "";
var Version$k = "";
var Publisher$k = "";
var Identifier$k = "";
var Scheme$k = "";
var Recommended$k = "";
var All$k = "";
var Data$k = "";
var Software$k = "";
var Link$k = "";
var Relation$k = "";
var Subjects$k = "";
var Yes$k = "بله";
var No$k = "نه";
var DOI$k = "";
var Search$k = "جستجو";
var Publish$k = "منتشر کردن";
var Declined$k = "";
var Expired$k = "";
var Published$k = "";
var Draft$k = "";
var Selected$k = "";
var Select$k = "انتخاب";
var Change$k = "";
var Funder$k = "";
var URL$k = "";
var optional$k = "انتخابی";
var Format$k = "";
var Identifiers$k = "";
var TRANSLATE_FA = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$k,
	Restricted: Restricted$k,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$k,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$k,
	"Add description": "",
	"Additional Description": "",
	Type: Type$k,
	Language: Language$k,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$k,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$k,
	Remove: Remove$k,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$k,
	Person: Person$k,
	Organization: Organization$k,
	"Family name": "",
	Name: Name$k,
	"Organization name": "",
	Role: Role$k,
	"Select role": "",
	Cancel: Cancel$k,
	Save: Save$k,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "تاریخ",
	Description: Description$k,
	Dates: Dates$k,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "حذف",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$k,
	Filename: Filename$k,
	Size: Size$k,
	Progress: Progress$k,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$k,
	or: or$k,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$k,
	"Resource type": "",
	Title: Title$k,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$k,
	Contributors: Contributors$k,
	"Additional descriptions": "",
	Licenses: Licenses$k,
	Languages: Languages$k,
	Version: Version$k,
	Publisher: Publisher$k,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$k,
	Scheme: Scheme$k,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$k,
	All: All$k,
	Data: Data$k,
	Software: Software$k,
	"License title": "",
	Link: Link$k,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$k,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$k,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$k,
	No: No$k,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$k,
	Search: Search$k,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$k,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$k,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$k,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$k,
	"Your upload is published.": "",
	Draft: Draft$k,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$k,
	Select: Select$k,
	"Select ": "",
	Change: Change$k,
	"Search for a funder by name": "",
	Funder: Funder$k,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$k,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$k,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$k,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$k,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$j = "Public";
var Restricted$j = "Restreint";
var Reason$j = "";
var Options$j = "Options";
var Type$j = "Type";
var Language$j = "";
var Affiliations$j = "Affiliations";
var Edit$j = "Éditer";
var Remove$j = "Supprimer";
var Added$j = "";
var Person$j = "";
var Organization$j = "";
var Name$j = "Nom";
var Role$j = "";
var Cancel$j = "Annuler";
var Save$j = "Enregistrer";
var Description$j = "Description";
var Dates$j = "";
var Preview$j = "";
var Filename$j = "";
var Size$j = "Taille";
var Progress$j = "Progression";
var Pending$j = "En attente";
var or$j = "ou";
var Files$j = "Fichiers";
var Title$j = "Titre";
var Creators$j = "";
var Contributors$j = "";
var Licenses$j = "";
var Languages$j = "";
var Version$j = "Version";
var Publisher$j = "Éditeur";
var Identifier$j = "Identifiant";
var Scheme$j = "";
var Recommended$j = "";
var All$j = "Tout";
var Data$j = "Données";
var Software$j = "";
var Link$j = "";
var Relation$j = "";
var Subjects$j = "";
var Yes$j = "Oui";
var No$j = "Non";
var DOI$j = "";
var Search$j = "Recherche";
var Publish$j = "Publier";
var Declined$j = "";
var Expired$j = "";
var Published$j = "Publié";
var Draft$j = "";
var Selected$j = "";
var Select$j = "Choisir";
var Change$j = "";
var Funder$j = "";
var URL$j = "URL";
var optional$j = "optionnel";
var Format$j = "";
var Identifiers$j = "";
var TRANSLATE_FR = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$j,
	Restricted: Restricted$j,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$j,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$j,
	"Add description": "",
	"Additional Description": "",
	Type: Type$j,
	Language: Language$j,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$j,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$j,
	Remove: Remove$j,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$j,
	Person: Person$j,
	Organization: Organization$j,
	"Family name": "",
	Name: Name$j,
	"Organization name": "",
	Role: Role$j,
	"Select role": "",
	Cancel: Cancel$j,
	Save: Save$j,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Date",
	Description: Description$j,
	Dates: Dates$j,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "Supprimer",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$j,
	Filename: Filename$j,
	Size: Size$j,
	Progress: Progress$j,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$j,
	or: or$j,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$j,
	"Resource type": "",
	Title: Title$j,
	"Additional titles": "",
	"Publication date": "Date de publication",
	Creators: Creators$j,
	Contributors: Contributors$j,
	"Additional descriptions": "",
	Licenses: Licenses$j,
	Languages: Languages$j,
	Version: Version$j,
	Publisher: Publisher$j,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$j,
	Scheme: Scheme$j,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "En savoir plus",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$j,
	All: All$j,
	Data: Data$j,
	Software: Software$j,
	"License title": "",
	Link: Link$j,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$j,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$j,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$j,
	No: No$j,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$j,
	Search: Search$j,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Mes communautés",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$j,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$j,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$j,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$j,
	"Your upload is published.": "",
	Draft: Draft$j,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$j,
	Select: Select$j,
	"Select ": "",
	Change: Change$j,
	"Search for a funder by name": "",
	Funder: Funder$j,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$j,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$j,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$j,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$j,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$i = "";
var Restricted$i = "";
var Reason$i = "";
var Options$i = "";
var Type$i = "";
var Language$i = "";
var Affiliations$i = "";
var Edit$i = "";
var Remove$i = "";
var Added$i = "";
var Person$i = "";
var Organization$i = "";
var Name$i = "";
var Role$i = "";
var Cancel$i = "";
var Save$i = "";
var Description$i = "";
var Dates$i = "";
var Preview$i = "";
var Filename$i = "";
var Size$i = "";
var Progress$i = "";
var Pending$i = "";
var or$i = "";
var Files$i = "";
var Title$i = "";
var Creators$i = "";
var Contributors$i = "";
var Licenses$i = "";
var Languages$i = "";
var Version$i = "";
var Publisher$i = "";
var Identifier$i = "";
var Scheme$i = "";
var Recommended$i = "";
var All$i = "";
var Data$i = "";
var Software$i = "";
var Link$i = "";
var Relation$i = "";
var Subjects$i = "";
var Yes$i = "";
var No$i = "";
var DOI$i = "";
var Search$i = "";
var Publish$i = "";
var Declined$i = "";
var Expired$i = "";
var Published$i = "";
var Draft$i = "";
var Selected$i = "";
var Select$i = "";
var Change$i = "";
var Funder$i = "";
var URL$i = "";
var optional$i = "";
var Format$i = "";
var Identifiers$i = "";
var TRANSLATE_GL = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$i,
	Restricted: Restricted$i,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$i,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$i,
	"Add description": "",
	"Additional Description": "",
	Type: Type$i,
	Language: Language$i,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$i,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$i,
	Remove: Remove$i,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$i,
	Person: Person$i,
	Organization: Organization$i,
	"Family name": "",
	Name: Name$i,
	"Organization name": "",
	Role: Role$i,
	"Select role": "",
	Cancel: Cancel$i,
	Save: Save$i,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$i,
	Dates: Dates$i,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$i,
	Filename: Filename$i,
	Size: Size$i,
	Progress: Progress$i,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$i,
	or: or$i,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$i,
	"Resource type": "",
	Title: Title$i,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$i,
	Contributors: Contributors$i,
	"Additional descriptions": "",
	Licenses: Licenses$i,
	Languages: Languages$i,
	Version: Version$i,
	Publisher: Publisher$i,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$i,
	Scheme: Scheme$i,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$i,
	All: All$i,
	Data: Data$i,
	Software: Software$i,
	"License title": "",
	Link: Link$i,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$i,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$i,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$i,
	No: No$i,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$i,
	Search: Search$i,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$i,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$i,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$i,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$i,
	"Your upload is published.": "",
	Draft: Draft$i,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$i,
	Select: Select$i,
	"Select ": "",
	Change: Change$i,
	"Search for a funder by name": "",
	Funder: Funder$i,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$i,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$i,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$i,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$i,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$h = "";
var Restricted$h = "";
var Reason$h = "";
var Options$h = "";
var Type$h = "";
var Language$h = "";
var Affiliations$h = "";
var Edit$h = "Uredi";
var Remove$h = "Ukloni";
var Added$h = "";
var Person$h = "";
var Organization$h = "";
var Name$h = "Ime";
var Role$h = "";
var Cancel$h = "Odustani";
var Save$h = "Spremi";
var Description$h = "Opis";
var Dates$h = "";
var Preview$h = "";
var Filename$h = "";
var Size$h = "";
var Progress$h = "";
var Pending$h = "U tijeku";
var or$h = "ili";
var Files$h = "";
var Title$h = "Naslov";
var Creators$h = "";
var Contributors$h = "";
var Licenses$h = "";
var Languages$h = "";
var Version$h = "";
var Publisher$h = "";
var Identifier$h = "";
var Scheme$h = "";
var Recommended$h = "";
var All$h = "";
var Data$h = "";
var Software$h = "";
var Link$h = "";
var Relation$h = "";
var Subjects$h = "";
var Yes$h = "Da";
var No$h = "Ne";
var DOI$h = "";
var Search$h = "Pretraži";
var Publish$h = "";
var Declined$h = "";
var Expired$h = "";
var Published$h = "";
var Draft$h = "";
var Selected$h = "";
var Select$h = "Odaberi";
var Change$h = "";
var Funder$h = "";
var URL$h = "";
var optional$h = "neobavezno";
var Format$h = "";
var Identifiers$h = "";
var TRANSLATE_HR = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$h,
	Restricted: Restricted$h,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$h,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$h,
	"Add description": "",
	"Additional Description": "",
	Type: Type$h,
	Language: Language$h,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$h,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$h,
	Remove: Remove$h,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$h,
	Person: Person$h,
	Organization: Organization$h,
	"Family name": "",
	Name: Name$h,
	"Organization name": "",
	Role: Role$h,
	"Select role": "",
	Cancel: Cancel$h,
	Save: Save$h,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Datum",
	Description: Description$h,
	Dates: Dates$h,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$h,
	Filename: Filename$h,
	Size: Size$h,
	Progress: Progress$h,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$h,
	or: or$h,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$h,
	"Resource type": "",
	Title: Title$h,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$h,
	Contributors: Contributors$h,
	"Additional descriptions": "",
	Licenses: Licenses$h,
	Languages: Languages$h,
	Version: Version$h,
	Publisher: Publisher$h,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$h,
	Scheme: Scheme$h,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$h,
	All: All$h,
	Data: Data$h,
	Software: Software$h,
	"License title": "",
	Link: Link$h,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$h,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$h,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$h,
	No: No$h,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$h,
	Search: Search$h,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$h,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$h,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$h,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$h,
	"Your upload is published.": "",
	Draft: Draft$h,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$h,
	Select: Select$h,
	"Select ": "",
	Change: Change$h,
	"Search for a funder by name": "",
	Funder: Funder$h,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$h,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$h,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$h,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$h,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$g = "Nyilvános";
var Restricted$g = "Korlátozott hozzáférés";
var Reason$g = "Indoklás";
var Options$g = "Lehetőségek";
var Type$g = "Típus";
var Language$g = "Nyelv";
var Affiliations$g = "Affiliációk";
var Edit$g = "Szerkesztés";
var Remove$g = "Törlés";
var Added$g = "Hozzáadva";
var Person$g = "Személy";
var Organization$g = "Szervezet";
var Name$g = "Név";
var Role$g = "Szerepkör";
var Cancel$g = "Mégsem";
var Save$g = "Mentés";
var Description$g = "Leírás";
var Dates$g = "Dátumok";
var Preview$g = "Előnézet";
var Filename$g = "Fájlnév";
var Size$g = "Méret";
var Progress$g = "Előrehaladás";
var Pending$g = "Függőben";
var or$g = "vagy";
var Files$g = "Fájlok";
var Title$g = "Cím";
var Creators$g = "Készítők";
var Contributors$g = "Közreműködők";
var Licenses$g = "Licenszek";
var Languages$g = "Nyelvek";
var Version$g = "Verzió";
var Publisher$g = "Kiadó";
var Identifier$g = "Azonosító";
var Scheme$g = "Séma";
var Recommended$g = "Ajánlott";
var All$g = "Összes";
var Data$g = "Adat";
var Software$g = "Szoftver";
var Link$g = "Link";
var Relation$g = "Reláció";
var Subjects$g = "Témák";
var Yes$g = "Igen";
var No$g = "Nem";
var DOI$g = "DOI";
var Search$g = "Keresés";
var Publish$g = "Közzététel";
var Declined$g = "Elutasítva";
var Expired$g = "Lejárt";
var Published$g = "Publikálva";
var Draft$g = "Piszkozat";
var Selected$g = "Kiválasztva";
var Select$g = "Kiválasztás";
var Change$g = "Módosítás";
var Funder$g = "Finanszírozó";
var URL$g = "URL";
var optional$g = "opcionális";
var Format$g = "Formátum";
var Identifiers$g = "Azonosítók";
var TRANSLATE_HU = {
	"Embargo until": "Zárolás eddig:",
	"YYYY-MM-DD": "YYYY-MM-DD",
	"The full record is restricted.": "A teljes rekord korlátozott hozzáférésű.",
	"Embargoed (full record)": "Zárolva (teljes rekord)",
	"Embargoed (files-only)": "Zárolva (csak fájlok)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "A rekord nyilbánosan elérhető. <bold>{{date}}</bold> naptól a fájlok automatikusan nyilvánosan elérhetők lesznek. Addig a fájlokhoz <bold>csak</bold> az engedélyeknél <bold>meghatározott felhasználók</bold> férhetnek hozzá.",
	"The record has no files.": "A rekordhoz nem tartoznak fájlok. ",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "<bold>{{date}}</bold> naptól a rekord automatikusan nyilvánosan elérhető lesz. Addig a rekordhoz <bold>csak</bold> az engedélyeknél <bold>meghatározott felhasználók</bold> férhetnek hozzá.",
	Public: Public$g,
	Restricted: Restricted$g,
	"The record and files are publicly accessible.": "A rekord és a fájlok nyilvánosan elérhetőek.",
	"The record is publicly accessible.": "A rekord nyilvánosan elérhető.",
	"Public with restricted files": "Nyilvánosan elérhető, korlátozott hozzáférésű fájlokkal",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "A rekordhoz <1>csak</1> az engedélyeknél <3>meghatározott felhasználók</3> férhetnek hozzá.",
	"Full record": "Teljes rekord",
	"Files only": "Csak fájlok",
	"Apply an embargo": "Zárolás alkalmazása",
	"Embargo reason": "Zárolás oka",
	"Optionally, describe the reason for the embargo.": "Opcionálisan adja meg a zárolás okát.",
	"Embargo was lifted on {{fmtDate}}.": "Zárolás feloldva ekkor: {{fmtDate}}",
	Reason: Reason$g,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "A zároláshoz <1>korlátozni</1> kell a rekordok vagy fájlok védelmét.",
	Options: Options$g,
	"Add description": "Leírás hozzáadása",
	"Additional Description": "További leírás",
	Type: Type$g,
	Language: Language$g,
	"Select language": "Nyelv kiválasztása",
	"Add titles": "Címek hozzáadása",
	"Search or create affiliation'": "Affiliáció keresése vagy létrehozása",
	Affiliations: Affiliations$g,
	"Search for affiliations..": "Keresés affiliáció szerint",
	"Add creator": "Létrehozó hozzáadása",
	Edit: Edit$g,
	Remove: Remove$g,
	"Name identifiers": "Névazonosítók",
	"e.g. ORCID, ISNI or GND.": "pl. ORCID, ISNI vagy GND.",
	"Type the value of an identifier...": "Írja be egy azonosító értékét...",
	"Save and add another": "Mentés és új hozzáadása",
	"Family name is a required field.": "A családnév megadása kötelező.",
	"Name is a required field.": "A név megadása kötelező.",
	"Role is a required field.": "A szerepkör megadása kötelező.",
	Added: Added$g,
	Person: Person$g,
	Organization: Organization$g,
	"Family name": "Családnév",
	Name: Name$g,
	"Organization name": "Szervezet neve",
	Role: Role$g,
	"Select role": "Szerepkör kiválasztása",
	Cancel: Cancel$g,
	Save: Save$g,
	"Add date": "Dátum hozzáadása",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Formátum: DÁTUM vagy DÁTUM/DÁTUM, ahol a DÁTUM ÉÉÉÉ vagy ÉÉÉÉ-HH vagy ÉÉÉÉ-HH-NN.",
	"Date": "Dátum",
	Description: Description$g,
	Dates: Dates$g,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "YYYY-MM-DD vagy YYYY-MM-DD/YYYY-MM-DD",
	"discard changes": "változtatások elvetése",
	"discard version": "verzió elvetése",
	"delete": "törlés",
	"Are you sure you want to discard the changes to this draft?": "Biztosan elveti a piszkozat változtatásait?",
	"Are you sure you want to delete this new version?": "Biztosan törli ezt az új verziót?",
	"Are you sure you want to delete this draft?": "Biztosan törli a piszkozatot?",
	"New version": "Új verzió",
	"New upload": "Új feltöltés",
	"Edit upload": "Feltöltés szerkesztése",
	"Uploading the selected files would result in": "A kiválasztott fájlok feltöltése ezt eredményezheti:",
	"but the limit is": "de a limit",
	"You can import files from the previous version.": "Importálhat fájlokat az előző verzióból.",
	"File addition, removal or modification are not allowed after you have published your upload.": "A feltöltés közzététele után nem engedélyezett a fájlok hozzáadása, eltávolítása vagy módosítása.",
	"You must create a new version to add, modify or delete files.": "Fájlok hozzáadásához, módosításához vagy törléséhez új verziót kell létrehoznia.",
	"Upload files": "Fájlok feltöltése",
	"Import files": "Fájlok importálása",
	Preview: Preview$g,
	Filename: Filename$g,
	Size: Size$g,
	Progress: Progress$g,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "Ez a fájl ujjlenyomata (MD5 ellenőrző összeg), amely a fájl integritásának ellenőrzésére használható.",
	Pending: Pending$g,
	or: or$g,
	"Metadata-only record": "Csak metaadatot tartalmazó rekord",
	"Storage available": "Készlet elérhető",
	"{{length}} out of {{maxfiles}} files": "{{length}} {{maxfiles}} fájlból",
	"out of": "ennyiből:",
	Files: Files$g,
	"Resource type": "Forrástípus",
	Title: Title$g,
	"Additional titles": "További címek",
	"Publication date": "Publikálás dátuma",
	Creators: Creators$g,
	Contributors: Contributors$g,
	"Additional descriptions": "További leírások",
	Licenses: Licenses$g,
	Languages: Languages$g,
	Version: Version$g,
	Publisher: Publisher$g,
	"Related works": "Kapcsolódó munkák",
	"Alternate identifiers": "Alternatív azonosítók",
	"Record successfully saved.": "A rekordot sikeresen mentettük.",
	"Record saved with validation errors:": "A rekordot validálási hibákkal mentettük:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! Nem sikerült menteni a piszkozatot. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! A piszkozat nem lett közzétéve. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! A piszkozat nem lett bírálatra benyújtva. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! A piszkozat nem lett törölve. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! Nem sikerült megnyitni a piszkozat előnézetét. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! Az azonosító nem lett lefoglalva. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! Az azonosító nem lett elvetve. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! Nem sikerült menteni a piszkozatot a fájl feltöltése előtt. Kérjük, próbálja újra! Ha a probléma továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Add award": "Díj hozzáadása",
	"Add identifier": "Azonosító hozzáadása",
	Identifier: Identifier$g,
	Scheme: Scheme$g,
	"Search for languages...": "Nyelvek keresése...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Nyelv keresése név szerint (pl. \"eng\", \"fr\", \"lengyel\")",
	"Add standard": "Szabvány hozzáadása",
	"Add custom": "Egyéni hozzáadás",
	"Read more": "Tudjon meg többet!",
	"Title is a required field.": "A cím megadása kötelező.",
	"Link must be a valid URL": "A linknek érvényes URL-nek kell lennie",
	Recommended: Recommended$g,
	All: All$g,
	Data: Data$g,
	Software: Software$g,
	"License title": "Licensz címe",
	Link: Link$g,
	"License link": "Licensz link",
	"Add license": "Licensz hozzáadása",
	"Change license": "Licensz cseréje",
	"You don't have permissions to create a new version.": "Önnek nincs jogosultsága új verziót létrehozni.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "Abban az esetben, ha a feltöltést már közzétették máshol, kérjük, használja az első közzététel dátumát. Formátum: ÉÉÉÉ-HH-NN, ÉÉÉÉ-HH vagy ÉÉÉÉ. Az intervallumokhoz használja a DÁTUM/DÁTUM értéket, pl. 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "ÉÉÉÉ-HH-NN vagy ÉÉÉÉ-HH-NN/ÉÉÉÉ-HH-NN intervallumokhoz. HH és NN opcionális.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "Adja meg a kapcsolódó művek azonosítóit! Támogatott azonosítók: DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS bibliográfiai kód, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URN és URL.",
	"Add related work": "Kapcsolódó munka hozzáadása",
	Relation: Relation$g,
	"Select relation...": "Reláció kiválasztása...",
	"Save draft": "Piszkozat mentése",
	"Suggest from": "Javaslat innen:",
	Subjects: Subjects$g,
	"Search for a subject by name": "Téma keresése név szerint",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Leginkább a szoftverek és adatkészletek feltöltésére vonatkozik. A szemantikus verziójú karakterláncok előnyben részesítettek, lásd a <1>semver.org</1> oldalt, de bármilyen verziójú karakterlánc elfogadható.",
	"Do you already have a {{pidLabel}} for this upload?": "Már van {{pidLabel}} ehhez a feltöltéshez?",
	Yes: Yes$g,
	No: No$g,
	"e.g. ROR, ISNI or GND.": "pl. ROR, ISNI vagy GND.",
	"The following files already exist": "A következő fájlok már léteznek",
	"Disable files for this record": "Fájlok letiltása ehhez a rekordhoz",
	DOI: DOI$g,
	Search: Search$g,
	"Search or create subjects...": "Témák keresése vagy létrehozása...",
	"Edit creator": "Létrehozó szerkesztése",
	"Add {{mode}} license": "{{mode}} licensz hozzáadása",
	"Change {{mode}} license": "{{mode}} licensz cseréje",
	"My communities": "Közösségeim",
	"Search in all communities": "Keresés az összes közösségben",
	"Search in my communities": "Keresés a saját közösségeimben",
	"Search for persons by name, identifier, or affiliation...": "Emberek keresése név, azonosító vagy affiliáció szerint...",
	"Select a community": "Közösség kiválasztása",
	"Submit review": "Bírálat beküldése",
	Publish: Publish$g,
	"Are you sure you want to publish this record?": "Biztosan közzé akarja tenni ezt a rekordot?",
	"The draft was not published. Record saved with validation errors:": "A piszkozatot nem tettük közzé. A rekordot validálási hibákkal mentettük:",
	"The draft was not submitted for review. Record saved with validation errors:": "A vázlat nem lett bírálatra benyújtva. A rekordot érvényesítési hibákkal mentettük: ",
	"In review": "Bírálás alatt",
	"Community curators will review your upload. Once accepted, it will be published.": "A közösségi bírálók elbírálják az ön feltöltését. Ha elfogadták, publikálásra fog kerülni.",
	Declined: Declined$g,
	"The request to submit this upload to the community was declined.": "A feltöltés benyújtási kérelmét elutasították.",
	Expired: Expired$g,
	"The request to submit this upload to the community has expired.": "A feltöltés benyújtási kérelme lejárt.",
	Published: Published$g,
	"Your upload is published.": "A feltöltését közzétettük.",
	Draft: Draft$g,
	"Once your upload is complete, you can submit it for review to the community curators.": "A feltöltés befejezése után beadhatja bírálatra a dokumentumot.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "A feltöltés befejezése után közzéteheti a dokumentumot, vagy beadhatja bírálatra.",
	"New version draft": "Piszkozat új verzióhoz",
	"Once your upload is complete, you can publish it.": "A feltöltés befejezése után közzéteheti a dokumentumot.",
	"View request": "Kérés megtekintése",
	"Submitted for review": "Bírálatra benyújtva",
	"Change community": "Váltás másik közösségre",
	"Publish without community": "Közzététel közösség nélkül",
	"Select the community where you want to submit your record.": "Válassza ki a közösséget, ahova be szeretné nyújtani a rekordot!",
	"View community": "Közösség megtekintése",
	"Opens in new tab": "Új lapon nyílik meg",
	Selected: Selected$g,
	Select: Select$g,
	"Select ": "Kiválasztás",
	Change: Change$g,
	"Search for a funder by name": "Finanszírozó keresése név szerint",
	Funder: Funder$g,
	"Search for funder...": "Finanszírozó keresése...",
	"Award information": "Díj információ",
	"Number": "Szám",
	"Award number": "Díj száma",
	"Award Title": "Díj címe",
	URL: URL$g,
	"Award URL": "Díj URL",
	"Add standard award": "Standard díj hozzáadása",
	"Add custom award": "Egyéni díj hozzáadása",
	"Change award": "Díj módosítása",
	"Did not find your award? ": "Nem találja a díját?",
	"Add a custom award.": "Egyéni díj hozzáadása",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "A rekord közzététele után nem módosíthatja a feltöltött fájlokat! A rekord metaadatait később is módosíthatja.",
	"Submit for review": "Benyújtás bírálatra",
	optional: optional$g,
	"Open external link": "Külső link megnyitása",
	"Search for awards": "Díjak keresése",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "A rekord nyilvánosan elérhető. A fájlokat <1>csak</1> az engedélyeknél <4>meghatározott felhasználók</4> érhetik el.",
	Format: Format$g,
	"The files of this record are restricted.": "A rekordhoz tartozó fájlok korlátozott hozzáférésűek.",
	"Remove field": "Mező eltávolítása",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "Nem talált önnek megfelelő közösséget? Töltsön fel fájlokat közösség nélkül, vagy <2>hozza létre a saját közösségét!</2>",
	"Given names": "Keresztnevek",
	"Couldn't find your person? You can <2>create a new entry</2>.": "Nem találja, akit keresett? Létrehozhat <2>új bejegyzést</2>.",
	"Drag and drop files": "Húzza ide a fájlokat",
	"Default preview": "Alapértelmezett előnézet",
	"Delete file": "Fájl törlése",
	"This is a Metadata-only record.": "Ez egy csak-metaadat rekord.",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "Ajaj, valami hiba történt! A fájlok importálása az előző verzióból sikertelen. Kérjük, próbálja újra! Ha a hiba továbbra is fennáll, forduljon az ügyfélszolgálathoz!",
	"Funder is required.": "A finanszírozó megadása kötelező.",
	"Title must be set alongside number.": "A címet a szám mellett kell megadni.",
	"Number must be set alongside title.": "A számot a cím mellett kell megadni.",
	"URL must be valid.": "Az URL-nek érvényesnek kell lennie.",
	"URL must be set alongside title and number.": "Az URL-t a cím és a szám mellett kell megadni.",
	Identifiers: Identifiers$g,
	"You must accept this.": "El kell fogadnia ezt.",
	"Before requesting review please read and check the following:": "Mielőtt bírálatot kér, kérjük, olvassa el és ellenőrizze a következőket:",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "A(z) '{{communityTitle}}' közösség bírálói hozzáférést kapnak, hogy <bold>megtekintsék </bold> és <bold>szerkesszék</bold> az ön feltöltésének metaadatait és fájljait.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$f = "Publico";
var Restricted$f = "Limitato";
var Reason$f = "";
var Options$f = "Opzioni";
var Type$f = "Tipo";
var Language$f = "";
var Affiliations$f = "Affiliazioni";
var Edit$f = "Modifica";
var Remove$f = "Rimuovi";
var Added$f = "";
var Person$f = "";
var Organization$f = "";
var Name$f = "Nome";
var Role$f = "";
var Cancel$f = "Annulla";
var Save$f = "Memorizza";
var Description$f = "Descrizione";
var Dates$f = "";
var Preview$f = "";
var Filename$f = "";
var Size$f = "Dimensione";
var Progress$f = "Avanzamento";
var Pending$f = "In sospeso";
var or$f = "o";
var Files$f = "File";
var Title$f = "Titolo";
var Creators$f = "";
var Contributors$f = "";
var Licenses$f = "";
var Languages$f = "";
var Version$f = "Versione";
var Publisher$f = "Editore";
var Identifier$f = "Identificatore";
var Scheme$f = "";
var Recommended$f = "";
var All$f = "Tutto";
var Data$f = "Dati";
var Software$f = "";
var Link$f = "";
var Relation$f = "";
var Subjects$f = "";
var Yes$f = "Sì";
var No$f = "No";
var DOI$f = "";
var Search$f = "Cerca";
var Publish$f = "Pubblica";
var Declined$f = "";
var Expired$f = "";
var Published$f = "Pubblicato";
var Draft$f = "";
var Selected$f = "";
var Select$f = "Seleziona";
var Change$f = "";
var Funder$f = "";
var URL$f = "URL";
var optional$f = "facoltativo";
var Format$f = "";
var Identifiers$f = "";
var TRANSLATE_IT = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$f,
	Restricted: Restricted$f,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$f,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$f,
	"Add description": "",
	"Additional Description": "",
	Type: Type$f,
	Language: Language$f,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$f,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$f,
	Remove: Remove$f,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$f,
	Person: Person$f,
	Organization: Organization$f,
	"Family name": "",
	Name: Name$f,
	"Organization name": "",
	Role: Role$f,
	"Select role": "",
	Cancel: Cancel$f,
	Save: Save$f,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Data",
	Description: Description$f,
	Dates: Dates$f,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "cancella",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$f,
	Filename: Filename$f,
	Size: Size$f,
	Progress: Progress$f,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$f,
	or: or$f,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$f,
	"Resource type": "",
	Title: Title$f,
	"Additional titles": "",
	"Publication date": "Data di publicazione",
	Creators: Creators$f,
	Contributors: Contributors$f,
	"Additional descriptions": "",
	Licenses: Licenses$f,
	Languages: Languages$f,
	Version: Version$f,
	Publisher: Publisher$f,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$f,
	Scheme: Scheme$f,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "Per saperne di più",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$f,
	All: All$f,
	Data: Data$f,
	Software: Software$f,
	"License title": "",
	Link: Link$f,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$f,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$f,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$f,
	No: No$f,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$f,
	Search: Search$f,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Le mie comunità",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$f,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$f,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$f,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$f,
	"Your upload is published.": "",
	Draft: Draft$f,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$f,
	Select: Select$f,
	"Select ": "",
	Change: Change$f,
	"Search for a funder by name": "",
	Funder: Funder$f,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$f,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$f,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$f,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$f,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$e = "";
var Restricted$e = "";
var Reason$e = "";
var Options$e = "";
var Type$e = "";
var Language$e = "";
var Affiliations$e = "";
var Edit$e = "編集";
var Remove$e = "削除";
var Added$e = "";
var Person$e = "";
var Organization$e = "";
var Name$e = "名前";
var Role$e = "";
var Cancel$e = "キャンセル";
var Save$e = "";
var Description$e = "説明";
var Dates$e = "";
var Preview$e = "";
var Filename$e = "";
var Size$e = "";
var Progress$e = "";
var Pending$e = "ペンディング";
var or$e = "または";
var Files$e = "";
var Title$e = "タイトル";
var Creators$e = "";
var Contributors$e = "";
var Licenses$e = "";
var Languages$e = "";
var Version$e = "";
var Publisher$e = "";
var Identifier$e = "";
var Scheme$e = "";
var Recommended$e = "";
var All$e = "";
var Data$e = "";
var Software$e = "";
var Link$e = "";
var Relation$e = "";
var Subjects$e = "";
var Yes$e = "はい";
var No$e = "いいえ";
var DOI$e = "";
var Search$e = "検索";
var Publish$e = "";
var Declined$e = "";
var Expired$e = "";
var Published$e = "";
var Draft$e = "";
var Selected$e = "";
var Select$e = "選択";
var Change$e = "";
var Funder$e = "";
var URL$e = "";
var optional$e = "オプション";
var Format$e = "";
var Identifiers$e = "";
var TRANSLATE_JA = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$e,
	Restricted: Restricted$e,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$e,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$e,
	"Add description": "",
	"Additional Description": "",
	Type: Type$e,
	Language: Language$e,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$e,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$e,
	Remove: Remove$e,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$e,
	Person: Person$e,
	Organization: Organization$e,
	"Family name": "",
	Name: Name$e,
	"Organization name": "",
	Role: Role$e,
	"Select role": "",
	Cancel: Cancel$e,
	Save: Save$e,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "日付",
	Description: Description$e,
	Dates: Dates$e,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$e,
	Filename: Filename$e,
	Size: Size$e,
	Progress: Progress$e,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$e,
	or: or$e,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$e,
	"Resource type": "",
	Title: Title$e,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$e,
	Contributors: Contributors$e,
	"Additional descriptions": "",
	Licenses: Licenses$e,
	Languages: Languages$e,
	Version: Version$e,
	Publisher: Publisher$e,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$e,
	Scheme: Scheme$e,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$e,
	All: All$e,
	Data: Data$e,
	Software: Software$e,
	"License title": "",
	Link: Link$e,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$e,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$e,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$e,
	No: No$e,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$e,
	Search: Search$e,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$e,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$e,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$e,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$e,
	"Your upload is published.": "",
	Draft: Draft$e,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$e,
	Select: Select$e,
	"Select ": "",
	Change: Change$e,
	"Search for a funder by name": "",
	Funder: Funder$e,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$e,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$e,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$e,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$e,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$d = "";
var Restricted$d = "";
var Reason$d = "";
var Options$d = "პარამეტრები";
var Type$d = "ტიპი ";
var Language$d = "";
var Affiliations$d = "";
var Edit$d = "რედაქტირება";
var Remove$d = "წაშლა";
var Added$d = "";
var Person$d = "";
var Organization$d = "";
var Name$d = "სახელი";
var Role$d = "";
var Cancel$d = "გაუქმება";
var Save$d = "დამახსოვრება";
var Description$d = "აღწერა";
var Dates$d = "";
var Preview$d = "";
var Filename$d = "";
var Size$d = "";
var Progress$d = "";
var Pending$d = "რიგშია";
var or$d = "ან";
var Files$d = "";
var Title$d = "სათაური";
var Creators$d = "";
var Contributors$d = "";
var Licenses$d = "";
var Languages$d = "";
var Version$d = "";
var Publisher$d = "გამომქვეყნებელი";
var Identifier$d = "";
var Scheme$d = "";
var Recommended$d = "";
var All$d = "ყველა";
var Data$d = "";
var Software$d = "";
var Link$d = "";
var Relation$d = "";
var Subjects$d = "";
var Yes$d = "დიახ";
var No$d = "არა";
var DOI$d = "";
var Search$d = "ძებნა";
var Publish$d = "გამოქვეყნება";
var Declined$d = "";
var Expired$d = "";
var Published$d = "";
var Draft$d = "";
var Selected$d = "";
var Select$d = "არჩევა";
var Change$d = "";
var Funder$d = "";
var URL$d = "ბმული";
var optional$d = "არასავალდებულო";
var Format$d = "";
var Identifiers$d = "";
var TRANSLATE_KA = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$d,
	Restricted: Restricted$d,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$d,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$d,
	"Add description": "",
	"Additional Description": "",
	Type: Type$d,
	Language: Language$d,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$d,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$d,
	Remove: Remove$d,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$d,
	Person: Person$d,
	Organization: Organization$d,
	"Family name": "",
	Name: Name$d,
	"Organization name": "",
	Role: Role$d,
	"Select role": "",
	Cancel: Cancel$d,
	Save: Save$d,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "თარიღი",
	Description: Description$d,
	Dates: Dates$d,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "წაშლა",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$d,
	Filename: Filename$d,
	Size: Size$d,
	Progress: Progress$d,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$d,
	or: or$d,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$d,
	"Resource type": "",
	Title: Title$d,
	"Additional titles": "",
	"Publication date": "გამოქვეყნების თარიღი",
	Creators: Creators$d,
	Contributors: Contributors$d,
	"Additional descriptions": "",
	Licenses: Licenses$d,
	Languages: Languages$d,
	Version: Version$d,
	Publisher: Publisher$d,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$d,
	Scheme: Scheme$d,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$d,
	All: All$d,
	Data: Data$d,
	Software: Software$d,
	"License title": "",
	Link: Link$d,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$d,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$d,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$d,
	No: No$d,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$d,
	Search: Search$d,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$d,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$d,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$d,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$d,
	"Your upload is published.": "",
	Draft: Draft$d,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$d,
	Select: Select$d,
	"Select ": "",
	Change: Change$d,
	"Search for a funder by name": "",
	Funder: Funder$d,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$d,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$d,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$d,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$d,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$c = "";
var Restricted$c = "";
var Reason$c = "";
var Options$c = "Pasirinkimai";
var Type$c = "Tipas";
var Language$c = "";
var Affiliations$c = "";
var Edit$c = "Redaguoti";
var Remove$c = "Pašalinti";
var Added$c = "";
var Person$c = "";
var Organization$c = "";
var Name$c = "Pavadinimas";
var Role$c = "";
var Cancel$c = "Atšaukti";
var Save$c = "Išsaugoti";
var Description$c = "Aprašymas";
var Dates$c = "";
var Preview$c = "";
var Filename$c = "";
var Size$c = "";
var Progress$c = "Eiga";
var Pending$c = "Laukiantys";
var or$c = "ar";
var Files$c = "Failai";
var Title$c = "Pavadinimas";
var Creators$c = "";
var Contributors$c = "";
var Licenses$c = "";
var Languages$c = "";
var Version$c = "";
var Publisher$c = "Leidėjas";
var Identifier$c = "";
var Scheme$c = "";
var Recommended$c = "";
var All$c = "Visi";
var Data$c = "";
var Software$c = "";
var Link$c = "";
var Relation$c = "";
var Subjects$c = "";
var Yes$c = "Taip";
var No$c = "Ne";
var DOI$c = "";
var Search$c = "Ieškoti";
var Publish$c = "Skelbti";
var Declined$c = "";
var Expired$c = "";
var Published$c = "";
var Draft$c = "";
var Selected$c = "";
var Select$c = "Pasirinkti";
var Change$c = "";
var Funder$c = "";
var URL$c = "URL";
var optional$c = "nebūtinas";
var Format$c = "";
var Identifiers$c = "";
var TRANSLATE_LT = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$c,
	Restricted: Restricted$c,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$c,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$c,
	"Add description": "",
	"Additional Description": "",
	Type: Type$c,
	Language: Language$c,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$c,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$c,
	Remove: Remove$c,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$c,
	Person: Person$c,
	Organization: Organization$c,
	"Family name": "",
	Name: Name$c,
	"Organization name": "",
	Role: Role$c,
	"Select role": "",
	Cancel: Cancel$c,
	Save: Save$c,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Data",
	Description: Description$c,
	Dates: Dates$c,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "ištrinti",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$c,
	Filename: Filename$c,
	Size: Size$c,
	Progress: Progress$c,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$c,
	or: or$c,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$c,
	"Resource type": "",
	Title: Title$c,
	"Additional titles": "",
	"Publication date": "Išleidimo data",
	Creators: Creators$c,
	Contributors: Contributors$c,
	"Additional descriptions": "",
	Licenses: Licenses$c,
	Languages: Languages$c,
	Version: Version$c,
	Publisher: Publisher$c,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$c,
	Scheme: Scheme$c,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$c,
	All: All$c,
	Data: Data$c,
	Software: Software$c,
	"License title": "",
	Link: Link$c,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$c,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$c,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$c,
	No: No$c,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$c,
	Search: Search$c,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$c,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$c,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$c,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$c,
	"Your upload is published.": "",
	Draft: Draft$c,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$c,
	Select: Select$c,
	"Select ": "",
	Change: Change$c,
	"Search for a funder by name": "",
	Funder: Funder$c,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$c,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$c,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$c,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$c,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$b = "";
var Restricted$b = "";
var Reason$b = "";
var Options$b = "";
var Type$b = "";
var Language$b = "";
var Affiliations$b = "";
var Edit$b = "Endre";
var Remove$b = "Slett";
var Added$b = "";
var Person$b = "";
var Organization$b = "";
var Name$b = "Navn";
var Role$b = "";
var Cancel$b = "Avbryt";
var Save$b = "";
var Description$b = "Beskrivelse";
var Dates$b = "";
var Preview$b = "";
var Filename$b = "";
var Size$b = "";
var Progress$b = "";
var Pending$b = "Avventer";
var or$b = "eller";
var Files$b = "";
var Title$b = "Tittel";
var Creators$b = "";
var Contributors$b = "";
var Licenses$b = "";
var Languages$b = "";
var Version$b = "";
var Publisher$b = "";
var Identifier$b = "";
var Scheme$b = "";
var Recommended$b = "";
var All$b = "";
var Data$b = "";
var Software$b = "";
var Link$b = "";
var Relation$b = "";
var Subjects$b = "";
var Yes$b = "Ja";
var No$b = "Nei";
var DOI$b = "";
var Search$b = "Søk";
var Publish$b = "Publiser";
var Declined$b = "";
var Expired$b = "";
var Published$b = "";
var Draft$b = "";
var Selected$b = "";
var Select$b = "Merk";
var Change$b = "";
var Funder$b = "";
var URL$b = "";
var optional$b = "valgfritt";
var Format$b = "";
var Identifiers$b = "";
var TRANSLATE_NO = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$b,
	Restricted: Restricted$b,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$b,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$b,
	"Add description": "",
	"Additional Description": "",
	Type: Type$b,
	Language: Language$b,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$b,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$b,
	Remove: Remove$b,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$b,
	Person: Person$b,
	Organization: Organization$b,
	"Family name": "",
	Name: Name$b,
	"Organization name": "",
	Role: Role$b,
	"Select role": "",
	Cancel: Cancel$b,
	Save: Save$b,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Dato",
	Description: Description$b,
	Dates: Dates$b,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$b,
	Filename: Filename$b,
	Size: Size$b,
	Progress: Progress$b,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$b,
	or: or$b,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$b,
	"Resource type": "",
	Title: Title$b,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$b,
	Contributors: Contributors$b,
	"Additional descriptions": "",
	Licenses: Licenses$b,
	Languages: Languages$b,
	Version: Version$b,
	Publisher: Publisher$b,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$b,
	Scheme: Scheme$b,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$b,
	All: All$b,
	Data: Data$b,
	Software: Software$b,
	"License title": "",
	Link: Link$b,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$b,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$b,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$b,
	No: No$b,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$b,
	Search: Search$b,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$b,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$b,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$b,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$b,
	"Your upload is published.": "",
	Draft: Draft$b,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$b,
	Select: Select$b,
	"Select ": "",
	Change: Change$b,
	"Search for a funder by name": "",
	Funder: Funder$b,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$b,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$b,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$b,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$b,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$a = "";
var Restricted$a = "";
var Reason$a = "";
var Options$a = "";
var Type$a = "";
var Language$a = "";
var Affiliations$a = "";
var Edit$a = "Edytuj";
var Remove$a = "Usuń";
var Added$a = "";
var Person$a = "";
var Organization$a = "";
var Name$a = "Nazwa";
var Role$a = "";
var Cancel$a = "Anuluj";
var Save$a = "Zapisz";
var Description$a = "Opis";
var Dates$a = "";
var Preview$a = "";
var Filename$a = "";
var Size$a = "";
var Progress$a = "";
var Pending$a = "Oczekuje";
var or$a = "lub";
var Files$a = "";
var Title$a = "Tytuł";
var Creators$a = "";
var Contributors$a = "";
var Licenses$a = "";
var Languages$a = "";
var Version$a = "";
var Publisher$a = "";
var Identifier$a = "";
var Scheme$a = "";
var Recommended$a = "";
var All$a = "";
var Data$a = "";
var Software$a = "";
var Link$a = "";
var Relation$a = "";
var Subjects$a = "";
var Yes$a = "Tak";
var No$a = "Nie";
var DOI$a = "";
var Search$a = "Szukaj";
var Publish$a = "Opublikuj";
var Declined$a = "";
var Expired$a = "";
var Published$a = "";
var Draft$a = "";
var Selected$a = "";
var Select$a = "Wybierz";
var Change$a = "";
var Funder$a = "";
var URL$a = "";
var optional$a = "opcjonalny";
var Format$a = "";
var Identifiers$a = "";
var TRANSLATE_PL = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$a,
	Restricted: Restricted$a,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$a,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$a,
	"Add description": "",
	"Additional Description": "",
	Type: Type$a,
	Language: Language$a,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$a,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$a,
	Remove: Remove$a,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$a,
	Person: Person$a,
	Organization: Organization$a,
	"Family name": "",
	Name: Name$a,
	"Organization name": "",
	Role: Role$a,
	"Select role": "",
	Cancel: Cancel$a,
	Save: Save$a,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Data",
	Description: Description$a,
	Dates: Dates$a,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$a,
	Filename: Filename$a,
	Size: Size$a,
	Progress: Progress$a,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$a,
	or: or$a,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$a,
	"Resource type": "",
	Title: Title$a,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$a,
	Contributors: Contributors$a,
	"Additional descriptions": "",
	Licenses: Licenses$a,
	Languages: Languages$a,
	Version: Version$a,
	Publisher: Publisher$a,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$a,
	Scheme: Scheme$a,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$a,
	All: All$a,
	Data: Data$a,
	Software: Software$a,
	"License title": "",
	Link: Link$a,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$a,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$a,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$a,
	No: No$a,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$a,
	Search: Search$a,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$a,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$a,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$a,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$a,
	"Your upload is published.": "",
	Draft: Draft$a,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$a,
	Select: Select$a,
	"Select ": "",
	Change: Change$a,
	"Search for a funder by name": "",
	Funder: Funder$a,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$a,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$a,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$a,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$a,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$9 = "";
var Restricted$9 = "";
var Reason$9 = "";
var Options$9 = "";
var Type$9 = "";
var Language$9 = "";
var Affiliations$9 = "";
var Edit$9 = "Editar";
var Remove$9 = "";
var Added$9 = "";
var Person$9 = "";
var Organization$9 = "";
var Name$9 = "Nome";
var Role$9 = "";
var Cancel$9 = "Cancelar";
var Save$9 = "";
var Description$9 = "";
var Dates$9 = "";
var Preview$9 = "";
var Filename$9 = "";
var Size$9 = "";
var Progress$9 = "";
var Pending$9 = "";
var or$9 = "";
var Files$9 = "";
var Title$9 = "Título";
var Creators$9 = "";
var Contributors$9 = "";
var Licenses$9 = "";
var Languages$9 = "";
var Version$9 = "";
var Publisher$9 = "";
var Identifier$9 = "";
var Scheme$9 = "";
var Recommended$9 = "";
var All$9 = "";
var Data$9 = "";
var Software$9 = "";
var Link$9 = "";
var Relation$9 = "";
var Subjects$9 = "";
var Yes$9 = "Sim";
var No$9 = "Não";
var DOI$9 = "";
var Search$9 = "Pesquisar";
var Publish$9 = "";
var Declined$9 = "";
var Expired$9 = "";
var Published$9 = "";
var Draft$9 = "";
var Selected$9 = "";
var Select$9 = "";
var Change$9 = "";
var Funder$9 = "";
var URL$9 = "";
var optional$9 = "opcional";
var Format$9 = "";
var Identifiers$9 = "";
var TRANSLATE_PT = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$9,
	Restricted: Restricted$9,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$9,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$9,
	"Add description": "",
	"Additional Description": "",
	Type: Type$9,
	Language: Language$9,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$9,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$9,
	Remove: Remove$9,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$9,
	Person: Person$9,
	Organization: Organization$9,
	"Family name": "",
	Name: Name$9,
	"Organization name": "",
	Role: Role$9,
	"Select role": "",
	Cancel: Cancel$9,
	Save: Save$9,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Data",
	Description: Description$9,
	Dates: Dates$9,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$9,
	Filename: Filename$9,
	Size: Size$9,
	Progress: Progress$9,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$9,
	or: or$9,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$9,
	"Resource type": "",
	Title: Title$9,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$9,
	Contributors: Contributors$9,
	"Additional descriptions": "",
	Licenses: Licenses$9,
	Languages: Languages$9,
	Version: Version$9,
	Publisher: Publisher$9,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$9,
	Scheme: Scheme$9,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$9,
	All: All$9,
	Data: Data$9,
	Software: Software$9,
	"License title": "",
	Link: Link$9,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$9,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$9,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$9,
	No: No$9,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$9,
	Search: Search$9,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$9,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$9,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$9,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$9,
	"Your upload is published.": "",
	Draft: Draft$9,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$9,
	Select: Select$9,
	"Select ": "",
	Change: Change$9,
	"Search for a funder by name": "",
	Funder: Funder$9,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$9,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$9,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$9,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$9,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$8 = "";
var Restricted$8 = "";
var Reason$8 = "";
var Options$8 = "";
var Type$8 = "";
var Language$8 = "";
var Affiliations$8 = "";
var Edit$8 = "Editează";
var Remove$8 = "Elimină";
var Added$8 = "";
var Person$8 = "";
var Organization$8 = "";
var Name$8 = "Nume";
var Role$8 = "";
var Cancel$8 = "Anulează";
var Save$8 = "";
var Description$8 = "Descriere";
var Dates$8 = "";
var Preview$8 = "";
var Filename$8 = "";
var Size$8 = "";
var Progress$8 = "";
var Pending$8 = "";
var or$8 = "sau";
var Files$8 = "";
var Title$8 = "Titlu";
var Creators$8 = "";
var Contributors$8 = "";
var Licenses$8 = "";
var Languages$8 = "";
var Version$8 = "";
var Publisher$8 = "";
var Identifier$8 = "";
var Scheme$8 = "";
var Recommended$8 = "";
var All$8 = "";
var Data$8 = "";
var Software$8 = "";
var Link$8 = "";
var Relation$8 = "";
var Subjects$8 = "";
var Yes$8 = "Da";
var No$8 = "Nu";
var DOI$8 = "";
var Search$8 = "Caută";
var Publish$8 = "Publicare";
var Declined$8 = "";
var Expired$8 = "";
var Published$8 = "";
var Draft$8 = "";
var Selected$8 = "";
var Select$8 = "Selectaţi";
var Change$8 = "";
var Funder$8 = "";
var URL$8 = "";
var optional$8 = "opţional";
var Format$8 = "";
var Identifiers$8 = "";
var TRANSLATE_RO = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$8,
	Restricted: Restricted$8,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$8,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$8,
	"Add description": "",
	"Additional Description": "",
	Type: Type$8,
	Language: Language$8,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$8,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$8,
	Remove: Remove$8,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$8,
	Person: Person$8,
	Organization: Organization$8,
	"Family name": "",
	Name: Name$8,
	"Organization name": "",
	Role: Role$8,
	"Select role": "",
	Cancel: Cancel$8,
	Save: Save$8,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Dată",
	Description: Description$8,
	Dates: Dates$8,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$8,
	Filename: Filename$8,
	Size: Size$8,
	Progress: Progress$8,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$8,
	or: or$8,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$8,
	"Resource type": "",
	Title: Title$8,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$8,
	Contributors: Contributors$8,
	"Additional descriptions": "",
	Licenses: Licenses$8,
	Languages: Languages$8,
	Version: Version$8,
	Publisher: Publisher$8,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$8,
	Scheme: Scheme$8,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$8,
	All: All$8,
	Data: Data$8,
	Software: Software$8,
	"License title": "",
	Link: Link$8,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$8,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$8,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$8,
	No: No$8,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$8,
	Search: Search$8,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$8,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$8,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$8,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$8,
	"Your upload is published.": "",
	Draft: Draft$8,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$8,
	Select: Select$8,
	"Select ": "",
	Change: Change$8,
	"Search for a funder by name": "",
	Funder: Funder$8,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$8,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$8,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$8,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$8,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$7 = "";
var Restricted$7 = "";
var Reason$7 = "";
var Options$7 = "Дополнительно";
var Type$7 = "Тип";
var Language$7 = "";
var Affiliations$7 = "";
var Edit$7 = "Редактировать";
var Remove$7 = "Удалить";
var Added$7 = "";
var Person$7 = "";
var Organization$7 = "";
var Name$7 = "Имя";
var Role$7 = "";
var Cancel$7 = "Отменить";
var Save$7 = "Сохранить";
var Description$7 = "Описание";
var Dates$7 = "";
var Preview$7 = "";
var Filename$7 = "";
var Size$7 = "";
var Progress$7 = "";
var Pending$7 = "Ожидающие";
var or$7 = "или";
var Files$7 = "Файлы";
var Title$7 = "Название";
var Creators$7 = "";
var Contributors$7 = "";
var Licenses$7 = "";
var Languages$7 = "";
var Version$7 = "";
var Publisher$7 = "Издатель";
var Identifier$7 = "";
var Scheme$7 = "";
var Recommended$7 = "";
var All$7 = "Все";
var Data$7 = "";
var Software$7 = "";
var Link$7 = "";
var Relation$7 = "";
var Subjects$7 = "";
var Yes$7 = "Да";
var No$7 = "Нет";
var DOI$7 = "";
var Search$7 = "Искать";
var Publish$7 = "Опубликовать";
var Declined$7 = "";
var Expired$7 = "";
var Published$7 = "";
var Draft$7 = "";
var Selected$7 = "";
var Select$7 = "Выбор";
var Change$7 = "";
var Funder$7 = "";
var URL$7 = "";
var optional$7 = "необязательный";
var Format$7 = "";
var Identifiers$7 = "";
var TRANSLATE_RU = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$7,
	Restricted: Restricted$7,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$7,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$7,
	"Add description": "",
	"Additional Description": "",
	Type: Type$7,
	Language: Language$7,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$7,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$7,
	Remove: Remove$7,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$7,
	Person: Person$7,
	Organization: Organization$7,
	"Family name": "",
	Name: Name$7,
	"Organization name": "",
	Role: Role$7,
	"Select role": "",
	Cancel: Cancel$7,
	Save: Save$7,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Дата",
	Description: Description$7,
	Dates: Dates$7,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "удалить",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$7,
	Filename: Filename$7,
	Size: Size$7,
	Progress: Progress$7,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$7,
	or: or$7,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$7,
	"Resource type": "",
	Title: Title$7,
	"Additional titles": "",
	"Publication date": "Дата публикации",
	Creators: Creators$7,
	Contributors: Contributors$7,
	"Additional descriptions": "",
	Licenses: Licenses$7,
	Languages: Languages$7,
	Version: Version$7,
	Publisher: Publisher$7,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$7,
	Scheme: Scheme$7,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$7,
	All: All$7,
	Data: Data$7,
	Software: Software$7,
	"License title": "",
	Link: Link$7,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$7,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$7,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$7,
	No: No$7,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$7,
	Search: Search$7,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$7,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$7,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$7,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$7,
	"Your upload is published.": "",
	Draft: Draft$7,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$7,
	Select: Select$7,
	"Select ": "",
	Change: Change$7,
	"Search for a funder by name": "",
	Funder: Funder$7,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$7,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$7,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$7,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$7,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$6 = "";
var Restricted$6 = "";
var Reason$6 = "";
var Options$6 = "";
var Type$6 = "";
var Language$6 = "";
var Affiliations$6 = "";
var Edit$6 = "";
var Remove$6 = "";
var Added$6 = "";
var Person$6 = "";
var Organization$6 = "";
var Name$6 = "";
var Role$6 = "";
var Cancel$6 = "";
var Save$6 = "";
var Description$6 = "";
var Dates$6 = "";
var Preview$6 = "";
var Filename$6 = "";
var Size$6 = "";
var Progress$6 = "";
var Pending$6 = "";
var or$6 = "";
var Files$6 = "";
var Title$6 = "";
var Creators$6 = "";
var Contributors$6 = "";
var Licenses$6 = "";
var Languages$6 = "";
var Version$6 = "";
var Publisher$6 = "";
var Identifier$6 = "";
var Scheme$6 = "";
var Recommended$6 = "";
var All$6 = "";
var Data$6 = "";
var Software$6 = "";
var Link$6 = "";
var Relation$6 = "";
var Subjects$6 = "";
var Yes$6 = "";
var No$6 = "";
var DOI$6 = "";
var Search$6 = "";
var Publish$6 = "";
var Declined$6 = "";
var Expired$6 = "";
var Published$6 = "";
var Draft$6 = "";
var Selected$6 = "";
var Select$6 = "";
var Change$6 = "";
var Funder$6 = "";
var URL$6 = "";
var optional$6 = "";
var Format$6 = "";
var Identifiers$6 = "";
var TRANSLATE_RW = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$6,
	Restricted: Restricted$6,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$6,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$6,
	"Add description": "",
	"Additional Description": "",
	Type: Type$6,
	Language: Language$6,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$6,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$6,
	Remove: Remove$6,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$6,
	Person: Person$6,
	Organization: Organization$6,
	"Family name": "",
	Name: Name$6,
	"Organization name": "",
	Role: Role$6,
	"Select role": "",
	Cancel: Cancel$6,
	Save: Save$6,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$6,
	Dates: Dates$6,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$6,
	Filename: Filename$6,
	Size: Size$6,
	Progress: Progress$6,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$6,
	or: or$6,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$6,
	"Resource type": "",
	Title: Title$6,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$6,
	Contributors: Contributors$6,
	"Additional descriptions": "",
	Licenses: Licenses$6,
	Languages: Languages$6,
	Version: Version$6,
	Publisher: Publisher$6,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$6,
	Scheme: Scheme$6,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$6,
	All: All$6,
	Data: Data$6,
	Software: Software$6,
	"License title": "",
	Link: Link$6,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$6,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$6,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$6,
	No: No$6,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$6,
	Search: Search$6,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$6,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$6,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$6,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$6,
	"Your upload is published.": "",
	Draft: Draft$6,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$6,
	Select: Select$6,
	"Select ": "",
	Change: Change$6,
	"Search for a funder by name": "",
	Funder: Funder$6,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$6,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$6,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$6,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$6,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$5 = "Verejný";
var Restricted$5 = "Chránené";
var Reason$5 = "";
var Options$5 = "";
var Type$5 = "";
var Language$5 = "";
var Affiliations$5 = "Afiliácie";
var Edit$5 = "Editovať";
var Remove$5 = "Zruš";
var Added$5 = "";
var Person$5 = "";
var Organization$5 = "";
var Name$5 = "Meno";
var Role$5 = "";
var Cancel$5 = "Preruš";
var Save$5 = "Nahraj";
var Description$5 = "Popis";
var Dates$5 = "";
var Preview$5 = "";
var Filename$5 = "";
var Size$5 = "Veľkosť";
var Progress$5 = "Progres";
var Pending$5 = "Čakajúce";
var or$5 = "alebo";
var Files$5 = "Súbory";
var Title$5 = "Názov";
var Creators$5 = "";
var Contributors$5 = "";
var Licenses$5 = "";
var Languages$5 = "";
var Version$5 = "Verzia";
var Publisher$5 = "";
var Identifier$5 = "Identifikátor";
var Scheme$5 = "";
var Recommended$5 = "";
var All$5 = "";
var Data$5 = "";
var Software$5 = "";
var Link$5 = "";
var Relation$5 = "";
var Subjects$5 = "";
var Yes$5 = "Áno";
var No$5 = "Nie";
var DOI$5 = "";
var Search$5 = "Hľadaj";
var Publish$5 = "";
var Declined$5 = "";
var Expired$5 = "";
var Published$5 = "Publikované";
var Draft$5 = "";
var Selected$5 = "";
var Select$5 = "Vyber";
var Change$5 = "";
var Funder$5 = "";
var URL$5 = "";
var optional$5 = "voliteľné";
var Format$5 = "";
var Identifiers$5 = "";
var TRANSLATE_SK = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$5,
	Restricted: Restricted$5,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$5,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$5,
	"Add description": "",
	"Additional Description": "",
	Type: Type$5,
	Language: Language$5,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$5,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$5,
	Remove: Remove$5,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$5,
	Person: Person$5,
	Organization: Organization$5,
	"Family name": "",
	Name: Name$5,
	"Organization name": "",
	Role: Role$5,
	"Select role": "",
	Cancel: Cancel$5,
	Save: Save$5,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "Dátum",
	Description: Description$5,
	Dates: Dates$5,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "zmazať",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$5,
	Filename: Filename$5,
	Size: Size$5,
	Progress: Progress$5,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$5,
	or: or$5,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$5,
	"Resource type": "",
	Title: Title$5,
	"Additional titles": "",
	"Publication date": "Dátum vydania",
	Creators: Creators$5,
	Contributors: Contributors$5,
	"Additional descriptions": "",
	Licenses: Licenses$5,
	Languages: Languages$5,
	Version: Version$5,
	Publisher: Publisher$5,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$5,
	Scheme: Scheme$5,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "Prečítať si viac",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$5,
	All: All$5,
	Data: Data$5,
	Software: Software$5,
	"License title": "",
	Link: Link$5,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$5,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$5,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$5,
	No: No$5,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$5,
	Search: Search$5,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Moje komunity",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$5,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$5,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$5,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$5,
	"Your upload is published.": "",
	Draft: Draft$5,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$5,
	Select: Select$5,
	"Select ": "",
	Change: Change$5,
	"Search for a funder by name": "",
	Funder: Funder$5,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$5,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$5,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$5,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$5,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$4 = "Offentlig";
var Restricted$4 = "Begränsad";
var Reason$4 = "Anledning";
var Options$4 = "alternativ";
var Type$4 = "Typ";
var Language$4 = "Språk";
var Affiliations$4 = "Tillhörigheter";
var Edit$4 = "Redigera";
var Remove$4 = "Ta bort";
var Added$4 = "Lagt till";
var Person$4 = "Person";
var Organization$4 = "Organisation";
var Name$4 = "Namn";
var Role$4 = "Roll";
var Cancel$4 = "Avbryt";
var Save$4 = "Spara";
var Description$4 = "Beskrivning";
var Dates$4 = "Datum";
var Preview$4 = "Förhandsvisa";
var Filename$4 = "Filnamn";
var Size$4 = "Storlek";
var Progress$4 = "Framsteg";
var Pending$4 = "Avvaktande";
var or$4 = "eller";
var Files$4 = "Filer";
var Title$4 = "Titel";
var Creators$4 = "Skapare";
var Contributors$4 = "Bidragsgivare";
var Licenses$4 = "Licenser";
var Languages$4 = "språk";
var Version$4 = "Version";
var Publisher$4 = "Bokförläggare";
var Identifier$4 = "Identifierare";
var Scheme$4 = "Schema";
var Recommended$4 = "Rekommenderad";
var All$4 = "Allt";
var Data$4 = "Data";
var Software$4 = "mjukvara";
var Link$4 = "Länk";
var Relation$4 = "Relation";
var Subjects$4 = "Ämnen";
var Yes$4 = "Ja";
var No$4 = "Nej";
var DOI$4 = "DOI";
var Search$4 = "Sök";
var Publish$4 = "Publicera";
var Declined$4 = "Tackade nej";
var Expired$4 = "Utgånget";
var Published$4 = "Publicerad";
var Draft$4 = "Utkast";
var Selected$4 = "Vald";
var Select$4 = "Välj";
var Change$4 = "Förändra";
var Funder$4 = "Funder";
var URL$4 = "URL";
var optional$4 = "Valfritt";
var Format$4 = "Formatera";
var Identifiers$4 = "Identifierare";
var TRANSLATE_SV = {
	"Embargo until": "Embargo tills",
	"YYYY-MM-DD": "ÅÅÅÅ-MM-DD",
	"The full record is restricted.": "Hela posten är begränsad.",
	"Embargoed (full record)": "Embargo (fullständig post)",
	"Embargoed (files-only)": "Embargo (endast för filer)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "Uppteckningen är allmänt tillgänglig. På <bold>{{ date }}</bold> filerna kommer automatiskt att göras allmänt tillgängliga. Tills dess kan filerna <bold>bara</bold> nås av <bold>angivna användare</bold> i behörigheterna.",
	"The record has no files.": "Rekorden har inga filer.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "På<bold>{{ date }}</bold> rekorden kommer automatiskt att göras tillgänglig för allmänheten. Tills dess kan skivan<bold>bara</bold> nås av <bold>angivna användare</bold>i behörigheterna.",
	Public: Public$4,
	Restricted: Restricted$4,
	"The record and files are publicly accessible.": "Rekorden och filerna är allmänt tillgängliga.",
	"The record is publicly accessible.": "Rekorden är allmänt tillgänglig.",
	"Public with restricted files": "Offentlig med begränsade filer",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "Rekordet kan <1>endast</1> nås av <3>angivna användare</3> i behörigheterna.",
	"Full record": "Fullständigt rekord",
	"Files only": "Endast filer",
	"Apply an embargo": "Tillämpa ett embargo",
	"Embargo reason": "Embargot skäl",
	"Optionally, describe the reason for the embargo.": "Beskriv eventuellt orsaken till embargot.",
	"Embargo was lifted on {{fmtDate}}.": "Embargot hävdes den {{fmtDate}}.",
	Reason: Reason$4,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "Rekord- eller filskydd måste vara <1>begränsat</1> att tillämpa ett embargo.",
	Options: Options$4,
	"Add description": "Lägg till beskrivning",
	"Additional Description": "Ytterligare beskrivning",
	Type: Type$4,
	Language: Language$4,
	"Select language": "Välj språk",
	"Add titles": "Lägg till titlar",
	"Search or create affiliation'": "Sök eller skapa affiliation",
	Affiliations: Affiliations$4,
	"Search for affiliations..": "Sök efter anknytningar..",
	"Add creator": "Lägg till skapare",
	Edit: Edit$4,
	Remove: Remove$4,
	"Name identifiers": "Namnidentifierare",
	"e.g. ORCID, ISNI or GND.": "t.ex. ORCID siffror, ISNI eller GND.",
	"Type the value of an identifier...": "Skriv värdet på en identifierare...",
	"Save and add another": "Spara och lägg till en till",
	"Family name is a required field.": "Efternamn är ett obligatoriskt fält.",
	"Name is a required field.": "Namn är ett obligatoriskt fält.",
	"Role is a required field.": "Roll är ett obligatoriskt fält.",
	Added: Added$4,
	Person: Person$4,
	Organization: Organization$4,
	"Family name": "Efternamn",
	Name: Name$4,
	"Organization name": "Organisations namn",
	Role: Role$4,
	"Select role": "Välj roll",
	Cancel: Cancel$4,
	Save: Save$4,
	"Add date": "Lägg till datum",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Format: DATE eller DATE/DATE där DATE är ÅÅÅÅ eller ÅÅÅÅ-MM eller ÅÅÅÅ-MM-DD.",
	"Date": "Datum",
	Description: Description$4,
	Dates: Dates$4,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD",
	"discard changes": "ignorera ändringar",
	"discard version": "kassera versionen",
	"delete": "radera",
	"Are you sure you want to discard the changes to this draft?": "Är du säker på att du vill ignorera ändringarna i detta draft?",
	"Are you sure you want to delete this new version?": "Är du säker på att du vill ta bort den här nya versionen?",
	"Are you sure you want to delete this draft?": "Är du säker på att du vill ta bort det här draften?",
	"New version": "Ny version",
	"New upload": "Ny uppladdning",
	"Edit upload": "Redigera uppladdning",
	"Uploading the selected files would result in": "Att ladda upp de valda filerna skulle resultera i",
	"but the limit is": "men gränsen är",
	"You can import files from the previous version.": "Du kan importera filer från den tidigare versionen.",
	"File addition, removal or modification are not allowed after you have published your upload.": "Filtillägg, borttagning eller modifiering är inte tillåtet efter att du har publicerat din uppladdning.",
	"You must create a new version to add, modify or delete files.": "Du måste skapa en ny version för att lägga till, ändra eller ta bort filer.",
	"Upload files": "Ladda upp filer",
	"Import files": "Importera filer",
	Preview: Preview$4,
	Filename: Filename$4,
	Size: Size$4,
	Progress: Progress$4,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "Detta är filens fingeravtryck (MD5 checksum), som kan användas för att verifiera filens integritet.",
	Pending: Pending$4,
	or: or$4,
	"Metadata-only record": "Enbart metadatarekord",
	"Storage available": "Förvaring tillgängligt",
	"{{length}} out of {{maxfiles}} files": "{{length}} av {{maxfiles}} filer",
	"out of": "ut ur",
	Files: Files$4,
	"Resource type": "Resurstyp",
	Title: Title$4,
	"Additional titles": "Ytterligare titlar",
	"Publication date": "Publiceringsdatum",
	Creators: Creators$4,
	Contributors: Contributors$4,
	"Additional descriptions": "Ytterligare beskrivningar",
	Licenses: Licenses$4,
	Languages: Languages$4,
	Version: Version$4,
	Publisher: Publisher$4,
	"Related works": "Relaterade arbeten",
	"Alternate identifiers": "Alternativa identifierare",
	"Record successfully saved.": "Rekorden har sparats.",
	"Record saved with validation errors:": "Rekorden sparad med valideringsfel:",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet sparades inte. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet publicerades inte. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet lämnades inte in för granskning. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet raderades inte. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet kan inte förhandsgranskas. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Identifieraren var inte reserverad. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Identifieraren kasserades inte. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Utkastet kunde inte sparas innan filen laddades upp. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Add award": "Lägg till award",
	"Add identifier": "Lägg till identifierare",
	Identifier: Identifier$4,
	Scheme: Scheme$4,
	"Search for languages...": "Sök efter språk...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Sök efter ett språk efter namn (t.ex. \"eng\", \"fr\" eller \"polska\")",
	"Add standard": "Lägg till standard",
	"Add custom": "Lägg till anpassad",
	"Read more": "Läs mer",
	"Title is a required field.": "Titel är ett obligatoriskt fält.",
	"Link must be a valid URL": "Länken måste vara en giltig URL",
	Recommended: Recommended$4,
	All: All$4,
	Data: Data$4,
	Software: Software$4,
	"License title": "Licenstitel",
	Link: Link$4,
	"License link": "Licenslänk",
	"Add license": "Lägg till licens",
	"Change license": "Byt licens",
	"You don't have permissions to create a new version.": "Du har inte behörighet att skapa en ny version.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "Om din uppladdning redan har publicerats någon annanstans, använd datumet för den första publiceringen. Format: ÅÅÅÅ-MM-DD, ÅÅÅÅ-MM eller ÅÅÅÅ. För intervaller använd DATE/DATE, t.ex. 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "ÅÅÅÅ-MM-DD eller ÅÅÅÅ-MM-DD/ÅÅÅÅ-MM-DD för intervaller. MM och DD är valfria.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "Förlaget används för att formulera citatet, så tänk på rollens framträdande roll.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "Ange identifierare för relaterade verk. Identifierare som stöds inkluderar DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliografisk kod, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URN:er och URL:er.",
	"Add related work": "Lägg till relaterat arbete",
	Relation: Relation$4,
	"Select relation...": "Välj relation...",
	"Save draft": "Spara utkast",
	"Suggest from": "Föreslå från",
	Subjects: Subjects$4,
	"Search for a subject by name": "Sök efter ett ämne med namn",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Mest relevant för uppladdning av programvara och datauppsättningar. En semantisk versionssträng är att föredra see<1> semver.org</1>, men alla versionssträngar accepteras.",
	"Do you already have a {{pidLabel}} for this upload?": "Har du redan en {{pidLabel}} för den här uppladdningen?",
	Yes: Yes$4,
	No: No$4,
	"e.g. ROR, ISNI or GND.": "e.g. ROR nummer, ISNI or GND.",
	"The following files already exist": "Följande filer finns redan",
	"Disable files for this record": "Följande filer finns redan",
	DOI: DOI$4,
	Search: Search$4,
	"Search or create subjects...": "Sök eller skapa ämnen...",
	"Edit creator": "Redigera skapare",
	"Add {{mode}} license": "Lägg till {{mode}} licens",
	"Change {{mode}} license": "Ändra {{mode}} licens",
	"My communities": "Mina communities",
	"Search in all communities": "Sök i alla communities",
	"Search in my communities": "Sök i mina communities",
	"Search for persons by name, identifier, or affiliation...": "Sök efter personer med namn, identifierare eller tillhörighet...",
	"Select a community": "Välj en community",
	"Submit review": "Skicka recension",
	Publish: Publish$4,
	"Are you sure you want to publish this record?": "Är du säker på att du vill publicera denna rekord?",
	"The draft was not published. Record saved with validation errors:": "Utkastet publicerades inte. Rekord sparad med valideringsfel:",
	"The draft was not submitted for review. Record saved with validation errors:": "Utkastet lämnades inte in för granskning. Post sparad med valideringsfel:",
	"In review": "Under granskning",
	"Community curators will review your upload. Once accepted, it will be published.": "Communitykuratorer granskar din uppladdning. När den har godkänts kommer den att publiceras.",
	Declined: Declined$4,
	"The request to submit this upload to the community was declined.": "Begäran om att skicka denna uppladdning till community avvisades.",
	Expired: Expired$4,
	"The request to submit this upload to the community has expired.": "Begäran om att skicka den här uppladdningen till community har löpt ut.",
	Published: Published$4,
	"Your upload is published.": "Din uppladdning är publicerad.",
	Draft: Draft$4,
	"Once your upload is complete, you can submit it for review to the community curators.": "När din uppladdning är klar kan du skicka in den för granskning till communitykuratorerna.",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "När din uppladdning är klar kan du publicera eller skicka in den för granskning till communitykuratorerna.",
	"New version draft": "Nytt utkast till version",
	"Once your upload is complete, you can publish it.": "När din uppladdning är klar kan du publicera den.",
	"View request": "Visa begäran",
	"Submitted for review": "Skickat in för granskning",
	"Change community": "Byt community",
	"Publish without community": "Publicera utan community",
	"Select the community where you want to submit your record.": "Välj den community där du vill skicka din rekord.",
	"View community": "Se community",
	"Opens in new tab": "Öppnas i ny flik",
	Selected: Selected$4,
	Select: Select$4,
	"Select ": "Välj",
	Change: Change$4,
	"Search for a funder by name": "Sök efter en funder med namn",
	Funder: Funder$4,
	"Search for funder...": "Sök efter funder...",
	"Award information": "Award information",
	"Number": "siffra",
	"Award number": "Award nummer",
	"Award Title": "Award Titel",
	URL: URL$4,
	"Award URL": "Award URL",
	"Add standard award": "Lägg till standard award",
	"Add custom award": "Lägg till anpassad award",
	"Change award": "Ändra award",
	"Did not find your award? ": "Hittade du inte din award? ",
	"Add a custom award.": "Lägg till en anpassad award.",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "När rekorden är publicerad kommer du inte längre att kunna ändra filerna i uppladdningen! Du kommer dock fortfarande att kunna uppdatera postens metadata senare.",
	"Submit for review": "Skicka in för granskning",
	optional: optional$4,
	"Open external link": "Öppna extern länk",
	"Search for awards": "Söka efter awards",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "Uppteckningen är allmänt tillgänglig. Filerna kan <1>endast</1> nås av <4>användare som anges</4> i behörigheterna.",
	Format: Format$4,
	"The files of this record are restricted.": "Filerna i denna post är begränsade.",
	"Remove field": "Ta bort fält",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "Hittade du inte en gemenskap som passar dig? Ladda upp utan en gemenskap eller <2>skapa din egen.</2>",
	"Given names": "Givna namn",
	"Couldn't find your person? You can <2>create a new entry</2>.": "Kunde du inte hitta din person? Du kan <2>skapa en ny post</2>.",
	"Drag and drop files": "Dra och släpp filer",
	"Default preview": "Standardförhandsgranskning",
	"Delete file": "Radera fil",
	"This is a Metadata-only record.": "Detta är en endast metadatapost.",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "Oops! Något gick fel! Det gick inte att importera filer från den tidigare versionen. Var god försök igen. Kontakta användarsupport om problemet kvarstår.",
	"Funder is required.": "Finansiär krävs.",
	"Title must be set alongside number.": "Titeln måste ses bredvid numret.",
	"Number must be set alongside title.": "Numret måste ses bredvid titeln.",
	"URL must be valid.": "URL måste vara giltig.",
	"URL must be set alongside title and number.": "URL måste anges tillsammans med titel och nummer.",
	Identifiers: Identifiers$4,
	"You must accept this.": "Du måste acceptera detta.",
	"Before requesting review please read and check the following:": "Innan du begär granskning, läs och kontrollera följande:",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "'{{communityTitle}}'-kuratorerna kommer att ha tillgång till <bold>view</bold> och <bold>edit</bold> din\nladda upp metadata och filer.",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": "Om din uppladdning accepteras av communitykuratorerna kommer den att <bold>publiceras omedelbart</bold>. Innan dess kommer du fortfarande att kunna ändra metadata och filer för denna uppladdning."
};

var Public$3 = "Herkese açık";
var Restricted$3 = "Kısıtlı";
var Reason$3 = "Sebep";
var Options$3 = "Seçenekler";
var Type$3 = "Tür";
var Language$3 = "Dil";
var Affiliations$3 = "Bağlı olunan kurumlar/kuruluşlar";
var Edit$3 = "Düzenle";
var Remove$3 = "Kaldır";
var Added$3 = "Eklendi";
var Person$3 = "Kişi";
var Organization$3 = "Kuruluş";
var Name$3 = "Ad";
var Role$3 = "Rol";
var Cancel$3 = "İptal";
var Save$3 = "Kaydet";
var Description$3 = "Tanım";
var Dates$3 = "Tarihler";
var Preview$3 = "Ön İzleme";
var Filename$3 = "Dosya adı";
var Size$3 = "Boyut";
var Progress$3 = "İlerleme durumu";
var Pending$3 = "Bekliyor";
var or$3 = "veya";
var Files$3 = "Dosyalar";
var Title$3 = "Başlık";
var Creators$3 = "Oluşturanlar";
var Contributors$3 = "Katkıda Bulunan Kişiler";
var Licenses$3 = "Lisanslar";
var Languages$3 = "Diller";
var Version$3 = "Sürüm";
var Publisher$3 = "Yayımcı";
var Identifier$3 = "Tanımlayıcı";
var Scheme$3 = "Şema";
var Recommended$3 = "Tavsiye edilen";
var All$3 = "Tümü";
var Data$3 = "Veri";
var Software$3 = "Yazılım";
var Link$3 = "Bağlantı";
var Relation$3 = "İlişki";
var Subjects$3 = "Konular";
var Yes$3 = "Evet";
var No$3 = "Hayır";
var DOI$3 = "DOI";
var Search$3 = "Ara";
var Publish$3 = "Yayınla";
var Declined$3 = "";
var Expired$3 = "";
var Published$3 = "Yayınlanmış";
var Draft$3 = "";
var Selected$3 = "";
var Select$3 = "Seç";
var Change$3 = "";
var Funder$3 = "";
var URL$3 = "URL";
var optional$3 = "isteğe bağlı";
var Format$3 = "";
var Identifiers$3 = "";
var TRANSLATE_TR = {
	"Embargo until": "Şu tarihe kadar ambargo uygula: ",
	"YYYY-MM-DD": "YYYY-AA-GG",
	"The full record is restricted.": "Tam kayda erişim kısıtlanmıştır.",
	"Embargoed (full record)": "Ambargo uygulanmış (tam kayıt)",
	"Embargoed (files-only)": "Ambargo uygulanmış (yalnızca dosyalar)",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "Kayıt herkese açıktır. <bold>{{ date }}</bold> tarihinde dosyalar otomatik olarak herkesin erişimine açılacak. O zamana kadar dosyalara <bold>sadece</bold> izinlerde <bold>belirtilen kullanıcılar</bold> erişebilir.",
	"The record has no files.": "Bu kayıt hiç dosya içermemekte.",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "<bold>{{ date }}</bold> tarihinde, kayıt otomatik olarak herkesin erişimine açılacaktır. O zamana kadar kayda <bold>sadece</bold> izinlerde <bold>belirtilen kullanıcılar</bold> erişebilir.",
	Public: Public$3,
	Restricted: Restricted$3,
	"The record and files are publicly accessible.": "Kayıt ve dosyalar herkesin erişimine açık.",
	"The record is publicly accessible.": "Kayıt herkesin erişimine açık.",
	"Public with restricted files": "Kısıtlanmış dosyalarla beraber herkese açık",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "Kayda <1>sadece</1> izinlerde <3>belirtilen kullanıcılar</3> erişebilir.",
	"Full record": "Tam kayıt",
	"Files only": "Yalnızca dosyalar",
	"Apply an embargo": "Ambargo uygula",
	"Embargo reason": "Ambargo uygulama nedeni",
	"Optionally, describe the reason for the embargo.": "İsteğe bağlı olarak, ambargonun nedenini açıklayın.",
	"Embargo was lifted on {{fmtDate}}.": "Ambargo {{fmtDate}} tarihinde kaldırıldı.",
	Reason: Reason$3,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "Ambargo uygulamak için kayıt veya dosya koruması <1>kısıtlandırılmalıdır</1>.",
	Options: Options$3,
	"Add description": "Açıklama ekle",
	"Additional Description": "Ek açıklama",
	Type: Type$3,
	Language: Language$3,
	"Select language": "Dil Seçin",
	"Add titles": "Başlık ekleyin",
	"Search or create affiliation'": "Bağlı olunan kurum/kuruluş ara veya oluştur",
	Affiliations: Affiliations$3,
	"Search for affiliations..": "Bağlı olunan kurumları/kuruluşları ara",
	"Add creator": "Oluşturan kişi ekle",
	Edit: Edit$3,
	Remove: Remove$3,
	"Name identifiers": "Ad tanımlayıcıları",
	"e.g. ORCID, ISNI or GND.": "Örneğin. ORCID, ISNI veya GND.",
	"Type the value of an identifier...": "Bir tanımlayıcının değerini yazın...",
	"Save and add another": "Kaydet ve başka bir tane ekle",
	"Family name is a required field.": "Soyadı zorunlu bir alan.",
	"Name is a required field.": "Ad, zorunlu bir alan.",
	"Role is a required field.": "Rol zorunlu bir alan.",
	Added: Added$3,
	Person: Person$3,
	Organization: Organization$3,
	"Family name": "Soyadı",
	Name: Name$3,
	"Organization name": "Kuruluş Adı",
	Role: Role$3,
	"Select role": "Rol Seçin",
	Cancel: Cancel$3,
	Save: Save$3,
	"Add date": "Tarih ekle",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "Biçim: TARİH veya TARİH/TARİH, burada TARİH YYYY veya YYYY-AA veya YYYY-AA-GG'dir.",
	"Date": "Tarih",
	Description: Description$3,
	Dates: Dates$3,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "YYYY-AA-GG veya YYYY-AA-GG/YYYY-AA-GG",
	"discard changes": "değişiklikleri gözardı et",
	"discard version": "sürümü gözardı et",
	"delete": "sil",
	"Are you sure you want to discard the changes to this draft?": "Bu taslakta yapılan değişikliklerden vazgeçmek istediğinize emin misiniz?",
	"Are you sure you want to delete this new version?": "Bu yeni sürümü silmek istediğinizden emin misiniz?",
	"Are you sure you want to delete this draft?": "Bu taslağı silmek istediğinize emin misiniz?",
	"New version": "Yeni sürüm",
	"New upload": "Yeni Yükleme",
	"Edit upload": "Yüklemeyi düzenle",
	"Uploading the selected files would result in": "Seçili dosyaların yüklenmesi şuna neden olur: ",
	"but the limit is": "fakat limit: ",
	"You can import files from the previous version.": "Dosyaları önceki sürümden içe aktarabilirsiniz.",
	"File addition, removal or modification are not allowed after you have published your upload.": "Yüklemenizi yayınladıktan sonra dosya ekleme, kaldırma veya değiştirmeye izin verilmez.",
	"You must create a new version to add, modify or delete files.": "Dosya eklemek, değiştirmek veya silmek için yeni bir sürüm oluşturmalısınız.",
	"Upload files": "Dosyaları yükle",
	"Import files": "Dosyaları içe aktar",
	Preview: Preview$3,
	Filename: Filename$3,
	Size: Size$3,
	Progress: Progress$3,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "Bu, dosya bütünlüğünü doğrulamak için kullanılabilen dosya parmak izidir (MD5 sağlama toplamı).",
	Pending: Pending$3,
	or: or$3,
	"Metadata-only record": "yalnızca-üstveri kaydı",
	"Storage available": "Kullanılabilir depolama alanı",
	"{{length}} out of {{maxfiles}} files": "{{maxfiles}} dosyadan {{length}} tanesi",
	"out of": "dosyadan",
	Files: Files$3,
	"Resource type": "Kaynak türü",
	Title: Title$3,
	"Additional titles": "Ek başlıklar",
	"Publication date": "Yayın tarihi",
	Creators: Creators$3,
	Contributors: Contributors$3,
	"Additional descriptions": "Ek açıklamalar",
	Licenses: Licenses$3,
	Languages: Languages$3,
	Version: Version$3,
	Publisher: Publisher$3,
	"Related works": "İlgili çalışmalar",
	"Alternate identifiers": "Alternatif tanımlayıcılar",
	"Record successfully saved.": "Kayıt başarıyla kaydedildi.",
	"Record saved with validation errors:": "Kayıt doğrulama hatalarıyla kaydedildi: ",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "Ödül ekle",
	"Add identifier": "Tanımlayıcı ekle",
	Identifier: Identifier$3,
	Scheme: Scheme$3,
	"Search for languages...": "Dilleri ara...",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "Ada göre bir dil arayın (ör. \"eng\", \"fr\" veya \"Lehçe\")",
	"Add standard": "Standart ekle: ",
	"Add custom": "Özelleştirilmiş ekle: ",
	"Read more": "Devamını okuyun",
	"Title is a required field.": "Başlık zorunlu bir alan.",
	"Link must be a valid URL": "Bağlantı geçerli bir URL olmalıdır",
	Recommended: Recommended$3,
	All: All$3,
	Data: Data$3,
	Software: Software$3,
	"License title": "Lisans başlığı",
	Link: Link$3,
	"License link": "Lisans bağlantısı",
	"Add license": "Lisans ekle",
	"Change license": "Lisansı değiştir",
	"You don't have permissions to create a new version.": "Yeni bir sürüm oluşturma izniniz yok.",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "Yüklemeniz başka bir yerde yayınlanmışsa, lütfen ilk yayının tarihini kullanın. Biçim: YYYY-AA-GG, YYYY-AA veya YYYY. Aralıklar için TARİH/TARİH kullanın, ör. 1939/1945.",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "Aralıklar için YYYY-AA-GG veya YYYY-AA-GG/YYYY-AA-GG. MM ve DD isteğe bağlıdır.",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "Yayıncı, alıntıyı formüle etmek için kullanılır, bu nedenle rolün önemini göz önünde bulundurun.",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "İlgili çalışmaların tanımlayıcılarını belirtin. Desteklenen tanımlayıcılar arasında DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URN'ler ve URL'ler bulunur.",
	"Add related work": "İlgili çalışma ekle",
	Relation: Relation$3,
	"Select relation...": "İlişki seçin...",
	"Save draft": "Taslağı kaydet",
	"Suggest from": "Şuradan öner: ",
	Subjects: Subjects$3,
	"Search for a subject by name": "Ada göre bir konu arayın",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "Çoğunlukla yazılım ve veri kümesi yüklemeleriyle ilgilidir. Semantik bir sürüm dizesi tercih edilir, bkz. <1>semver.org</1>, ancak herhangi bir sürüm dizesi kabul edilir.",
	"Do you already have a {{pidLabel}} for this upload?": "Bu yükleme için zaten bir {{pidLabel}} var mı?",
	Yes: Yes$3,
	No: No$3,
	"e.g. ROR, ISNI or GND.": "Örneğin. ROR, ISNI veya GND.",
	"The following files already exist": "Aşağıdaki dosyalar zaten var",
	"Disable files for this record": "",
	DOI: DOI$3,
	Search: Search$3,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "Topluluklarım",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$3,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$3,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$3,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$3,
	"Your upload is published.": "",
	Draft: Draft$3,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$3,
	Select: Select$3,
	"Select ": "",
	Change: Change$3,
	"Search for a funder by name": "",
	Funder: Funder$3,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$3,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$3,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$3,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$3,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$2 = "";
var Restricted$2 = "";
var Reason$2 = "";
var Options$2 = "";
var Type$2 = "";
var Language$2 = "";
var Affiliations$2 = "";
var Edit$2 = "";
var Remove$2 = "";
var Added$2 = "";
var Person$2 = "";
var Organization$2 = "";
var Name$2 = "";
var Role$2 = "";
var Cancel$2 = "";
var Save$2 = "";
var Description$2 = "";
var Dates$2 = "";
var Preview$2 = "";
var Filename$2 = "";
var Size$2 = "";
var Progress$2 = "";
var Pending$2 = "";
var or$2 = "";
var Files$2 = "";
var Title$2 = "";
var Creators$2 = "";
var Contributors$2 = "";
var Licenses$2 = "";
var Languages$2 = "";
var Version$2 = "";
var Publisher$2 = "";
var Identifier$2 = "";
var Scheme$2 = "";
var Recommended$2 = "";
var All$2 = "";
var Data$2 = "";
var Software$2 = "";
var Link$2 = "";
var Relation$2 = "";
var Subjects$2 = "";
var Yes$2 = "";
var No$2 = "";
var DOI$2 = "";
var Search$2 = "Пошук";
var Publish$2 = "";
var Declined$2 = "";
var Expired$2 = "";
var Published$2 = "";
var Draft$2 = "";
var Selected$2 = "";
var Select$2 = "";
var Change$2 = "";
var Funder$2 = "";
var URL$2 = "";
var optional$2 = "";
var Format$2 = "";
var Identifiers$2 = "";
var TRANSLATE_UK = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public$2,
	Restricted: Restricted$2,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason$2,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options$2,
	"Add description": "",
	"Additional Description": "",
	Type: Type$2,
	Language: Language$2,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations$2,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit$2,
	Remove: Remove$2,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added$2,
	Person: Person$2,
	Organization: Organization$2,
	"Family name": "",
	Name: Name$2,
	"Organization name": "",
	Role: Role$2,
	"Select role": "",
	Cancel: Cancel$2,
	Save: Save$2,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "",
	Description: Description$2,
	Dates: Dates$2,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview$2,
	Filename: Filename$2,
	Size: Size$2,
	Progress: Progress$2,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending$2,
	or: or$2,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files$2,
	"Resource type": "",
	Title: Title$2,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators$2,
	Contributors: Contributors$2,
	"Additional descriptions": "",
	Licenses: Licenses$2,
	Languages: Languages$2,
	Version: Version$2,
	Publisher: Publisher$2,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier$2,
	Scheme: Scheme$2,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended$2,
	All: All$2,
	Data: Data$2,
	Software: Software$2,
	"License title": "",
	Link: Link$2,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation$2,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects$2,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes$2,
	No: No$2,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI$2,
	Search: Search$2,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish$2,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined$2,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired$2,
	"The request to submit this upload to the community has expired.": "",
	Published: Published$2,
	"Your upload is published.": "",
	Draft: Draft$2,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected$2,
	Select: Select$2,
	"Select ": "",
	Change: Change$2,
	"Search for a funder by name": "",
	Funder: Funder$2,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL$2,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional$2,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$2,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$2,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public$1 = "公开";
var Restricted$1 = "被限制";
var Reason$1 = "原因";
var Options$1 = "选项";
var Type$1 = "类型";
var Language$1 = "语言";
var Affiliations$1 = "从属关系";
var Edit$1 = "编辑";
var Remove$1 = "移除";
var Added$1 = "补充";
var Person$1 = "人";
var Organization$1 = "组织";
var Name$1 = "名称";
var Role$1 = "角色";
var Cancel$1 = "取消";
var Save$1 = "保存";
var Description$1 = "描述";
var Dates$1 = "日期";
var Preview$1 = "预览";
var Filename$1 = "文件名";
var Size$1 = "规模";
var Progress$1 = "进程";
var Pending$1 = "等待中";
var or$1 = "或";
var Files$1 = "文件";
var Title$1 = "标题";
var Creators$1 = "创建人";
var Contributors$1 = "贡献者";
var Licenses$1 = "许可证";
var Languages$1 = "语言";
var Version$1 = "版本";
var Publisher$1 = "发布者";
var Identifier$1 = "标识符";
var Scheme$1 = "计划";
var Recommended$1 = "Recommended";
var All$1 = "全部";
var Data$1 = "数据";
var Software$1 = "软件";
var Link$1 = "链接";
var Relation$1 = "关系";
var Subjects$1 = "Subjects";
var Yes$1 = "是";
var No$1 = "否";
var DOI$1 = "数字对象唯一标识符";
var Search$1 = "搜寻";
var Publish$1 = "发表";
var Declined$1 = "拒绝";
var Expired$1 = "已过期";
var Published$1 = "已发布";
var Draft$1 = "草稿";
var Selected$1 = "选定的";
var Select$1 = "选择";
var Change$1 = "更改";
var Funder$1 = "资助机构";
var URL$1 = "统一资源定位系统";
var optional$1 = "可选择的";
var Format$1 = "";
var Identifiers$1 = "标识符";
var TRANSLATE_ZH_CN = {
	"Embargo until": "禁运直到",
	"YYYY-MM-DD": "年-月-日",
	"The full record is restricted.": "完整数据记录受到限制。",
	"Embargoed (full record)": "禁运（完整记录）",
	"Embargoed (files-only)": "禁运（仅文件）",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "该记录可公开获取。在<bold>{{ date }}</bold>时，文件将自动公开。在此之前，文件<bold>只能</bold>由权限中<bold>指定的用户</bold>访问。",
	"The record has no files.": "本记录没有文件",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "在<bold>{{ date }}</bold>该记录将自动公开。在此之前，记录<bold>只能</bold>由权限中<bold>指定的用户</bold>访问。",
	Public: Public$1,
	Restricted: Restricted$1,
	"The record and files are publicly accessible.": "记录和文件可公开访问。",
	"The record is publicly accessible.": "该记录可公开获取。",
	"Public with restricted files": "公开受限制的文件",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "记录<1>只能</1>由权限中<3>指定的用户</3>访问。",
	"Full record": "完整记录",
	"Files only": "仅文件",
	"Apply an embargo": "实施禁运",
	"Embargo reason": "禁运原因",
	"Optionally, describe the reason for the embargo.": "或者，描述禁运的原因。",
	"Embargo was lifted on {{fmtDate}}.": "禁运于 {{fmtDate}}解除。",
	Reason: Reason$1,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "必须<1>限制</1>记录或文件保护以实施禁运。",
	Options: Options$1,
	"Add description": "添加描述",
	"Additional Description": "额外的描述",
	Type: Type$1,
	Language: Language$1,
	"Select language": "选择语言",
	"Add titles": "添加标题",
	"Search or create affiliation'": "搜索或创建附属关系'",
	Affiliations: Affiliations$1,
	"Search for affiliations..": "搜索附属机构…",
	"Add creator": "添加创建者",
	Edit: Edit$1,
	Remove: Remove$1,
	"Name identifiers": "名称标识符",
	"e.g. ORCID, ISNI or GND.": "e.g. ORCID, ISNI或GND。",
	"Type the value of an identifier...": "键入标识符的值…",
	"Save and add another": "保存并添加另一个",
	"Family name is a required field.": "姓氏是必填字段。",
	"Name is a required field.": "名称是必填字段。",
	"Role is a required field.": "角色是必填字段。",
	Added: Added$1,
	Person: Person$1,
	Organization: Organization$1,
	"Family name": "姓",
	Name: Name$1,
	"Organization name": "组织名称",
	Role: Role$1,
	"Select role": "选择角色",
	Cancel: Cancel$1,
	Save: Save$1,
	"Add date": "添加日期",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "格式：日期或日期/日期，其中日期为YYYY或YYYY-MM或YYYY-MM-DD。",
	"Date": "日期",
	Description: Description$1,
	Dates: Dates$1,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "YYYY-MM-DD或YYYY-MM-DD/YYYY-MM-DD",
	"discard changes": "放弃更改",
	"discard version": "放弃版本",
	"delete": "删除",
	"Are you sure you want to discard the changes to this draft?": "是否确实要放弃对此草稿的更改？",
	"Are you sure you want to delete this new version?": "是否确实要删除此新版本？",
	"Are you sure you want to delete this draft?": "是否确定要删除此草稿？",
	"New version": "新版本",
	"New upload": "最新上传",
	"Edit upload": "编辑上传",
	"Uploading the selected files would result in": "上载所选文件将导致",
	"but the limit is": "但限制是",
	"You can import files from the previous version.": "您可以从以前的版本导入文件。",
	"File addition, removal or modification are not allowed after you have published your upload.": "发布上传后，不允许添加、删除或修改文件。",
	"You must create a new version to add, modify or delete files.": "您必须创建新版本才能添加、修改或删除文件。",
	"Upload files": "上传文件",
	"Import files": "导入文件",
	Preview: Preview$1,
	Filename: Filename$1,
	Size: Size$1,
	Progress: Progress$1,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "这是文件指纹（MD5校验和），可用于验证文件完整性。",
	Pending: Pending$1,
	or: or$1,
	"Metadata-only record": "仅元数据记录",
	"Storage available": "可用存储空间",
	"{{length}} out of {{maxfiles}} files": "{{length}}共{{maxfiles}}个文件",
	"out of": "从…里面",
	Files: Files$1,
	"Resource type": "资源类型",
	Title: Title$1,
	"Additional titles": "其他标题",
	"Publication date": "发布日期",
	Creators: Creators$1,
	Contributors: Contributors$1,
	"Additional descriptions": "其他说明",
	Licenses: Licenses$1,
	Languages: Languages$1,
	Version: Version$1,
	Publisher: Publisher$1,
	"Related works": "相关的工作",
	"Alternate identifiers": "可选的标识符",
	"Record successfully saved.": "记录已成功保存。",
	"Record saved with validation errors:": "保存了带有验证错误的记录：",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！草稿未保存。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！草案未公布。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！草案未提交审查。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！草案未删除。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！无法预览草稿。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！标识符未保留。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！标识符未被丢弃。请重试。如果问题仍然存在，请联系用户支持。",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "哎呀，出了点问题！上载文件之前无法保存草稿。请重试。如果问题仍然存在，请联系用户支持。",
	"Add award": "添加奖励",
	"Add identifier": "添加标识符",
	Identifier: Identifier$1,
	Scheme: Scheme$1,
	"Search for languages...": "搜索语言…",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "按名称搜索语言（例如“eng”、“fr”或“Polish”）",
	"Add standard": "添加标准",
	"Add custom": "添加自定义",
	"Read more": "阅读更多",
	"Title is a required field.": "标题是必填字段。",
	"Link must be a valid URL": "链接必须是有效的URL",
	Recommended: Recommended$1,
	All: All$1,
	Data: Data$1,
	Software: Software$1,
	"License title": "许可证标题",
	Link: Link$1,
	"License link": "许可证链接",
	"Add license": "添加许可证",
	"Change license": "更改许可证",
	"You don't have permissions to create a new version.": "您没有创建新版本的权限。",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "如果您的上传已经在其他地方发布，请使用第一次发布的日期。格式：YYYY-MM-DD、YYYY-MM或YYYY。对于间隔，使用日期/日期，例如1939/1945。",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "YYYY-MM-DD或YYYY-MM-DD/YYYY-MM-DD表示间隔。MM和DD是可选的。",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "出版商是用来制定引文的，所以要考虑角色的突出性。",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "指定相关工程的标识符。支持的标识符包括DOI、Handle、ARK、PURL、ISSN、ISBN、PubMed ID、PubMed Central ID、ADS书目代码、arXiv、生命科学标识符（LSID）、EAN-13、ISTC、URNs和URL。",
	"Add related work": "添加相关工作",
	Relation: Relation$1,
	"Select relation...": "选择关系…",
	"Save draft": "保存草稿",
	"Suggest from": "建议从",
	Subjects: Subjects$1,
	"Search for a subject by name": "按名称搜索主题",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "主要与软件和数据集上传相关。语义版本字符串最好参见<1>semver.org</1>，但接受任何版本字符串。",
	"Do you already have a {{pidLabel}} for this upload?": "你已经有一个{{pidLabel}}上传了吗？",
	Yes: Yes$1,
	No: No$1,
	"e.g. ROR, ISNI or GND.": "e.g. ROR, ISNI或GND。",
	"The following files already exist": "以下文件已存在",
	"Disable files for this record": "禁用此记录的文件",
	DOI: DOI$1,
	Search: Search$1,
	"Search or create subjects...": "搜索或创建主题…",
	"Edit creator": "编辑创建者",
	"Add {{mode}} license": "添加{{mode}}许可证",
	"Change {{mode}} license": "更改{{mode}}许可证",
	"My communities": "我的社区",
	"Search in all communities": "在所有社区中搜索",
	"Search in my communities": "在我的社区中搜索",
	"Search for persons by name, identifier, or affiliation...": "按姓名、标识符或附属关系搜索人员…",
	"Select a community": "选择社区",
	"Submit review": "提交审查",
	Publish: Publish$1,
	"Are you sure you want to publish this record?": "确实要发布此记录吗？",
	"The draft was not published. Record saved with validation errors:": "草稿未公布。保存了带有验证错误的记录：",
	"The draft was not submitted for review. Record saved with validation errors:": "草稿未提交审查。保存了带有验证错误的记录：",
	"In review": "检查中",
	"Community curators will review your upload. Once accepted, it will be published.": "社区管理员将审查您的上传。一旦被接受，它将被公布。",
	Declined: Declined$1,
	"The request to submit this upload to the community was declined.": "向社区提交此上传的请求被拒绝。",
	Expired: Expired$1,
	"The request to submit this upload to the community has expired.": "向社区提交此上载的请求已过期。",
	Published: Published$1,
	"Your upload is published.": "您的上传已发布。",
	Draft: Draft$1,
	"Once your upload is complete, you can submit it for review to the community curators.": "上传完成后，您可以将其提交给社区管理员审查。",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "上传完成后，您可以将其发布或提交给社区策展人审查。",
	"New version draft": "新版本草稿",
	"Once your upload is complete, you can publish it.": "上传完成后，您可以发布它。",
	"View request": "查看请求",
	"Submitted for review": "提交审查",
	"Change community": "改变社区",
	"Publish without community": "在没有社区的情况下发布",
	"Select the community where you want to submit your record.": "选择要提交记录的社区。",
	"View community": "查看社区",
	"Opens in new tab": "在新选项卡中打开",
	Selected: Selected$1,
	Select: Select$1,
	"Select ": "选择",
	Change: Change$1,
	"Search for a funder by name": "按姓名搜索资助者",
	Funder: Funder$1,
	"Search for funder...": "搜索资助机构…",
	"Award information": "项目资助信息",
	"Number": "编号",
	"Award number": "项目编号",
	"Award Title": "项目名称",
	URL: URL$1,
	"Award URL": "项目URL",
	"Add standard award": "添加标准化项目信息",
	"Add custom award": "添加自定义项目信息",
	"Change award": "变更项目",
	"Did not find your award? ": "没有找到你的项目？",
	"Add a custom award.": "添加自定义项目。",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "一旦记录发布，您将无法再更改上传中的文件！但是，稍后您仍然可以更新记录的元数据。",
	"Submit for review": "提交供审查",
	optional: optional$1,
	"Open external link": "打开外部链接",
	"Search for awards": "搜索项目",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format$1,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers$1,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "“{{communityTitle}}”策展人可以访问\n<bold>查看</bold>和<bold>编辑</bold>您的\n上传的元数据和文件。",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var Public = "";
var Restricted = "";
var Reason = "";
var Options = "";
var Type = "";
var Language = "";
var Affiliations = "";
var Edit = "編輯";
var Remove = "移除";
var Added = "";
var Person = "";
var Organization = "";
var Name = "名稱";
var Role = "";
var Cancel = "取消";
var Save = "";
var Description = "描述";
var Dates = "";
var Preview = "";
var Filename = "";
var Size = "";
var Progress = "";
var Pending = "等待中";
var or = "或";
var Files = "";
var Title = "標題";
var Creators = "";
var Contributors = "";
var Licenses = "";
var Languages = "";
var Version = "";
var Publisher = "";
var Identifier = "";
var Scheme = "";
var Recommended = "";
var All = "";
var Data = "";
var Software = "";
var Link = "";
var Relation = "";
var Subjects = "";
var Yes = "是";
var No = "否";
var DOI = "";
var Search = "搜尋";
var Publish = "";
var Declined = "";
var Expired = "";
var Published = "";
var Draft = "";
var Selected = "";
var Select = "選擇";
var Change = "";
var Funder = "";
var URL = "";
var optional = "可選擇的";
var Format = "";
var Identifiers = "";
var TRANSLATE_ZH_TW = {
	"Embargo until": "",
	"YYYY-MM-DD": "",
	"The full record is restricted.": "",
	"Embargoed (full record)": "",
	"Embargoed (files-only)": "",
	"The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	"The record has no files.": "",
	"On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.": "",
	Public: Public,
	Restricted: Restricted,
	"The record and files are publicly accessible.": "",
	"The record is publicly accessible.": "",
	"Public with restricted files": "",
	"The record can <1>only</1> be accessed by <3>users specified</3> in the permissions.": "",
	"Full record": "",
	"Files only": "",
	"Apply an embargo": "",
	"Embargo reason": "",
	"Optionally, describe the reason for the embargo.": "",
	"Embargo was lifted on {{fmtDate}}.": "",
	Reason: Reason,
	"Record or files protection must be <1>restricted</1> to apply an embargo.": "",
	Options: Options,
	"Add description": "",
	"Additional Description": "",
	Type: Type,
	Language: Language,
	"Select language": "",
	"Add titles": "",
	"Search or create affiliation'": "",
	Affiliations: Affiliations,
	"Search for affiliations..": "",
	"Add creator": "",
	Edit: Edit,
	Remove: Remove,
	"Name identifiers": "",
	"e.g. ORCID, ISNI or GND.": "",
	"Type the value of an identifier...": "",
	"Save and add another": "",
	"Family name is a required field.": "",
	"Name is a required field.": "",
	"Role is a required field.": "",
	Added: Added,
	Person: Person,
	Organization: Organization,
	"Family name": "",
	Name: Name,
	"Organization name": "",
	Role: Role,
	"Select role": "",
	Cancel: Cancel,
	Save: Save,
	"Add date": "",
	"Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD.": "",
	"Date": "日期",
	Description: Description,
	Dates: Dates,
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD": "",
	"discard changes": "",
	"discard version": "",
	"delete": "",
	"Are you sure you want to discard the changes to this draft?": "",
	"Are you sure you want to delete this new version?": "",
	"Are you sure you want to delete this draft?": "",
	"New version": "",
	"New upload": "",
	"Edit upload": "",
	"Uploading the selected files would result in": "",
	"but the limit is": "",
	"You can import files from the previous version.": "",
	"File addition, removal or modification are not allowed after you have published your upload.": "",
	"You must create a new version to add, modify or delete files.": "",
	"Upload files": "",
	"Import files": "",
	Preview: Preview,
	Filename: Filename,
	Size: Size,
	Progress: Progress,
	"This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity.": "",
	Pending: Pending,
	or: or,
	"Metadata-only record": "",
	"Storage available": "",
	"{{length}} out of {{maxfiles}} files": "",
	"out of": "",
	Files: Files,
	"Resource type": "",
	Title: Title,
	"Additional titles": "",
	"Publication date": "",
	Creators: Creators,
	Contributors: Contributors,
	"Additional descriptions": "",
	Licenses: Licenses,
	Languages: Languages,
	Version: Version,
	Publisher: Publisher,
	"Related works": "",
	"Alternate identifiers": "",
	"Record successfully saved.": "",
	"Record saved with validation errors:": "",
	"Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.": "",
	"Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.": "",
	"Add award": "",
	"Add identifier": "",
	Identifier: Identifier,
	Scheme: Scheme,
	"Search for languages...": "",
	"Search for a language by name (e.g \"eng\", \"fr\" or \"Polish\")": "",
	"Add standard": "",
	"Add custom": "",
	"Read more": "",
	"Title is a required field.": "",
	"Link must be a valid URL": "",
	Recommended: Recommended,
	All: All,
	Data: Data,
	Software: Software,
	"License title": "",
	Link: Link,
	"License link": "",
	"Add license": "",
	"Change license": "",
	"You don't have permissions to create a new version.": "",
	"In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945.": "",
	"YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.": "",
	"The publisher is used to formulate the citation, so consider the prominence of the role.": "",
	"Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.": "",
	"Add related work": "",
	Relation: Relation,
	"Select relation...": "",
	"Save draft": "",
	"Suggest from": "",
	Subjects: Subjects,
	"Search for a subject by name": "",
	"Mostly relevant for software and dataset uploads. A semantic version string is preferred see<1> semver.org</1>, but any version string is accepted.": "",
	"Do you already have a {{pidLabel}} for this upload?": "",
	Yes: Yes,
	No: No,
	"e.g. ROR, ISNI or GND.": "",
	"The following files already exist": "",
	"Disable files for this record": "",
	DOI: DOI,
	Search: Search,
	"Search or create subjects...": "",
	"Edit creator": "",
	"Add {{mode}} license": "",
	"Change {{mode}} license": "",
	"My communities": "",
	"Search in all communities": "",
	"Search in my communities": "",
	"Search for persons by name, identifier, or affiliation...": "",
	"Select a community": "",
	"Submit review": "",
	Publish: Publish,
	"Are you sure you want to publish this record?": "",
	"The draft was not published. Record saved with validation errors:": "",
	"The draft was not submitted for review. Record saved with validation errors:": "",
	"In review": "",
	"Community curators will review your upload. Once accepted, it will be published.": "",
	Declined: Declined,
	"The request to submit this upload to the community was declined.": "",
	Expired: Expired,
	"The request to submit this upload to the community has expired.": "",
	Published: Published,
	"Your upload is published.": "",
	Draft: Draft,
	"Once your upload is complete, you can submit it for review to the community curators.": "",
	"Once your upload is complete, you can publish or submit it for review to the community curators.": "",
	"New version draft": "",
	"Once your upload is complete, you can publish it.": "",
	"View request": "",
	"Submitted for review": "",
	"Change community": "",
	"Publish without community": "",
	"Select the community where you want to submit your record.": "",
	"View community": "",
	"Opens in new tab": "",
	Selected: Selected,
	Select: Select,
	"Select ": "",
	Change: Change,
	"Search for a funder by name": "",
	Funder: Funder,
	"Search for funder...": "",
	"Award information": "",
	"Number": "",
	"Award number": "",
	"Award Title": "",
	URL: URL,
	"Award URL": "",
	"Add standard award": "",
	"Add custom award": "",
	"Change award": "",
	"Did not find your award? ": "",
	"Add a custom award.": "",
	"Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later.": "",
	"Submit for review": "",
	optional: optional,
	"Open external link": "",
	"Search for awards": "",
	"The record is publicly accessible. The files can <1>only</1> be accessed by <4>users specified</4> in the permissions.": "",
	Format: Format,
	"The files of this record are restricted.": "",
	"Remove field": "",
	"Did not find a community that fits you? Upload without a community or <2>create your own.</2>": "",
	"Given names": "",
	"Couldn't find your person? You can <2>create a new entry</2>.": "",
	"Drag and drop files": "",
	"Default preview": "",
	"Delete file": "",
	"This is a Metadata-only record.": "",
	"Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.": "",
	"Funder is required.": "",
	"Title must be set alongside number.": "",
	"Number must be set alongside title.": "",
	"URL must be valid.": "",
	"URL must be set alongside title and number.": "",
	Identifiers: Identifiers,
	"You must accept this.": "",
	"Before requesting review please read and check the following:": "",
	"The '{{communityTitle}}' curators will have access to\n                 <bold>view</bold> and <bold>edit</bold> your\n                 upload's metadata and files.": "",
	"If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.": ""
};

var translations = {
  af: {
    translation: TRANSLATE_AF
  },
  ar: {
    translation: TRANSLATE_AR
  },
  bg: {
    translation: TRANSLATE_BG
  },
  ca: {
    translation: TRANSLATE_CA
  },
  cs: {
    translation: TRANSLATE_CS
  },
  da: {
    translation: TRANSLATE_DA
  },
  de: {
    translation: TRANSLATE_DE
  },
  el: {
    translation: TRANSLATE_EL
  },
  en: {
    translation: TRANSLATE_EN
  },
  es: {
    translation: TRANSLATE_ES
  },
  et: {
    translation: TRANSLATE_ET
  },
  et_EE: {
    translation: TRANSLATE_ET_EE
  },
  fa: {
    translation: TRANSLATE_FA
  },
  fr: {
    translation: TRANSLATE_FR
  },
  gl: {
    translation: TRANSLATE_GL
  },
  hr: {
    translation: TRANSLATE_HR
  },
  hu: {
    translation: TRANSLATE_HU
  },
  it: {
    translation: TRANSLATE_IT
  },
  ja: {
    translation: TRANSLATE_JA
  },
  ka: {
    translation: TRANSLATE_KA
  },
  lt: {
    translation: TRANSLATE_LT
  },
  no: {
    translation: TRANSLATE_NO
  },
  pl: {
    translation: TRANSLATE_PL
  },
  pt: {
    translation: TRANSLATE_PT
  },
  ro: {
    translation: TRANSLATE_RO
  },
  ru: {
    translation: TRANSLATE_RU
  },
  rw: {
    translation: TRANSLATE_RW
  },
  sk: {
    translation: TRANSLATE_SK
  },
  sv: {
    translation: TRANSLATE_SV
  },
  tr: {
    translation: TRANSLATE_TR
  },
  uk: {
    translation: TRANSLATE_UK
  },
  zh_CN: {
    translation: TRANSLATE_ZH_CN
  },
  zh_TW: {
    translation: TRANSLATE_ZH_TW
  }
};

// This file is part of React-Invenio-Deposit
var options = {
  fallbackLng: "en",
  // fallback keys
  returnEmptyString: false,
  debug: process.env.NODE_ENV === "development",
  resources: translations,
  keySeparator: false,
  nsSeparator: false,
  // specify language detection order
  detection: {
    order: ["htmlTag"],
    // cache user language off
    caches: []
  },
  react: {
    // Set empty - to allow html tags convert to trans tags
    // HTML TAG | Trans TAG
    //  <span>  | <1>
    transKeepBasicHtmlNodesFor: []
  }
}; // i18next instance creation
// https://www.i18next.com/overview/api#instance-creation
// this is required in order to keep the resources seperate
// if there is going to be another package
// which requires translation this is the way to create a new instance.
//
// We can use this particular instance for this particular package
// to mark strings for translation.

var i18next = i18n.createInstance();
i18next.use(LanguageDetector).init(options); // Bind Trans component to i18next instance

var Trans = function Trans(props) {
  return /*#__PURE__*/React.createElement(Trans$1, Object.assign({
    i18n: i18next
  }, props));
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var ProtectionButtonsComponent = /*#__PURE__*/function (_Component) {
  _inherits(ProtectionButtonsComponent, _Component);

  var _super = _createSuper(ProtectionButtonsComponent);

  function ProtectionButtonsComponent() {
    var _this;

    _classCallCheck(this, ProtectionButtonsComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handlePublicButtonClick = function () {
      var _this$props = _this.props,
          formik = _this$props.formik,
          fieldPath = _this$props.fieldPath;
      formik.form.setFieldValue(fieldPath, "public"); // NOTE: We reset values, so if embargo filled and click Public,
      //       user needs to fill embargo again. Otherwise, lots of
      //       bookkeeping.

      formik.form.setFieldValue("access.embargo", {
        active: false
      });
    };

    _this.handleRestrictionButtonClick = function () {
      var _this$props2 = _this.props,
          formik = _this$props2.formik,
          fieldPath = _this$props2.fieldPath;
      formik.form.setFieldValue(fieldPath, "restricted");
    };

    return _this;
  }

  _createClass(ProtectionButtonsComponent, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          active = _this$props3.active,
          disabled = _this$props3.disabled;
      var publicColor = active ? "positive" : "";
      var restrictedColor = !active ? "negative" : "";
      return /*#__PURE__*/React.createElement(Button.Group, {
        widths: "2"
      }, /*#__PURE__*/React.createElement(Button, {
        className: publicColor,
        "data-testid": "protection-buttons-component-public",
        disabled: disabled,
        onClick: this.handlePublicButtonClick,
        active: active
      }, i18next.t("Public")), /*#__PURE__*/React.createElement(Button, {
        className: restrictedColor,
        "data-testid": "protection-buttons-component-restricted",
        active: !active,
        onClick: this.handleRestrictionButtonClick
      }, i18next.t("Restricted")));
    }
  }]);

  return ProtectionButtonsComponent;
}(Component);

ProtectionButtonsComponent.defaultProps = {
  active: true,
  disabled: false
};
var ProtectionButtons = /*#__PURE__*/function (_Component2) {
  _inherits(ProtectionButtons, _Component2);

  var _super2 = _createSuper(ProtectionButtons);

  function ProtectionButtons() {
    _classCallCheck(this, ProtectionButtons);

    return _super2.apply(this, arguments);
  }

  _createClass(ProtectionButtons, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React.createElement(Field$1, {
        name: fieldPath,
        component: function component(formikProps) {
          return /*#__PURE__*/React.createElement(ProtectionButtonsComponent, Object.assign({
            formik: formikProps
          }, _this2.props));
        }
      });
    }
  }]);

  return ProtectionButtons;
}(Component);

var MetadataAccess = function MetadataAccess(props) {
  var recordAccess = props.recordAccess,
      communityAccess = props.communityAccess;
  var publicMetadata = recordAccess === "public";
  var publicCommunity = communityAccess === "public";
  return /*#__PURE__*/React.createElement(Overridable, Object.assign({
    id: "ReactInvenioDeposit.MetadataAccess.layout"
  }, props), /*#__PURE__*/React.createElement(React.Fragment, null, i18next.t("Full record"), /*#__PURE__*/React.createElement(ProtectionButtons, {
    active: publicMetadata && publicCommunity,
    disabled: !publicCommunity,
    fieldPath: "access.record"
  })));
};

var FilesAccess = function FilesAccess(_ref) {
  var access = _ref.access,
      accessCommunity = _ref.accessCommunity,
      metadataOnly = _ref.metadataOnly;
  var publicFiles = access.files === "public";
  var publicMetadata = access.record === "public";
  var publicCommunity = accessCommunity === "public";
  var fullRecordRestricted = !publicCommunity || !publicMetadata;
  var filesRestricted = publicCommunity && !publicFiles && publicMetadata;
  var filesButtonsDisplayed = !metadataOnly && publicCommunity && publicMetadata;

  if (metadataOnly) {
    return /*#__PURE__*/React.createElement(Card.Meta, {
      "data-testid": "access-files"
    }, /*#__PURE__*/React.createElement("em", null, i18next.t("The record has no files.")));
  }

  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "access-files"
  }, filesButtonsDisplayed && /*#__PURE__*/React.createElement(React.Fragment, null, i18next.t("Files only"), /*#__PURE__*/React.createElement(ProtectionButtons, {
    active: publicFiles,
    disable: !publicCommunity,
    fieldPath: "access.files"
  })), fullRecordRestricted && /*#__PURE__*/React.createElement(Card.Description, null, /*#__PURE__*/React.createElement("em", null, i18next.t("The full record is restricted."))), filesRestricted && /*#__PURE__*/React.createElement(Card.Description, null, /*#__PURE__*/React.createElement("em", null, i18next.t("The files of this record are restricted."))));
};
FilesAccess.defaultProps = {
  metadataOnly: false
};

var EmbargoCheckboxComponent = /*#__PURE__*/function (_Component) {
  _inherits(EmbargoCheckboxComponent, _Component);

  var _super = _createSuper(EmbargoCheckboxComponent);

  function EmbargoCheckboxComponent() {
    _classCallCheck(this, EmbargoCheckboxComponent);

    return _super.apply(this, arguments);
  }

  _createClass(EmbargoCheckboxComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          formik = _this$props.formik,
          checked = _this$props.checked,
          disabled = _this$props.disabled;
      return /*#__PURE__*/React.createElement(Checkbox, {
        id: fieldPath,
        "data-testid": "embargo-checkbox-component",
        disabled: disabled,
        checked: checked,
        onChange: function onChange() {
          if (formik.field.value) {
            // NOTE: We reset values, so if embargo filled and user unchecks,
            //       user needs to fill embargo again. Otherwise, lots of
            //       bookkeeping.
            formik.form.setFieldValue("access.embargo", {
              active: false
            });
          } else {
            formik.form.setFieldValue(fieldPath, true);
          }
        }
      });
    }
  }]);

  return EmbargoCheckboxComponent;
}(Component);

EmbargoCheckboxComponent.defaultProps = {
  checked: false,
  disabled: true
};
var EmbargoCheckboxField = /*#__PURE__*/function (_Component2) {
  _inherits(EmbargoCheckboxField, _Component2);

  var _super2 = _createSuper(EmbargoCheckboxField);

  function EmbargoCheckboxField() {
    _classCallCheck(this, EmbargoCheckboxField);

    return _super2.apply(this, arguments);
  }

  _createClass(EmbargoCheckboxField, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props2 = this.props,
          embargoDisabled = _this$props2.disabled,
          fieldPath = _this$props2.fieldPath; // NOTE: See the optimization pattern on AccessRightField for more details.
      //       This makes FastField only render when the things
      //       (access.embargo.active and embargo) it cares about change as it
      //       should be.

      var change = !embargoDisabled ? {} : {
        change: true
      };
      return /*#__PURE__*/React.createElement(FastField, Object.assign({
        name: fieldPath,
        component: function component(formikProps) {
          return /*#__PURE__*/React.createElement(EmbargoCheckboxComponent, Object.assign({
            formik: formikProps
          }, _this.props));
        }
      }, change));
    }
  }]);

  return EmbargoCheckboxField;
}(Component);
EmbargoCheckboxField.defaultProps = {
  disabled: false
};

// This file is part of React-Invenio-Deposit
function EmbargoDateField(_ref) {
  var fieldPath = _ref.fieldPath,
      label = _ref.label,
      labelIcon = _ref.labelIcon,
      placeholder = _ref.placeholder,
      required = _ref.required,
      helpText = _ref.helpText;
  return /*#__PURE__*/React.createElement(TextField, {
    fieldPath: fieldPath,
    label: /*#__PURE__*/React.createElement(FieldLabel, {
      htmlFor: fieldPath,
      icon: labelIcon,
      label: label
    }),
    placeholder: placeholder,
    required: required,
    helpText: helpText
  });
}
EmbargoDateField.defaultProps = {
  required: false,
  labelIcon: "calendar",
  placeholder: i18next.t("YYYY-MM-DD"),
  label: i18next.t("Embargo until"),
  helpText: "".concat(i18next.t("Format"), ": ").concat(i18next.t("YYYY-MM-DD"))
};

var EmbargoAccess = function EmbargoAccess(_ref) {
  var _access$embargo, _access$embargo2, _access$embargo3;

  var access = _ref.access,
      accessCommunity = _ref.accessCommunity,
      metadataOnly = _ref.metadataOnly;
  var recordPublic = access.record === "public";
  var filesPublic = access.files === "public";
  var communityPublic = accessCommunity === "public";
  var filesRestricted = !metadataOnly && !filesPublic;
  var embargoActive = ((_access$embargo = access.embargo) === null || _access$embargo === void 0 ? void 0 : _access$embargo.active) || false;
  var embargoUntil = (_access$embargo2 = access.embargo) === null || _access$embargo2 === void 0 ? void 0 : _access$embargo2.until;
  var embargoReason = (_access$embargo3 = access.embargo) === null || _access$embargo3 === void 0 ? void 0 : _access$embargo3.reason;
  var embargoWasLifted = !embargoActive && !_isEmpty(embargoUntil);
  var embargoEnabled = communityPublic && (!recordPublic || filesRestricted);
  var fmtDate = embargoUntil ? DateTime.fromISO(embargoUntil).toLocaleString(DateTime.DATE_FULL) : "???";
  return /*#__PURE__*/React.createElement(List, null, /*#__PURE__*/React.createElement(List.Item, {
    disabled: !embargoEnabled,
    "data-testid": "option-list-embargo"
  }, /*#__PURE__*/React.createElement(List.Icon, {
    "aria-hidden": "false"
  }, /*#__PURE__*/React.createElement(EmbargoCheckboxField, {
    fieldPath: "access.embargo.active",
    checked: embargoActive,
    disabled: !embargoEnabled
  })), /*#__PURE__*/React.createElement(List.Content, null, /*#__PURE__*/React.createElement(List.Header, {
    as: "label",
    htmlFor: "access.embargo.active"
  }, i18next.t("Apply an embargo"), " ", /*#__PURE__*/React.createElement(Icon, {
    name: "clock outline"
  })), /*#__PURE__*/React.createElement(List.Description, null, /*#__PURE__*/React.createElement(Trans, null, "Record or files protection must be ", /*#__PURE__*/React.createElement("b", null, "restricted"), " to apply an embargo.")), embargoActive && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {
    hidden: true,
    className: "rel-mb-1"
  }), /*#__PURE__*/React.createElement(EmbargoDateField, {
    fieldPath: "access.embargo.until",
    required: true
  }), /*#__PURE__*/React.createElement(TextAreaField, {
    label: i18next.t("Embargo reason"),
    fieldPath: "access.embargo.reason",
    placeholder: i18next.t("Optionally, describe the reason for the embargo."),
    optimized: "true"
  })), embargoWasLifted && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {
    hidden: true
  }), /*#__PURE__*/React.createElement("p", null, i18next.t("Embargo was lifted on {{fmtDate}}.", {
    fmtDate: fmtDate
  })), embargoReason && /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("b", null, i18next.t("Reason")), ": ", embargoReason, ".")))));
};
EmbargoAccess.defaultProps = {
  metadataOnly: false
};

var AccessMessage = function AccessMessage(_ref) {
  var _access$embargo, _access$embargo2;

  var access = _ref.access,
      metadataOnly = _ref.metadataOnly,
      accessCommunity = _ref.accessCommunity;
  var recordPublic = access.record === "public";
  var filesPublic = access.files === "public";
  var communityPublic = accessCommunity === "public";
  var embargoActive = ((_access$embargo = access.embargo) === null || _access$embargo === void 0 ? void 0 : _access$embargo.active) || false; // restriction logic

  var fullyRestricted = !communityPublic || !recordPublic && !embargoActive;
  var fullyPublic = communityPublic && recordPublic && (metadataOnly || filesPublic);
  var embargoedFiles = embargoActive && !filesPublic && recordPublic;
  var restrictedFiles = !embargoActive && !filesPublic && recordPublic;
  var fullEmbargo = !recordPublic && embargoActive;
  var fmtDate = (_access$embargo2 = access.embargo) !== null && _access$embargo2 !== void 0 && _access$embargo2.until ? DateTime.fromISO(access.embargo.until).toLocaleString(DateTime.DATE_FULL) : "???";

  if (fullyPublic) {
    return /*#__PURE__*/React.createElement(Message, {
      icon: true,
      positive: true,
      visible: true,
      "data-testid": "access-message"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "lock open"
    }), /*#__PURE__*/React.createElement(Message.Content, null, /*#__PURE__*/React.createElement(Message.Header, null, i18next.t("Public")), metadataOnly ? i18next.t("The record is publicly accessible.") : i18next.t("The record and files are publicly accessible.")));
  }

  if (fullEmbargo) {
    return /*#__PURE__*/React.createElement(Message, {
      icon: true,
      warning: true,
      visible: true,
      "data-testid": "access-message"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "lock"
    }), /*#__PURE__*/React.createElement(Message.Content, null, /*#__PURE__*/React.createElement(Message.Header, null, i18next.t("Embargoed (full record)")), /*#__PURE__*/React.createElement(Trans, {
      defaults: "On <bold>{{ date }}</bold> the record will automatically be made publicly accessible. Until then, the record can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.",
      values: {
        date: fmtDate
      },
      components: {
        bold: /*#__PURE__*/React.createElement("b", null)
      }
    })));
  }

  if (fullyRestricted) {
    return /*#__PURE__*/React.createElement(Message, {
      icon: true,
      negative: true,
      visible: true,
      "data-testid": "access-message"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "lock"
    }), /*#__PURE__*/React.createElement(Message.Content, null, /*#__PURE__*/React.createElement(Message.Header, null, i18next.t("Restricted")), /*#__PURE__*/React.createElement(Trans, null, "The record can ", /*#__PURE__*/React.createElement("b", null, "only"), " be accessed by ", /*#__PURE__*/React.createElement("b", null, "users specified"), " in the permissions.")));
  }

  if (restrictedFiles) {
    return /*#__PURE__*/React.createElement(Message, {
      icon: true,
      warning: true,
      visible: true,
      "data-testid": "access-message"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "lock"
    }), /*#__PURE__*/React.createElement(Message.Content, null, /*#__PURE__*/React.createElement(Message.Header, null, i18next.t("Public with restricted files")), /*#__PURE__*/React.createElement(Trans, null, "The record is publicly accessible. The files can ", /*#__PURE__*/React.createElement("b", null, "only"), " be accessed by", " ", /*#__PURE__*/React.createElement("b", null, "users specified"), " in the permissions.")));
  }

  if (embargoedFiles) {
    return /*#__PURE__*/React.createElement(Message, {
      icon: true,
      warning: true,
      visible: true,
      "data-testid": "access-message"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "lock"
    }), /*#__PURE__*/React.createElement(Message.Content, null, /*#__PURE__*/React.createElement(Message.Header, null, i18next.t("Embargoed (files-only)")), /*#__PURE__*/React.createElement(Trans, {
      defaults: "The record is publicly accessible. On <bold>{{ date }}</bold> the files will automatically be made publicly accessible. Until then, the files can <bold>only</bold> be accessed by <bold>users specified</bold> in the permissions.",
      values: {
        date: fmtDate
      },
      components: {
        bold: /*#__PURE__*/React.createElement("b", null)
      }
    })));
  }
};
AccessMessage.defaultProps = {
  metadataOnly: false
};

var AccessRightFieldCmp = /*#__PURE__*/function (_Component) {
  _inherits(AccessRightFieldCmp, _Component);

  var _super = _createSuper(AccessRightFieldCmp);

  function AccessRightFieldCmp() {
    _classCallCheck(this, AccessRightFieldCmp);

    return _super.apply(this, arguments);
  }

  _createClass(AccessRightFieldCmp, [{
    key: "render",
    value:
    /** Top-level Access Right Component */
    function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          formik = _this$props.formik,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          community = _this$props.community;
      var communityAccess = (community === null || community === void 0 ? void 0 : community.access.visibility) || "public";
      var isMetadataOnly = !formik.form.values.files.enabled;
      return /*#__PURE__*/React.createElement(Card, {
        className: "access-right"
      }, /*#__PURE__*/React.createElement(Form.Field, {
        required: true
      }, /*#__PURE__*/React.createElement(Card.Content, null, /*#__PURE__*/React.createElement(Card.Header, null, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }))), /*#__PURE__*/React.createElement(Card.Content, null, /*#__PURE__*/React.createElement(MetadataAccess, {
        recordAccess: formik.field.value.record,
        communityAccess: communityAccess
      }), /*#__PURE__*/React.createElement(Divider, {
        hidden: true
      }), /*#__PURE__*/React.createElement(FilesAccess, {
        access: formik.field.value,
        accessCommunity: communityAccess,
        metadataOnly: isMetadataOnly
      }), /*#__PURE__*/React.createElement(Divider, {
        hidden: true
      }), /*#__PURE__*/React.createElement(AccessMessage, {
        access: formik.field.value,
        accessCommunity: communityAccess,
        metadataOnly: isMetadataOnly
      }), /*#__PURE__*/React.createElement(Divider, {
        hidden: true
      })), /*#__PURE__*/React.createElement(Card.Content, null, /*#__PURE__*/React.createElement(Card.Header, {
        as: Header,
        size: "tiny"
      }, i18next.t("Options"))), /*#__PURE__*/React.createElement(Card.Content, {
        extra: true
      }, /*#__PURE__*/React.createElement(EmbargoAccess, {
        access: formik.field.value,
        accessCommunity: communityAccess,
        metadataOnly: isMetadataOnly
      }))));
    }
  }]);

  return AccessRightFieldCmp;
}(Component);
AccessRightFieldCmp.defaultProps = {
  community: undefined
};

var mapStateToPropsAccessRightFieldCmp = function mapStateToPropsAccessRightFieldCmp(state) {
  return {
    community: state.deposit.editorState.selectedCommunity
  };
};

var AccessRightFieldComponent = connect$1(mapStateToPropsAccessRightFieldCmp, null)(AccessRightFieldCmp);
var AccessRightField = /*#__PURE__*/function (_Component2) {
  _inherits(AccessRightField, _Component2);

  var _super2 = _createSuper(AccessRightField);

  function AccessRightField() {
    _classCallCheck(this, AccessRightField);

    return _super2.apply(this, arguments);
  }

  _createClass(AccessRightField, [{
    key: "render",
    value: function render() {
      var _this = this;

      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React.createElement(Field$1, {
        name: fieldPath
      }, function (formik) {
        return /*#__PURE__*/React.createElement(AccessRightFieldComponent, Object.assign({
          formik: formik
        }, _this.props));
      });
    }
  }]);

  return AccessRightField;
}(Component);
AccessRightField.defaultProps = {
  labelIcon: undefined,
  isMetadataOnly: undefined
};

// This file is part of React-Invenio-Deposit
// Copyright (C) 2020 CERN.
// Copyright (C) 2020 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
// TODO: Move to rely on DepositRecordSerializer with the deserializedDefault
//       values to generate the empty values. Then delete this file.
var emptyIdentifier = {
  scheme: "",
  identifier: ""
};
var emptyAdditionalTitle = {
  lang: "",
  title: "",
  type: "alternative-title"
};
var emptyAdditionalDescription = {
  lang: "",
  description: "",
  type: ""
};
var emptyRelatedWork = {
  scheme: "",
  identifier: "",
  resource_type: "",
  relation_type: ""
};
var emptyDate = {
  date: "",
  description: "",
  type: ""
};

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var _excluded$d = ["fieldPath", "label", "labelIcon", "required", "multiple", "placeholder", "clearable", "initialOptions", "serializeSuggestions"];
var LanguagesField = /*#__PURE__*/function (_Component) {
  _inherits(LanguagesField, _Component);

  var _super = _createSuper(LanguagesField);

  function LanguagesField() {
    _classCallCheck(this, LanguagesField);

    return _super.apply(this, arguments);
  }

  _createClass(LanguagesField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          required = _this$props.required,
          multiple = _this$props.multiple,
          placeholder = _this$props.placeholder,
          clearable = _this$props.clearable,
          initialOptions = _this$props.initialOptions,
          serializeSuggestionsFunc = _this$props.serializeSuggestions,
          uiProps = _objectWithoutProperties(_this$props, _excluded$d);

      var serializeSuggestions = serializeSuggestionsFunc || null;
      return /*#__PURE__*/React.createElement(RemoteSelectField, Object.assign({
        fieldPath: fieldPath,
        suggestionAPIUrl: "/api/vocabularies/languages",
        suggestionAPIHeaders: {
          Accept: "application/vnd.inveniordm.v1+json"
        },
        placeholder: placeholder,
        required: required,
        clearable: clearable,
        multiple: multiple,
        initialSuggestions: initialOptions,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        noQueryMessage: i18next.t("Search for languages...")
      }, serializeSuggestions && {
        serializeSuggestions: serializeSuggestions
      }, uiProps));
    }
  }]);

  return LanguagesField;
}(Component);
LanguagesField.defaultProps = {
  label: i18next.t("Languages"),
  labelIcon: "globe",
  multiple: true,
  clearable: true,
  placeholder: i18next.t('Search for a language by name (e.g "eng", "fr" or "Polish")'),
  required: false,
  initialOptions: undefined,
  serializeSuggestions: undefined
};

var AdditionalTitlesField = /*#__PURE__*/function (_Component) {
  _inherits(AdditionalTitlesField, _Component);

  var _super = _createSuper(AdditionalTitlesField);

  function AdditionalTitlesField() {
    _classCallCheck(this, AdditionalTitlesField);

    return _super.apply(this, arguments);
  }

  _createClass(AdditionalTitlesField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          options = _this$props.options,
          recordUI = _this$props.recordUI;
      return /*#__PURE__*/React.createElement(ArrayField, {
        addButtonLabel: i18next.t("Add titles"),
        defaultNewValue: emptyAdditionalTitle,
        fieldPath: fieldPath,
        className: "additional-titles"
      }, function (_ref) {
        var _recordUI$additional_;

        var arrayHelpers = _ref.arrayHelpers,
            indexPath = _ref.indexPath;
        var fieldPathPrefix = "".concat(fieldPath, ".").concat(indexPath);
        return /*#__PURE__*/React.createElement(GroupField, {
          fieldPath: fieldPath,
          optimized: true
        }, /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".title"),
          label: "Additional title",
          required: true,
          width: 5
        }), /*#__PURE__*/React.createElement(SelectField, {
          fieldPath: "".concat(fieldPathPrefix, ".type"),
          label: "Type",
          optimized: true,
          options: options.type,
          required: true,
          width: 5
        }), /*#__PURE__*/React.createElement(LanguagesField, {
          serializeSuggestions: function serializeSuggestions(suggestions) {
            return suggestions.map(function (item) {
              return {
                text: item.title_l10n,
                value: item.id,
                fieldPathPrefix: item.id
              };
            });
          },
          initialOptions: recordUI !== null && recordUI !== void 0 && recordUI.additional_titles && (_recordUI$additional_ = recordUI.additional_titles[indexPath]) !== null && _recordUI$additional_ !== void 0 && _recordUI$additional_.lang ? [recordUI.additional_titles[indexPath].lang] : [],
          fieldPath: "".concat(fieldPathPrefix, ".lang"),
          label: "Language",
          multiple: false,
          placeholder: "Select language",
          labelIcon: null,
          clearable: true,
          selectOnBlur: false,
          width: 5
        }), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Button, {
          "aria-label": i18next.t("Remove field"),
          className: "close-btn",
          icon: true,
          onClick: function onClick() {
            return arrayHelpers.remove(indexPath);
          }
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "close"
        }))));
      });
    }
  }]);

  return AdditionalTitlesField;
}(Component);
AdditionalTitlesField.defaultProps = {
  options: undefined,
  recordUI: undefined
};

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

/**Affiliation input component */

var AffiliationsField = /*#__PURE__*/function (_Component) {
  _inherits(AffiliationsField, _Component);

  var _super = _createSuper(AffiliationsField);

  function AffiliationsField() {
    var _this;

    _classCallCheck(this, AffiliationsField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.serializeAffiliations = function (affiliations) {
      return affiliations.map(function (affiliation) {
        return _objectSpread2(_objectSpread2({
          text: affiliation.acronym ? "".concat(affiliation.name, " (").concat(affiliation.acronym, ")") : affiliation.name,
          value: affiliation.name,
          key: affiliation.name
        }, affiliation.id ? {
          id: affiliation.id
        } : {}), {}, {
          name: affiliation.name
        });
      });
    };

    return _this;
  }

  _createClass(AffiliationsField, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          selectRef = _this$props.selectRef;
      return /*#__PURE__*/React.createElement(Field$1, {
        name: fieldPath
      }, function (_ref) {
        var values = _ref.form.values;
        return /*#__PURE__*/React.createElement(RemoteSelectField, {
          fieldPath: fieldPath,
          suggestionAPIUrl: "/api/affiliations",
          suggestionAPIHeaders: {
            Accept: "application/json"
          },
          initialSuggestions: getIn(values, fieldPath, []),
          serializeSuggestions: _this2.serializeAffiliations,
          placeholder: i18next.t("Search or create affiliation'"),
          label: /*#__PURE__*/React.createElement(FieldLabel, {
            htmlFor: "".concat(fieldPath, ".name"),
            label: i18next.t("Affiliations")
          }),
          noQueryMessage: i18next.t("Search for affiliations.."),
          allowAdditions: true,
          clearable: true,
          multiple: true,
          onValueChange: function onValueChange(_ref2, selectedSuggestions) {
            var formikProps = _ref2.formikProps;
            formikProps.form.setFieldValue(fieldPath, // save the suggestion objects so we can extract information
            // about which value added by the user
            selectedSuggestions);
          },
          value: getIn(values, fieldPath, []).map(function (val) {
            return val.name;
          }),
          ref: selectRef
        });
      });
    }
  }]);

  return AffiliationsField;
}(Component);
AffiliationsField.defaultProps = {
  selectRef: undefined
};

var ComingSoonField = /*#__PURE__*/function (_Component) {
  _inherits(ComingSoonField, _Component);

  var _super = _createSuper(ComingSoonField);

  function ComingSoonField() {
    _classCallCheck(this, ComingSoonField);

    return _super.apply(this, arguments);
  }

  _createClass(ComingSoonField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon;
      return /*#__PURE__*/React.createElement(Form.Field, {
        id: fieldPath,
        name: fieldPath
      }, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }), /*#__PURE__*/React.createElement(Segment, {
        size: "massive",
        tertiary: true,
        textAlign: "center"
      }, "Coming soon"));
    }
  }]);

  return ComingSoonField;
}(Component);
ComingSoonField.defaultProps = {
  label: undefined,
  labelIcon: undefined
};

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) {
            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
          }

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

// This file is part of React-Invenio-Deposit
// Copyright (C) 2020-2022 CERN.
// Copyright (C) 2020-2022 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
var DRAFT_FETCHED = "DRAFT_FETCHED";
var DRAFT_HAS_VALIDATION_ERRORS = "DRAFT_HAS_VALIDATION_ERRORS"; // Draft save

var DRAFT_SAVE_STARTED = "DRAFT_SAVE_STARTED";
var DRAFT_SAVE_SUCCEEDED = "DRAFT_SAVE_SUCCEEDED";
var DRAFT_SAVE_FAILED = "DRAFT_SAVE_FAILED"; // Draft publish

var DRAFT_PUBLISH_STARTED = "DRAFT_PUBLISH_STARTED";
var DRAFT_PUBLISH_FAILED = "DRAFT_PUBLISH_FAILED";
var DRAFT_PUBLISH_FAILED_WITH_VALIDATION_ERRORS = "DRAFT_PUBLISH_FAILED_WITH_VALIDATION_ERRORS"; // Draft preview

var DRAFT_PREVIEW_STARTED = "DRAFT_PREVIEW_STARTED";
var DRAFT_PREVIEW_FAILED = "DRAFT_PREVIEW_FAILED"; // Draft delete

var DRAFT_DELETE_STARTED = "DRAFT_DELETE_STARTED";
var DRAFT_DELETE_FAILED = "DRAFT_DELETE_FAILED"; // Draft submit review

var DRAFT_SUBMIT_REVIEW_STARTED = "DRAFT_SUBMIT_REVIEW_STARTED";
var DRAFT_SUBMIT_REVIEW_FAILED = "DRAFT_SUBMIT_REVIEW_FAILED";
var DRAFT_SUBMIT_REVIEW_FAILED_WITH_VALIDATION_ERRORS = "DRAFT_SUBMIT_REVIEW_FAILED_WITH_VALIDATION_ERRORS"; // Draft reserve PID

var RESERVE_PID_STARTED = "RESERVE_PID_STARTED";
var RESERVE_PID_SUCCEEDED = "RESERVE_PID_SUCCEEDED";
var RESERVE_PID_FAILED = "RESERVE_PID_FAILED"; // Draft discard PID

var DISCARD_PID_STARTED = "DISCARD_PID_STARTED";
var DISCARD_PID_SUCCEEDED = "DISCARD_PID_SUCCEEDED";
var DISCARD_PID_FAILED = "DISCARD_PID_FAILED"; // Files

var FILE_UPLOAD_ADDED = "FILE_UPLOAD_ADDED";
var FILE_UPLOAD_IN_PROGRESS = "FILE_UPLOAD_IN_PROGRESS";
var FILE_UPLOAD_FINISHED = "FILE_UPLOAD_FINISHED";
var FILE_UPLOAD_FAILED = "FILE_UPLOAD_FAILED";
var FILE_UPLOAD_SAVE_DRAFT_FAILED = "FILE_UPLOAD_SAVE_DRAFT_FAILED";
var FILE_IMPORT_STARTED = "FILE_IMPORT_STARTED";
var FILE_IMPORT_SUCCESS = "FILE_IMPORT_SUCCESS";
var FILE_IMPORT_FAILED = "FILE_IMPORT_FAILED";
var FILE_DELETED_SUCCESS = "FILE_DELETED_SUCCESS";
var FILE_DELETE_FAILED = "FILE_DELETE_FAILED";
var FILE_UPLOAD_SET_CANCEL_FUNCTION = "FILE_UPLOAD_SET_CANCEL_FUNCTION";
var FILE_UPLOAD_CANCELLED = "FILE_UPLOAD_CANCELLED"; // Community

var SET_COMMUNITY = "SET_COMMUNITY";

function changeURLAfterCreation(_x) {
  return _changeURLAfterCreation.apply(this, arguments);
}

function _changeURLAfterCreation() {
  _changeURLAfterCreation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(draftURL) {
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            window.history.replaceState(undefined, "", draftURL);

          case 1:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _changeURLAfterCreation.apply(this, arguments);
}

var saveDraftWithUrlUpdate = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(draft, draftsService) {
    var hasAlreadyId, response, draftURL;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            hasAlreadyId = !!draft.id;
            _context.next = 3;
            return draftsService.save(draft);

          case 3:
            response = _context.sent;

            if (!hasAlreadyId) {
              // draft was created, change URL to add the draft PID
              draftURL = response.data.links.self_html;
              changeURLAfterCreation(draftURL);
            }

            return _context.abrupt("return", response);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function saveDraftWithUrlUpdate(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

function _saveDraft(_x4, _x5, _x6) {
  return _saveDraft2.apply(this, arguments);
}

function _saveDraft2() {
  _saveDraft2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(draft, draftsService, _ref2) {
    var depositState, dispatchFn, failType, partialValidationActionType, response, draftHasValidationErrors, draftValidationErrorResponse, _depositState$editorS, _depositState$editorS2, communityStateMustBeChecked, shouldDeleteReview, shouldUpdateReview, selectedCommunity, draftWithLinks;

    return _regeneratorRuntime().wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            depositState = _ref2.depositState, dispatchFn = _ref2.dispatchFn, failType = _ref2.failType, partialValidationActionType = _ref2.partialValidationActionType;
            _context11.prev = 1;
            _context11.next = 4;
            return saveDraftWithUrlUpdate(draft, draftsService, failType);

          case 4:
            response = _context11.sent;
            _context11.next = 11;
            break;

          case 7:
            _context11.prev = 7;
            _context11.t0 = _context11["catch"](1);
            dispatchFn({
              type: failType,
              payload: {
                errors: _context11.t0.errors
              }
            });
            throw _context11.t0;

          case 11:
            draftHasValidationErrors = !_isEmpty(response.errors);
            draftValidationErrorResponse = draftHasValidationErrors ? response : {};
            _depositState$editorS = depositState.editorState, _depositState$editorS2 = _depositState$editorS.actions, communityStateMustBeChecked = _depositState$editorS2.communityStateMustBeChecked, shouldDeleteReview = _depositState$editorS2.shouldDeleteReview, shouldUpdateReview = _depositState$editorS2.shouldUpdateReview, selectedCommunity = _depositState$editorS.selectedCommunity;

            if (!communityStateMustBeChecked) {
              _context11.next = 27;
              break;
            }

            draftWithLinks = response.data;

            if (!shouldDeleteReview) {
              _context11.next = 19;
              break;
            }

            _context11.next = 19;
            return draftsService.deleteReview(draftWithLinks.links);

          case 19:
            if (!shouldUpdateReview) {
              _context11.next = 22;
              break;
            }

            _context11.next = 22;
            return draftsService.createOrUpdateReview(draftWithLinks.links, selectedCommunity.id);

          case 22:
            _context11.next = 24;
            return draftsService.read(draftWithLinks.links);

          case 24:
            response = _context11.sent;
            dispatchFn({
              type: DRAFT_FETCHED,
              payload: {
                data: response.data
              }
            }); // previously saved data should be overriden by the latest read draft
            // Otherwise when the draft is partially saved, the community state will
            // not be taken into account

            draftValidationErrorResponse.data = _objectSpread2(_objectSpread2({}, draftValidationErrorResponse.data), response.data);

          case 27:
            if (!draftHasValidationErrors) {
              _context11.next = 30;
              break;
            }

            dispatchFn({
              type: partialValidationActionType,
              payload: {
                data: draftValidationErrorResponse.data,
                errors: draftValidationErrorResponse.errors
              }
            });
            throw draftValidationErrorResponse;

          case 30:
            return _context11.abrupt("return", response);

          case 31:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, null, [[1, 7]]);
  }));
  return _saveDraft2.apply(this, arguments);
}

var save = function save(draft) {
  return /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dispatch, getState, config) {
      var response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              dispatch({
                type: DRAFT_SAVE_STARTED
              });
              _context2.next = 3;
              return _saveDraft(draft, config.service.drafts, {
                depositState: getState().deposit,
                dispatchFn: dispatch,
                failType: DRAFT_SAVE_FAILED,
                partialValidationActionType: DRAFT_HAS_VALIDATION_ERRORS
              });

            case 3:
              response = _context2.sent;
              dispatch({
                type: DRAFT_SAVE_SUCCEEDED,
                payload: {
                  data: response.data
                }
              });

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x7, _x8, _x9) {
      return _ref3.apply(this, arguments);
    };
  }();
};
var publish = function publish(draft, _ref4) {
  var _ref4$withoutCommunit = _ref4.withoutCommunity,
      withoutCommunity = _ref4$withoutCommunit === void 0 ? false : _ref4$withoutCommunit;
  return /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dispatch, getState, config) {
      var response, draftWithLinks, _response, recordURL;

      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              dispatch({
                type: DRAFT_PUBLISH_STARTED
              });

              if (!withoutCommunity) {
                _context3.next = 4;
                break;
              }

              _context3.next = 4;
              return dispatch(changeSelectedCommunity(null));

            case 4:
              _context3.next = 6;
              return _saveDraft(draft, config.service.drafts, {
                depositState: getState().deposit,
                dispatchFn: dispatch,
                failType: DRAFT_PUBLISH_FAILED,
                partialValidationActionType: DRAFT_PUBLISH_FAILED_WITH_VALIDATION_ERRORS
              });

            case 6:
              response = _context3.sent;
              draftWithLinks = response.data;
              _context3.prev = 8;
              _context3.next = 11;
              return config.service.drafts.publish(draftWithLinks.links);

            case 11:
              _response = _context3.sent;
              // after publishing, redirect to the published record
              recordURL = _response.data.links.self_html;
              window.location.replace(recordURL);
              _context3.next = 20;
              break;

            case 16:
              _context3.prev = 16;
              _context3.t0 = _context3["catch"](8);
              dispatch({
                type: DRAFT_PUBLISH_FAILED,
                payload: {
                  errors: _context3.t0.errors
                }
              });
              throw _context3.t0;

            case 20:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[8, 16]]);
    }));

    return function (_x10, _x11, _x12) {
      return _ref5.apply(this, arguments);
    };
  }();
};
var submitReview = function submitReview(draft, _ref6) {
  var reviewComment = _ref6.reviewComment;
  return /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(dispatch, getState, config) {
      var response, draftWithLinks, reqResponse, request, rawRequestURL, requestURL;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              dispatch({
                type: DRAFT_SUBMIT_REVIEW_STARTED,
                payload: {
                  reviewComment: reviewComment
                }
              });
              _context4.next = 3;
              return _saveDraft(draft, config.service.drafts, {
                depositState: getState().deposit,
                dispatchFn: dispatch,
                failType: DRAFT_SUBMIT_REVIEW_FAILED,
                partialValidationActionType: DRAFT_SUBMIT_REVIEW_FAILED_WITH_VALIDATION_ERRORS
              });

            case 3:
              response = _context4.sent;
              draftWithLinks = response.data;
              _context4.prev = 5;
              _context4.next = 8;
              return config.service.drafts.submitReview(draftWithLinks.links, reviewComment);

            case 8:
              reqResponse = _context4.sent;
              request = reqResponse.data; // after submitting for review, redirect to the review record

              rawRequestURL = config.config.links.user_dashboard_request;
              requestURL = rawRequestURL.replace("<request_pid_value>", request.id);
              window.location.replace(requestURL);
              _context4.next = 19;
              break;

            case 15:
              _context4.prev = 15;
              _context4.t0 = _context4["catch"](5);
              dispatch({
                type: DRAFT_SUBMIT_REVIEW_FAILED,
                payload: {
                  errors: _context4.t0.errors
                }
              });
              throw _context4.t0;

            case 19:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[5, 15]]);
    }));

    return function (_x13, _x14, _x15) {
      return _ref7.apply(this, arguments);
    };
  }();
};
var preview = function preview(draft) {
  return /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(dispatch, getState, config) {
      var response, recordUrl;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              dispatch({
                type: DRAFT_PREVIEW_STARTED
              });
              _context5.next = 3;
              return _saveDraft(draft, config.service.drafts, {
                depositState: getState().deposit,
                dispatchFn: dispatch,
                failType: DRAFT_PREVIEW_FAILED,
                partialValidationActionType: DRAFT_HAS_VALIDATION_ERRORS
              });

            case 3:
              response = _context5.sent;
              recordUrl = response.data.links.record_html; // redirect to the preview page

              window.location = "".concat(recordUrl, "?preview=1");

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x16, _x17, _x18) {
      return _ref8.apply(this, arguments);
    };
  }();
};
/**
 * Returns the function that controls draft deletion.
 *
 * This function is different from the save/publish above because this thunk
 * is independent of form submission.
 */

var delete_ = function delete_() {
  return /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dispatch, getState, config) {
      var draft, redirectURL;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              dispatch({
                type: DRAFT_DELETE_STARTED
              });
              _context6.prev = 1;
              draft = getState().deposit.record;
              _context6.next = 5;
              return config.service.drafts.delete(draft.links);

            case 5:
              // redirect to the the uploads page after deleting/discarding a draft
              redirectURL = "/me/uploads";
              window.location.replace(redirectURL);
              _context6.next = 13;
              break;

            case 9:
              _context6.prev = 9;
              _context6.t0 = _context6["catch"](1);
              dispatch({
                type: DRAFT_DELETE_FAILED,
                payload: {
                  errors: _context6.t0.errors
                }
              });
              throw _context6.t0;

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[1, 9]]);
    }));

    return function (_x19, _x20, _x21) {
      return _ref9.apply(this, arguments);
    };
  }();
};
/**
 * Reserve the PID after having saved the current draft
 */

var reservePID = function reservePID(draft, _ref10) {
  var pidType = _ref10.pidType;
  return /*#__PURE__*/function () {
    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(dispatch, getState, config) {
      var response, draftWithLinks;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              dispatch({
                type: RESERVE_PID_STARTED,
                payload: {
                  pidType: pidType
                }
              });
              _context7.prev = 1;
              _context7.next = 4;
              return saveDraftWithUrlUpdate(draft, config.service.drafts);

            case 4:
              response = _context7.sent;
              draftWithLinks = response.data;
              _context7.next = 8;
              return config.service.drafts.reservePID(draftWithLinks.links, pidType);

            case 8:
              response = _context7.sent;
              dispatch({
                type: RESERVE_PID_SUCCEEDED,
                payload: {
                  data: response.data
                }
              });
              _context7.next = 16;
              break;

            case 12:
              _context7.prev = 12;
              _context7.t0 = _context7["catch"](1);
              dispatch({
                type: RESERVE_PID_FAILED,
                payload: {
                  errors: _context7.t0.errors
                }
              });
              throw _context7.t0;

            case 16:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[1, 12]]);
    }));

    return function (_x22, _x23, _x24) {
      return _ref11.apply(this, arguments);
    };
  }();
};
/**
 * Discard a previously reserved PID
 */

var discardPID = function discardPID(draft, _ref12) {
  var pidType = _ref12.pidType;
  return /*#__PURE__*/function () {
    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dispatch, getState, config) {
      var response, draftWithLinks;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              dispatch({
                type: DISCARD_PID_STARTED,
                payload: {
                  pidType: pidType
                }
              });
              _context8.prev = 1;
              _context8.next = 4;
              return saveDraftWithUrlUpdate(draft, config.service.drafts);

            case 4:
              response = _context8.sent;
              draftWithLinks = response.data;
              _context8.next = 8;
              return config.service.drafts.discardPID(draftWithLinks.links, pidType);

            case 8:
              response = _context8.sent;
              dispatch({
                type: DISCARD_PID_SUCCEEDED,
                payload: {
                  data: response.data
                }
              });
              _context8.next = 16;
              break;

            case 12:
              _context8.prev = 12;
              _context8.t0 = _context8["catch"](1);
              dispatch({
                type: DISCARD_PID_FAILED,
                payload: {
                  errors: _context8.t0.errors
                }
              });
              throw _context8.t0;

            case 16:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, null, [[1, 12]]);
    }));

    return function (_x25, _x26, _x27) {
      return _ref13.apply(this, arguments);
    };
  }();
};
var changeSelectedCommunity = function changeSelectedCommunity(community) {
  return /*#__PURE__*/function () {
    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(dispatch) {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              dispatch({
                type: SET_COMMUNITY,
                payload: {
                  community: community
                }
              });

            case 1:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    return function (_x28) {
      return _ref14.apply(this, arguments);
    };
  }();
};

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var uploadFiles = function uploadFiles(draft, files) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dispatch, _, config) {
      var response, uploadFileUrl, _iterator, _step, file;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return saveDraftWithUrlUpdate(draft, config.service.drafts);

            case 3:
              response = _context.sent;
              // update state with created draft
              dispatch({
                type: DRAFT_FETCHED,
                payload: {
                  data: response.data
                }
              }); // upload files

              uploadFileUrl = response.data.links.files;
              _iterator = _createForOfIteratorHelper(files);

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  file = _step.value;
                  config.service.files.upload(uploadFileUrl, file);
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              _context.next = 14;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              dispatch({
                type: FILE_UPLOAD_SAVE_DRAFT_FAILED,
                payload: {
                  errors: _context.t0.errors
                }
              });
              throw _context.t0;

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 10]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
};
var deleteFile = function deleteFile(file) {
  return /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dispatch, _, config) {
      var fileLinks;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              fileLinks = file.links;
              _context2.next = 4;
              return config.service.files.delete(fileLinks);

            case 4:
              dispatch({
                type: FILE_DELETED_SUCCESS,
                payload: {
                  filename: file.name
                }
              });
              _context2.next = 11;
              break;

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              dispatch({
                type: FILE_DELETE_FAILED
              });
              throw _context2.t0;

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 7]]);
    }));

    return function (_x4, _x5, _x6) {
      return _ref2.apply(this, arguments);
    };
  }();
};
var importParentFiles = function importParentFiles() {
  return /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dispatch, getState, config) {
      var draft, draftLinks, files;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              draft = getState().deposit.record;

              if (draft.id) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return");

            case 3:
              dispatch({
                type: FILE_IMPORT_STARTED
              });
              _context3.prev = 4;
              draftLinks = draft.links;
              _context3.next = 8;
              return config.service.files.importParentRecordFiles(draftLinks);

            case 8:
              files = _context3.sent;
              dispatch({
                type: FILE_IMPORT_SUCCESS,
                payload: {
                  files: files
                }
              });
              _context3.next = 16;
              break;

            case 12:
              _context3.prev = 12;
              _context3.t0 = _context3["catch"](4);
              dispatch({
                type: FILE_IMPORT_FAILED
              });
              throw _context3.t0;

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[4, 12]]);
    }));

    return function (_x7, _x8, _x9) {
      return _ref3.apply(this, arguments);
    };
  }();
};

var CommunityContext = /*#__PURE__*/React.createContext({});

// This file is part of React-Invenio-Deposit
var CommunityListItem = function CommunityListItem(_ref) {
  var _getChosenCommunity, _ui$type;

  var result = _ref.result;

  var _useContext = useContext(CommunityContext),
      setLocalCommunity = _useContext.setLocalCommunity,
      getChosenCommunity = _useContext.getChosenCommunity;

  var metadata = result.metadata,
      ui = result.ui;
  var linkToCommunityPage = result.links.self_html;
  var linkToLogo = result.links.logo;
  var itemSelected = ((_getChosenCommunity = getChosenCommunity()) === null || _getChosenCommunity === void 0 ? void 0 : _getChosenCommunity.id) === result.id;
  var typeL10n = (_ui$type = ui.type) === null || _ui$type === void 0 ? void 0 : _ui$type.title_l10n;
  var isRestricted = result.access.visibility === "restricted";
  return /*#__PURE__*/React.createElement(Item, {
    key: result.id,
    className: itemSelected ? "selected" : ""
  }, /*#__PURE__*/React.createElement(Image, {
    size: "tiny",
    className: "community-logo",
    src: linkToLogo,
    fallbackSrc: "/static/images/square-placeholder.png",
    as: Item.Image
  }), /*#__PURE__*/React.createElement(Item.Content, null, /*#__PURE__*/React.createElement(Item.Header, null, metadata.title, isRestricted && /*#__PURE__*/React.createElement(Label, {
    size: "tiny",
    color: "red",
    className: "rel-ml-1"
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "ban"
  }), _capitalize(result.access.visibility)), /*#__PURE__*/React.createElement(Button, {
    as: "a",
    href: linkToCommunityPage,
    target: "_blank",
    rel: "noreferrer",
    size: "small",
    className: "transparent pt-0 ml-15 mb-5",
    content: i18next.t("View community"),
    icon: "external alternate",
    title: i18next.t("Opens in new tab")
  })), /*#__PURE__*/React.createElement(Item.Description, {
    as: "p",
    className: "rel-pr-1"
  }, _truncate(metadata.description, {
    length: 150
  })), typeL10n && /*#__PURE__*/React.createElement(Item.Extra, null, typeL10n)), /*#__PURE__*/React.createElement(Item.Extra, {
    className: "flex width auto mt-0"
  }, /*#__PURE__*/React.createElement("div", {
    className: "align-self-center"
  }, /*#__PURE__*/React.createElement(Button, {
    content: itemSelected ? i18next.t("Selected") : i18next.t("Select"),
    size: "small",
    positive: itemSelected,
    onClick: function onClick() {
      return setLocalCommunity(result);
    },
    "aria-label": i18next.t("Select ") + metadata.title
  }))));
};

var overriddenComponents$1 = {
  "communities.ResultsList.item": CommunityListItem
};
var CommunitySelectionSearch = /*#__PURE__*/function (_Component) {
  _inherits(CommunitySelectionSearch, _Component);

  var _super = _createSuper(CommunitySelectionSearch);

  function CommunitySelectionSearch(props) {
    var _this;

    _classCallCheck(this, CommunitySelectionSearch);

    _this = _super.call(this, props);
    _this.apiEndpoints = {
      allCommunities: "/api/communities",
      myCommunities: "/api/user/communities"
    };
    var defaultEndpoint = _this.apiEndpoints.allCommunities;
    _this.state = {
      selectedEndpoint: defaultEndpoint
    };
    return _this;
  }

  _createClass(CommunitySelectionSearch, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var selectedEndpoint = this.state.selectedEndpoint;
      var _this$apiEndpoints = this.apiEndpoints,
          allCommunities = _this$apiEndpoints.allCommunities,
          myCommunities = _this$apiEndpoints.myCommunities;
      var searchApi = new InvenioSearchApi({
        axios: {
          url: selectedEndpoint,
          headers: {
            Accept: "application/vnd.inveniordm.v1+json"
          }
        }
      });
      var searchbarPlaceholder = selectedEndpoint === allCommunities ? i18next.t("Search in all communities") : i18next.t("Search in my communities");
      return /*#__PURE__*/React.createElement(OverridableContext.Provider, {
        value: overriddenComponents$1
      }, /*#__PURE__*/React.createElement(ReactSearchKit, {
        appName: "communities",
        urlHandlerApi: {
          enabled: false
        },
        searchApi: searchApi,
        key: selectedEndpoint,
        initialQueryState: {
          size: 5,
          page: 1
        }
      }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Grid.Row, {
        verticalAlign: "middle"
      }, /*#__PURE__*/React.createElement(Grid.Column, {
        width: 8,
        textAlign: "left",
        floated: "left"
      }, /*#__PURE__*/React.createElement(Menu, {
        compact: true
      }, /*#__PURE__*/React.createElement(Menu.Item, {
        name: "All",
        active: selectedEndpoint === allCommunities,
        onClick: function onClick() {
          return _this2.setState({
            selectedEndpoint: allCommunities
          });
        }
      }, i18next.t("All")), /*#__PURE__*/React.createElement(Menu.Item, {
        name: "My communities",
        active: selectedEndpoint === myCommunities,
        onClick: function onClick() {
          return _this2.setState({
            selectedEndpoint: myCommunities
          });
        }
      }, i18next.t("My communities")))), /*#__PURE__*/React.createElement(Grid.Column, {
        width: 8,
        floated: "right",
        verticalAlign: "middle"
      }, /*#__PURE__*/React.createElement(SearchBar, {
        placeholder: searchbarPlaceholder,
        autofocus: true,
        actionProps: {
          icon: "search",
          content: null,
          className: "search"
        }
      }))), /*#__PURE__*/React.createElement(Grid.Row, {
        verticalAlign: "middle"
      }, /*#__PURE__*/React.createElement(Grid.Column, null, /*#__PURE__*/React.createElement(ResultsLoader, null, /*#__PURE__*/React.createElement(Segment, {
        className: "community-list-container p-0"
      }, /*#__PURE__*/React.createElement(Modal.Content, {
        scrolling: true,
        className: "community-list-results"
      }, /*#__PURE__*/React.createElement(EmptyResults, null), /*#__PURE__*/React.createElement(Error$1, null), /*#__PURE__*/React.createElement(ResultsList, null))), /*#__PURE__*/React.createElement(Container, {
        textAlign: "center"
      }, /*#__PURE__*/React.createElement(Pagination, null))))))));
    }
  }]);

  return CommunitySelectionSearch;
}(Component);

var CommunitySelectionModal = /*#__PURE__*/function (_Component) {
  _inherits(CommunitySelectionModal, _Component);

  var _super = _createSuper(CommunitySelectionModal);

  function CommunitySelectionModal(props) {
    var _this;

    _classCallCheck(this, CommunitySelectionModal);

    _this = _super.call(this, props);
    var chosenCommunity = props.chosenCommunity,
        onCommunityChange = props.onCommunityChange;
    _this.state = {
      modalOpen: false,
      localChosenCommunity: chosenCommunity
    };
    var localChosenCommunity = _this.state.localChosenCommunity;
    _this.contextValue = {
      setLocalCommunity: function setLocalCommunity(community) {
        onCommunityChange(community);

        _this.setState({
          localChosenCommunity: null,
          modalOpen: false
        });
      },
      getChosenCommunity: function getChosenCommunity() {
        return localChosenCommunity;
      }
    };
    return _this;
  }

  _createClass(CommunitySelectionModal, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var modalOpen = this.state.modalOpen;
      var _this$props = this.props,
          chosenCommunity = _this$props.chosenCommunity,
          trigger = _this$props.trigger;
      return /*#__PURE__*/React.createElement(CommunityContext.Provider, {
        value: this.contextValue
      }, /*#__PURE__*/React.createElement(Modal, {
        role: "dialog",
        "aria-labelledby": "community-modal-header",
        id: "community-selection-modal",
        className: "m-0",
        closeIcon: true,
        closeOnDimmerClick: false,
        open: modalOpen,
        onClose: function onClose() {
          return _this2.setState({
            modalOpen: false
          });
        },
        onOpen: function onOpen() {
          return _this2.setState({
            modalOpen: true,
            localChosenCommunity: chosenCommunity
          });
        },
        trigger: /*#__PURE__*/React.cloneElement(trigger, {
          "aria-haspopup": "dialog",
          "aria-expanded": modalOpen
        })
      }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Header, {
        as: "h2",
        id: "community-modal-header"
      }, i18next.t("Select a community"))), /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(CommunitySelectionSearch, null))));
    }
  }]);

  return CommunitySelectionModal;
}(Component);
CommunitySelectionModal.defaultProps = {
  chosenCommunity: null
};

var CommunityHeaderComponent = /*#__PURE__*/function (_Component) {
  _inherits(CommunityHeaderComponent, _Component);

  var _super = _createSuper(CommunityHeaderComponent);

  function CommunityHeaderComponent() {
    _classCallCheck(this, CommunityHeaderComponent);

    return _super.apply(this, arguments);
  }

  _createClass(CommunityHeaderComponent, [{
    key: "render",
    value: function render() {
      var _community$links;

      var _this$props = this.props,
          changeSelectedCommunity = _this$props.changeSelectedCommunity,
          community = _this$props.community,
          imagePlaceholderLink = _this$props.imagePlaceholderLink,
          showCommunitySelectionButton = _this$props.showCommunitySelectionButton,
          disableCommunitySelectionButton = _this$props.disableCommunitySelectionButton,
          showCommunityHeader = _this$props.showCommunityHeader;
      return showCommunityHeader && /*#__PURE__*/React.createElement(Container, {
        className: "page-subheader-outer compact ml-0-mobile mr-0-mobile",
        fluid: true
      }, /*#__PURE__*/React.createElement(Container, {
        className: "page-subheader"
      }, community ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
        className: "page-subheader-element"
      }, /*#__PURE__*/React.createElement(Image, {
        size: "tiny",
        className: "community-header-logo",
        src: ((_community$links = community.links) === null || _community$links === void 0 ? void 0 : _community$links.logo) || imagePlaceholderLink // logo is undefined when new draft and no selection
        ,
        fallbackSrc: imagePlaceholderLink
      })), /*#__PURE__*/React.createElement("div", {
        className: "page-subheader-element flex align-items-center"
      }, community.metadata.title)) : /*#__PURE__*/React.createElement("div", {
        className: "page-subheader-element"
      }, i18next.t("Select the community where you want to submit your record.")), /*#__PURE__*/React.createElement("div", {
        className: "community-header-element rel-ml-1"
      }, showCommunitySelectionButton && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CommunitySelectionModal, {
        onCommunityChange: function onCommunityChange(community) {
          changeSelectedCommunity(community);
        },
        chosenCommunity: community,
        trigger: /*#__PURE__*/React.createElement(Button, {
          className: "community-header-button",
          disabled: disableCommunitySelectionButton,
          primary: true,
          size: "mini",
          name: "setting",
          type: "button",
          content: community ? i18next.t("Change") : i18next.t("Select a community")
        })
      }), community && /*#__PURE__*/React.createElement(Button, {
        basic: true,
        color: "black",
        size: "mini",
        className: "community-header-button ml-5",
        onClick: function onClick() {
          return changeSelectedCommunity(null);
        },
        content: i18next.t("Remove"),
        icon: "close",
        disabled: disableCommunitySelectionButton
      })))));
    }
  }]);

  return CommunityHeaderComponent;
}(Component);

CommunityHeaderComponent.defaultProps = {
  community: undefined
};

var mapStateToProps$c = function mapStateToProps(state) {
  return {
    community: state.deposit.editorState.selectedCommunity,
    disableCommunitySelectionButton: state.deposit.editorState.ui.disableCommunitySelectionButton,
    showCommunitySelectionButton: state.deposit.editorState.ui.showCommunitySelectionButton,
    showCommunityHeader: state.deposit.editorState.ui.showCommunityHeader
  };
};

var mapDispatchToProps$3 = function mapDispatchToProps(dispatch) {
  return {
    changeSelectedCommunity: function changeSelectedCommunity$1(community) {
      return dispatch(changeSelectedCommunity(community));
    }
  };
};

var CommunityHeader = connect$1(mapStateToProps$c, mapDispatchToProps$3)(CommunityHeaderComponent);

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var CreatibutorsIdentifiers = /*#__PURE__*/function (_Component) {
  _inherits(CreatibutorsIdentifiers, _Component);

  var _super = _createSuper(CreatibutorsIdentifiers);

  function CreatibutorsIdentifiers(props) {
    var _this;

    _classCallCheck(this, CreatibutorsIdentifiers);

    _this = _super.call(this, props);

    _this.handleIdentifierAddition = function (e, _ref) {
      var value = _ref.value;

      _this.setState(function (prevState) {
        return {
          selectedOptions: _unickBy([{
            text: value,
            value: value,
            key: value
          }].concat(_toConsumableArray(prevState.selectedOptions)), "value")
        };
      });
    };

    _this.valuesToOptions = function (options) {
      return options.map(function (option) {
        return {
          text: option,
          value: option,
          key: option
        };
      });
    };

    _this.handleChange = function (_ref2) {
      var data = _ref2.data,
          formikProps = _ref2.formikProps;
      var fieldPath = _this.props.fieldPath;

      _this.setState({
        selectedOptions: _this.valuesToOptions(data.value)
      });

      formikProps.form.setFieldValue(fieldPath, data.value);
    };

    _this.state = {
      selectedOptions: props.initialOptions
    };
    return _this;
  }

  _createClass(CreatibutorsIdentifiers, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          placeholder = _this$props.placeholder;
      var selectedOptions = this.state.selectedOptions;
      return /*#__PURE__*/React.createElement(SelectField, {
        fieldPath: fieldPath,
        label: label,
        options: selectedOptions,
        placeholder: placeholder,
        noResultsMessage: i18next.t("Type the value of an identifier..."),
        search: true,
        multiple: true,
        selection: true,
        allowAdditions: true,
        onChange: this.handleChange // `icon` is set to `null` in order to hide the dropdown default icon
        ,
        icon: null,
        onAddItem: this.handleIdentifierAddition,
        optimized: true
      });
    }
  }]);

  return CreatibutorsIdentifiers;
}(Component);
CreatibutorsIdentifiers.defaultProps = {
  label: i18next.t("Name identifiers"),
  placeholder: i18next.t("e.g. ORCID, ISNI or GND.")
};

// This file is part of React-Invenio-Deposit
// Copyright (C) 2021 CERN.
// Copyright (C) 2021 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
var CREATIBUTOR_TYPE = {
  PERSON: "personal",
  ORGANIZATION: "organizational"
};

var ModalActions$2 = {
  ADD: "add",
  EDIT: "edit"
};
var NamesAutocompleteOptions = {
  SEARCH: "search",
  SEARCH_ONLY: "search_only",
  OFF: "off"
};
var CreatibutorsModal = /*#__PURE__*/function (_Component) {
  _inherits(CreatibutorsModal, _Component);

  var _super = _createSuper(CreatibutorsModal);

  function CreatibutorsModal(props) {
    var _this;

    _classCallCheck(this, CreatibutorsModal);

    _this = _super.call(this, props);
    _this.CreatorSchema = Yup.object({
      person_or_org: Yup.object({
        type: Yup.string(),
        family_name: Yup.string().when("type", function (type, schema) {
          if (type === CREATIBUTOR_TYPE.PERSON && _this.isCreator()) {
            return schema.required(i18next.t("Family name is a required field."));
          }
        }),
        name: Yup.string().when("type", function (type, schema) {
          if (type === CREATIBUTOR_TYPE.ORGANIZATION && _this.isCreator()) {
            return schema.required(i18next.t("Name is a required field."));
          }
        })
      }),
      role: Yup.string().when("_", function (_, schema) {
        if (!_this.isCreator()) {
          return schema.required(i18next.t("Role is a required field."));
        }
      })
    });

    _this.focusInput = function () {
      return _this.inputRef.current.focus();
    };

    _this.openModal = function () {
      _this.setState({
        open: true,
        action: null
      }, function () {});
    };

    _this.closeModal = function () {
      _this.setState({
        open: false,
        action: null
      });
    };

    _this.changeContent = function () {
      _this.setState({
        saveAndContinueLabel: i18next.t("Added")
      }); // change in 2 sec


      setTimeout(function () {
        _this.setState({
          saveAndContinueLabel: i18next.t("Save and add another")
        });
      }, 2000);
    };

    _this.displayActionLabel = function () {
      var _this$props = _this.props,
          action = _this$props.action,
          addLabel = _this$props.addLabel,
          editLabel = _this$props.editLabel;
      return action === ModalActions$2.ADD ? addLabel : editLabel;
    };

    _this.serializeCreatibutor = function (submittedCreatibutor) {
      var initialCreatibutor = _this.props.initialCreatibutor;

      var findField = function findField(arrayField, key, value) {
        var knownField = _find(arrayField, _defineProperty({}, key, value));

        return knownField ? knownField : _defineProperty({}, key, value);
      };

      var identifiersFieldPath = "person_or_org.identifiers";
      var affiliationsFieldPath = "affiliations"; // The modal is saving only identifiers values, thus
      // identifiers with existing scheme are trimmed
      // Here we merge back the known scheme for the submitted identifiers

      var initialIdentifiers = _get(initialCreatibutor, identifiersFieldPath, []);

      var submittedIdentifiers = _get(submittedCreatibutor, identifiersFieldPath, []);

      var identifiers = submittedIdentifiers.map(function (identifier) {
        return findField(initialIdentifiers, "identifier", identifier);
      });

      var submittedAffiliations = _get(submittedCreatibutor, affiliationsFieldPath, []);

      return _objectSpread2(_objectSpread2({}, submittedCreatibutor), {}, {
        person_or_org: _objectSpread2(_objectSpread2({}, submittedCreatibutor.person_or_org), {}, {
          identifiers: identifiers
        }),
        affiliations: submittedAffiliations
      });
    };

    _this.deserializeCreatibutor = function (initialCreatibutor) {
      var identifiersFieldPath = "person_or_org.identifiers";
      return {
        // default type to personal
        person_or_org: _objectSpread2(_objectSpread2({
          type: CREATIBUTOR_TYPE.PERSON
        }, initialCreatibutor.person_or_org), {}, {
          identifiers: _map(_get(initialCreatibutor, identifiersFieldPath, []), "identifier")
        }),
        affiliations: _get(initialCreatibutor, "affiliations", []),
        role: _get(initialCreatibutor, "role", "")
      };
    };

    _this.isCreator = function () {
      var schema = _this.props.schema;
      return schema === "creators";
    };

    _this.onSubmit = function (values, formikBag) {
      var onCreatibutorChange = _this.props.onCreatibutorChange;
      var action = _this.state.action;
      onCreatibutorChange(_this.serializeCreatibutor(values));
      formikBag.setSubmitting(false);
      formikBag.resetForm();

      switch (action) {
        case "saveAndContinue":
          // Needed to close and open the modal to reset the internal
          // state of the cmp inside the modal
          _this.closeModal();

          _this.openModal();

          _this.changeContent();

          break;

        case "saveAndClose":
          _this.closeModal();

          break;
      }
    };

    _this.makeIdEntry = function (identifier) {
      var icon = null;
      var link = null;

      if (identifier.scheme === "orcid") {
        icon = "/static/images/orcid.svg";
        link = "https://orcid.org/" + identifier.identifier;
      } else if (identifier.scheme === "gnd") {
        icon = "/static/images/gnd-icon.svg";
        link = "https://d-nb.info/gnd/" + identifier.identifier;
      } else if (identifier.scheme === "ror") {
        icon = "/static/images/ror-icon.svg";
        link = "https://ror.org/" + identifier.identifier;
      } else {
        return /*#__PURE__*/React.createElement(React.Fragment, null, identifier.scehme, ": ", identifier.identifier);
      }

      return /*#__PURE__*/React.createElement("span", {
        key: identifier.identifier
      }, /*#__PURE__*/React.createElement("a", {
        href: link,
        target: "_blank",
        rel: "noopener noreferrer"
      }, /*#__PURE__*/React.createElement(Image, {
        src: icon,
        className: "inline-id-icon ml-5 mr-5",
        verticalAlign: "middle"
      }), identifier.identifier), ";");
    };

    _this.serializeSuggestions = function (creatibutors) {
      var results = creatibutors.map(function (creatibutor) {
        var affNames = "";
        creatibutor.affiliations.forEach(function (affiliation, idx) {
          affNames += affiliation.name;

          if (idx < creatibutor.affiliations.length - 1) {
            affNames += ", ";
          }
        });
        var idString = [];
        creatibutor.identifiers.forEach(function (i) {
          idString.push(_this.makeIdEntry(i));
        });
        return {
          text: creatibutor.name,
          value: creatibutor.id,
          extra: creatibutor,
          key: creatibutor.id,
          content: /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Header.Content, null, creatibutor.name, " ", idString.length ? /*#__PURE__*/React.createElement(React.Fragment, null, "(", idString, ")") : null), /*#__PURE__*/React.createElement(Header.Subheader, null, affNames))
        };
      });
      var showPersonForm = _this.state.showPersonForm;
      var autocompleteNames = _this.props.autocompleteNames;
      var showManualEntry = autocompleteNames === NamesAutocompleteOptions.SEARCH_ONLY && !showPersonForm;

      if (showManualEntry) {
        results.push({
          text: "Manual entry",
          value: "Manual entry",
          extra: "Manual entry",
          key: "manual-entry",
          content: /*#__PURE__*/React.createElement(Header, {
            textAlign: "center"
          }, /*#__PURE__*/React.createElement(Header.Content, null, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement(Trans, null, "Couldn't find your person? You can ", /*#__PURE__*/React.createElement("a", null, "create a new entry"), "."))))
        });
      }

      return results;
    };

    _this.onPersonSearchChange = function (_ref2, selectedSuggestions) {
      var formikProps = _ref2.formikProps;

      if (selectedSuggestions[0].key === "manual-entry") {
        // Empty the autocomplete's selected values
        _this.namesAutocompleteRef.current.setState({
          suggestions: [],
          selectedSuggestions: []
        });

        _this.setState({
          showPersonForm: true
        });

        return;
      }

      _this.setState({
        showPersonForm: true
      }, function () {
        var _chosen;

        var identifiers = selectedSuggestions[0].extra.identifiers.map(function (identifier) {
          return identifier.identifier;
        });
        var affiliations = selectedSuggestions[0].extra.affiliations.map(function (affiliation) {
          return affiliation;
        });
        var personOrOrgPath = "person_or_org";
        var familyNameFieldPath = "".concat(personOrOrgPath, ".family_name");
        var givenNameFieldPath = "".concat(personOrOrgPath, ".given_name");
        var identifiersFieldPath = "".concat(personOrOrgPath, ".identifiers");
        var affiliationsFieldPath = "affiliations";
        var chosen = (_chosen = {}, _defineProperty(_chosen, givenNameFieldPath, selectedSuggestions[0].extra.given_name), _defineProperty(_chosen, familyNameFieldPath, selectedSuggestions[0].extra.family_name), _defineProperty(_chosen, identifiersFieldPath, identifiers), _defineProperty(_chosen, affiliationsFieldPath, affiliations), _chosen);
        Object.entries(chosen).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              path = _ref4[0],
              value = _ref4[1];

          formikProps.form.setFieldValue(path, value);
        }); // Update identifiers render

        _this.identifiersRef.current.setState({
          selectedOptions: _this.identifiersRef.current.valuesToOptions(identifiers)
        }); // Update affiliations render


        var affiliationsState = affiliations.map(function (_ref5) {
          var name = _ref5.name;
          return {
            text: name,
            value: name,
            key: name,
            name: name
          };
        });

        _this.affiliationsRef.current.setState({
          suggestions: affiliationsState,
          selectedSuggestions: affiliationsState,
          searchQuery: null,
          error: false,
          open: false
        });
      });
    };

    _this.state = {
      open: false,
      saveAndContinueLabel: i18next.t("Save and add another"),
      action: null,
      showPersonForm: props.autocompleteNames !== NamesAutocompleteOptions.SEARCH_ONLY || !_isEmpty(props.initialCreatibutor)
    };
    _this.inputRef = /*#__PURE__*/createRef();
    _this.identifiersRef = /*#__PURE__*/createRef();
    _this.affiliationsRef = /*#__PURE__*/createRef();
    _this.namesAutocompleteRef = /*#__PURE__*/createRef();
    return _this;
  }

  _createClass(CreatibutorsModal, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          initialCreatibutor = _this$props2.initialCreatibutor,
          autocompleteNames = _this$props2.autocompleteNames,
          roleOptions = _this$props2.roleOptions,
          trigger = _this$props2.trigger,
          action = _this$props2.action;
      var _this$state = this.state,
          open = _this$state.open,
          showPersonForm = _this$state.showPersonForm,
          saveAndContinueLabel = _this$state.saveAndContinueLabel;

      var ActionLabel = function ActionLabel() {
        return _this2.displayActionLabel();
      };

      return /*#__PURE__*/React.createElement(Formik, {
        initialValues: this.deserializeCreatibutor(initialCreatibutor),
        onSubmit: this.onSubmit,
        enableReinitialize: true,
        validationSchema: this.CreatorSchema,
        validateOnChange: false,
        validateOnBlur: false
      }, function (_ref6) {
        var values = _ref6.values,
            resetForm = _ref6.resetForm,
            handleSubmit = _ref6.handleSubmit;
        var personOrOrgPath = "person_or_org";
        var typeFieldPath = "".concat(personOrOrgPath, ".type");
        var familyNameFieldPath = "".concat(personOrOrgPath, ".family_name");
        var givenNameFieldPath = "".concat(personOrOrgPath, ".given_name");
        var nameFieldPath = "".concat(personOrOrgPath, ".name");
        var identifiersFieldPath = "".concat(personOrOrgPath, ".identifiers");
        var affiliationsFieldPath = "affiliations";
        var roleFieldPath = "role";
        return /*#__PURE__*/React.createElement(Modal, {
          centered: false,
          onOpen: function onOpen() {
            return _this2.openModal();
          },
          open: open,
          trigger: trigger,
          onClose: function onClose() {
            _this2.closeModal();

            resetForm();
          },
          closeIcon: true,
          closeOnDimmerClick: false
        }, /*#__PURE__*/React.createElement(Modal.Header, {
          as: "h6",
          className: "pt-10 pb-10"
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Grid.Column, {
          floated: "left",
          width: 4
        }, /*#__PURE__*/React.createElement(Header, {
          as: "h2"
        }, /*#__PURE__*/React.createElement(ActionLabel, null))))), /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(Form.Group, null, /*#__PURE__*/React.createElement(RadioField, {
          fieldPath: typeFieldPath,
          label: i18next.t("Person"),
          checked: _get(values, typeFieldPath) === CREATIBUTOR_TYPE.PERSON,
          value: CREATIBUTOR_TYPE.PERSON,
          onChange: function onChange(_ref7) {
            var formikProps = _ref7.formikProps;
            formikProps.form.setFieldValue(typeFieldPath, CREATIBUTOR_TYPE.PERSON);
          },
          optimized: true
        }), /*#__PURE__*/React.createElement(RadioField, {
          fieldPath: typeFieldPath,
          label: i18next.t("Organization"),
          checked: _get(values, typeFieldPath) === CREATIBUTOR_TYPE.ORGANIZATION,
          value: CREATIBUTOR_TYPE.ORGANIZATION,
          onChange: function onChange(_ref8) {
            var formikProps = _ref8.formikProps;
            formikProps.form.setFieldValue(typeFieldPath, CREATIBUTOR_TYPE.ORGANIZATION);

            _this2.focusInput();
          },
          optimized: true
        })), _get(values, typeFieldPath, "") === CREATIBUTOR_TYPE.PERSON ? /*#__PURE__*/React.createElement("div", null, autocompleteNames !== NamesAutocompleteOptions.OFF && /*#__PURE__*/React.createElement(RemoteSelectField, {
          selectOnBlur: false,
          selectOnNavigation: false,
          searchInput: {
            autoFocus: _isEmpty(initialCreatibutor)
          },
          fieldPath: "creators",
          clearable: true,
          multiple: false,
          allowAdditions: false,
          placeholder: i18next.t("Search for persons by name, identifier, or affiliation..."),
          noQueryMessage: i18next.t("Search for persons by name, identifier, or affiliation..."),
          required: false // Disable UI-side filtering of search results
          ,
          search: function search(options) {
            return options;
          },
          suggestionAPIUrl: "/api/names",
          serializeSuggestions: _this2.serializeSuggestions,
          onValueChange: _this2.onPersonSearchChange,
          ref: _this2.namesAutocompleteRef
        }), showPersonForm && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form.Group, {
          widths: "equal"
        }, /*#__PURE__*/React.createElement(TextField, {
          label: i18next.t("Family name"),
          placeholder: i18next.t("Family name"),
          fieldPath: familyNameFieldPath,
          required: _this2.isCreator()
        }), /*#__PURE__*/React.createElement(TextField, {
          label: i18next.t("Given names"),
          placeholder: i18next.t("Given names"),
          fieldPath: givenNameFieldPath
        })), /*#__PURE__*/React.createElement(Form.Group, {
          widths: "equal"
        }, /*#__PURE__*/React.createElement(CreatibutorsIdentifiers, {
          initialOptions: _map(_get(values, identifiersFieldPath, []), function (identifier) {
            return {
              text: identifier,
              value: identifier,
              key: identifier
            };
          }),
          fieldPath: identifiersFieldPath,
          ref: _this2.identifiersRef
        })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextField, {
          label: i18next.t("Name"),
          placeholder: i18next.t("Organization name"),
          fieldPath: nameFieldPath,
          required: _this2.isCreator() // forward ref to Input component because Form.Input
          // doesn't handle it
          ,
          input: {
            ref: _this2.inputRef
          }
        }), /*#__PURE__*/React.createElement(CreatibutorsIdentifiers, {
          initialOptions: _map(_get(values, identifiersFieldPath, []), function (identifier) {
            return {
              text: identifier,
              value: identifier,
              key: identifier
            };
          }),
          fieldPath: identifiersFieldPath,
          placeholder: i18next.t("e.g. ROR, ISNI or GND.")
        })), (_get(values, typeFieldPath) === CREATIBUTOR_TYPE.ORGANIZATION || showPersonForm && _get(values, typeFieldPath) === CREATIBUTOR_TYPE.PERSON) && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(AffiliationsField, {
          fieldPath: affiliationsFieldPath,
          selectRef: _this2.affiliationsRef
        }), /*#__PURE__*/React.createElement(SelectField, Object.assign({
          fieldPath: roleFieldPath,
          label: i18next.t("Role"),
          options: roleOptions,
          placeholder: i18next.t("Select role")
        }, _this2.isCreator() && {
          clearable: true
        }, {
          required: !_this2.isCreator(),
          optimized: true,
          scrolling: true
        }))))), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
          name: "cancel",
          onClick: function onClick() {
            resetForm();

            _this2.closeModal();
          },
          icon: "remove",
          content: i18next.t("Cancel"),
          floated: "left"
        }), action === ModalActions$2.ADD && /*#__PURE__*/React.createElement(Button, {
          name: "submit",
          onClick: function onClick() {
            _this2.setState({
              action: "saveAndContinue",
              showPersonForm: autocompleteNames !== NamesAutocompleteOptions.SEARCH_ONLY
            }, function () {
              handleSubmit();
            });
          },
          primary: true,
          icon: "checkmark",
          content: saveAndContinueLabel
        }), /*#__PURE__*/React.createElement(Button, {
          name: "submit",
          onClick: function onClick() {
            _this2.setState({
              action: "saveAndClose",
              showPersonForm: autocompleteNames !== NamesAutocompleteOptions.SEARCH_ONLY
            }, function () {
              return handleSubmit();
            });
          },
          primary: true,
          icon: "checkmark",
          content: i18next.t("Save")
        })));
      });
    }
  }]);

  return CreatibutorsModal;
}(Component);
CreatibutorsModal.defaultProps = {
  roleOptions: [],
  initialCreatibutor: {},
  autocompleteNames: "search"
};

var CreatibutorsFieldItem = function CreatibutorsFieldItem(_ref) {
  var compKey = _ref.compKey,
      identifiersError = _ref.identifiersError,
      index = _ref.index,
      replaceCreatibutor = _ref.replaceCreatibutor,
      removeCreatibutor = _ref.removeCreatibutor,
      moveCreatibutor = _ref.moveCreatibutor,
      addLabel = _ref.addLabel,
      editLabel = _ref.editLabel,
      initialCreatibutor = _ref.initialCreatibutor,
      displayName = _ref.displayName,
      roleOptions = _ref.roleOptions,
      schema = _ref.schema,
      autocompleteNames = _ref.autocompleteNames;
  var dropRef = React.useRef(null); // eslint-disable-next-line no-unused-vars

  var _useDrag = useDrag({
    item: {
      index: index,
      type: "creatibutor"
    }
  }),
      _useDrag2 = _slicedToArray(_useDrag, 3);
      _useDrag2[0];
      var drag = _useDrag2[1],
      preview = _useDrag2[2];

  var _useDrop = useDrop({
    accept: "creatibutor",
    hover: function hover(item, monitor) {
      if (!dropRef.current) {
        return;
      }

      var dragIndex = item.index;
      var hoverIndex = index; // Don't replace items with themselves

      if (dragIndex === hoverIndex) {
        return;
      }

      if (monitor.isOver({
        shallow: true
      })) {
        moveCreatibutor(dragIndex, hoverIndex);
        item.index = hoverIndex;
      }
    },
    collect: function collect(monitor) {
      return {
        hidden: monitor.isOver({
          shallow: true
        })
      };
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      hidden = _useDrop2[0].hidden,
      drop = _useDrop2[1];

  var renderRole = function renderRole(role, roleOptions) {
    if (role) {
      var _roleOptions$find$tex, _roleOptions$find;

      var friendlyRole = (_roleOptions$find$tex = (_roleOptions$find = roleOptions.find(function (_ref2) {
        var value = _ref2.value;
        return value === role;
      })) === null || _roleOptions$find === void 0 ? void 0 : _roleOptions$find.text) !== null && _roleOptions$find$tex !== void 0 ? _roleOptions$find$tex : role;
      return /*#__PURE__*/React.createElement(Label, {
        size: "tiny"
      }, friendlyRole);
    }
  };

  var firstError = identifiersError && identifiersError.find(function (elem) {
    return ![undefined, null].includes(elem);
  }); // Initialize the ref explicitely

  drop(dropRef);
  return /*#__PURE__*/React.createElement(Ref, {
    innerRef: dropRef,
    key: compKey
  }, /*#__PURE__*/React.createElement(List.Item, {
    key: compKey,
    className: hidden ? "deposit-drag-listitem hidden" : "deposit-drag-listitem"
  }, /*#__PURE__*/React.createElement(List.Content, {
    floated: "right"
  }, /*#__PURE__*/React.createElement(CreatibutorsModal, {
    addLabel: addLabel,
    editLabel: editLabel,
    onCreatibutorChange: function onCreatibutorChange(selectedCreatibutor) {
      replaceCreatibutor(index, selectedCreatibutor);
    },
    initialCreatibutor: initialCreatibutor,
    roleOptions: roleOptions,
    schema: schema,
    autocompleteNames: autocompleteNames,
    action: "edit",
    trigger: /*#__PURE__*/React.createElement(Button, {
      size: "mini",
      primary: true,
      type: "button"
    }, i18next.t("Edit"))
  }), /*#__PURE__*/React.createElement(Button, {
    size: "mini",
    type: "button",
    onClick: function onClick() {
      return removeCreatibutor(index);
    }
  }, i18next.t("Remove"))), /*#__PURE__*/React.createElement(Ref, {
    innerRef: drag
  }, /*#__PURE__*/React.createElement(List.Icon, {
    name: "bars",
    className: "drag-anchor"
  })), /*#__PURE__*/React.createElement(Ref, {
    innerRef: preview
  }, /*#__PURE__*/React.createElement(List.Content, null, /*#__PURE__*/React.createElement(List.Description, null, /*#__PURE__*/React.createElement("span", {
    className: "creatibutor"
  }, _get(initialCreatibutor, "person_or_org.identifiers", []).some(function (identifier) {
    return identifier.scheme === "orcid";
  }) && /*#__PURE__*/React.createElement("img", {
    alt: "ORCID logo",
    className: "inline-id-icon mr-5",
    src: "/static/images/orcid.svg",
    width: "16",
    height: "16"
  }), _get(initialCreatibutor, "person_or_org.identifiers", []).some(function (identifier) {
    return identifier.scheme === "ror";
  }) && /*#__PURE__*/React.createElement("img", {
    alt: "ROR logo",
    className: "inline-id-icon mr-5",
    src: "/static/images/ror-icon.svg",
    width: "16",
    height: "16"
  }), _get(initialCreatibutor, "person_or_org.identifiers", []).some(function (identifier) {
    return identifier.scheme === "gnd";
  }) && /*#__PURE__*/React.createElement("img", {
    alt: "GND logo",
    className: "inline-id-icon mr-5",
    src: "/static/images/gnd-icon.svg",
    width: "16",
    height: "16"
  }), displayName, " ", renderRole(initialCreatibutor === null || initialCreatibutor === void 0 ? void 0 : initialCreatibutor.role, roleOptions))), firstError && /*#__PURE__*/React.createElement(Label, {
    pointing: "left",
    prompt: true
  }, firstError.scheme ? firstError.scheme : "Invalid identifiers")))));
};
CreatibutorsFieldItem.defaultProps = {
  identifiersError: undefined,
  addLabel: undefined,
  editLabel: undefined,
  displayName: undefined,
  autocompleteNames: undefined
};

// This file is part of React-Invenio-Deposit
// Copyright (C) 2021 CERN.
// Copyright (C) 2021 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
function toCapitalCase(str) {
  return str[0].toUpperCase() + str.slice(1);
}
/**
 * Traverse the leaves (non-Object, non-Array values) of obj and execute func
 * on each.
 *
 * @param {object} obj - generic Object
 * @param {function} func - (leaf) => ... (identity by default)
 *
 */

function leafTraverse(obj) {
  var func = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (l) {
    return l;
  };

  if (typeof obj === "object") {
    // Objects and Arrays
    for (var key in obj) {
      leafTraverse(obj[key], func);
    }
  } else {
    func(obj);
  }
}
/**
 * Sort a list of string values (options).
 * @param {list} options
 * @returns
 */

function sortOptions(options) {
  return options.sort(function (o1, o2) {
    return o1.text.localeCompare(o2.text);
  });
}
/**
 * Scroll page to top
 */

function scrollTop() {
  window.scrollTo({
    top: 0,
    left: 0,
    behavior: "smooth"
  });
}

var creatibutorNameDisplay = function creatibutorNameDisplay(value) {
  var creatibutorType = _get(value, "person_or_org.type", CREATIBUTOR_TYPE.PERSON);

  var isPerson = creatibutorType === CREATIBUTOR_TYPE.PERSON;

  var familyName = _get(value, "person_or_org.family_name", "");

  var givenName = _get(value, "person_or_org.given_name", "");

  var affiliationName = _get(value, "affiliations[0].name", "");

  var name = _get(value, "person_or_org.name");

  var affiliation = affiliationName ? " (".concat(affiliationName, ")") : "";

  if (isPerson) {
    var givenNameSuffix = givenName ? ", ".concat(givenName) : "";
    return "".concat(familyName).concat(givenNameSuffix).concat(affiliation);
  }

  return "".concat(name).concat(affiliation);
};

var CreatibutorsFieldForm = /*#__PURE__*/function (_Component) {
  _inherits(CreatibutorsFieldForm, _Component);

  var _super = _createSuper(CreatibutorsFieldForm);

  function CreatibutorsFieldForm() {
    var _this;

    _classCallCheck(this, CreatibutorsFieldForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnContributorChange = function (selectedCreatibutor) {
      var formikArrayPush = _this.props.push;
      formikArrayPush(selectedCreatibutor);
    };

    return _this;
  }

  _createClass(CreatibutorsFieldForm, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$form = _this$props.form,
          values = _this$props$form.values,
          errors = _this$props$form.errors,
          initialErrors = _this$props$form.initialErrors,
          initialValues = _this$props$form.initialValues,
          formikArrayRemove = _this$props.remove,
          formikArrayReplace = _this$props.replace,
          formikArrayMove = _this$props.move,
          fieldPath = _this$props.name,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          roleOptions = _this$props.roleOptions,
          schema = _this$props.schema,
          modal = _this$props.modal,
          autocompleteNames = _this$props.autocompleteNames,
          addButtonLabel = _this$props.addButtonLabel;
      var creatibutorsList = getIn(values, fieldPath, []);
      var formikInitialValues = getIn(initialValues, fieldPath, []);
      var error = getIn(errors, fieldPath, null);
      var initialError = getIn(initialErrors, fieldPath, null);
      var creatibutorsError = error || creatibutorsList === formikInitialValues && initialError;
      return /*#__PURE__*/React.createElement(DndProvider, {
        backend: HTML5Backend
      }, /*#__PURE__*/React.createElement(Form.Field, {
        required: schema === "creators",
        className: creatibutorsError ? "error" : ""
      }, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }), /*#__PURE__*/React.createElement(List, null, creatibutorsList.map(function (value, index) {
        var _creatibutorsError$in, _creatibutorsError$in2;

        var key = "".concat(fieldPath, ".").concat(index);
        var identifiersError = creatibutorsError && ((_creatibutorsError$in = creatibutorsError[index]) === null || _creatibutorsError$in === void 0 ? void 0 : (_creatibutorsError$in2 = _creatibutorsError$in.person_or_org) === null || _creatibutorsError$in2 === void 0 ? void 0 : _creatibutorsError$in2.identifiers);
        var displayName = creatibutorNameDisplay(value);
        return /*#__PURE__*/React.createElement(CreatibutorsFieldItem, {
          key: key,
          identifiersError: identifiersError,
          displayName: displayName,
          index: index,
          roleOptions: roleOptions,
          schema: schema,
          compKey: key,
          initialCreatibutor: value,
          removeCreatibutor: formikArrayRemove,
          replaceCreatibutor: formikArrayReplace,
          moveCreatibutor: formikArrayMove,
          addLabel: modal.addLabel,
          editLabel: modal.editLabel,
          autocompleteNames: autocompleteNames
        });
      }), /*#__PURE__*/React.createElement(CreatibutorsModal, {
        onCreatibutorChange: this.handleOnContributorChange,
        action: "add",
        addLabel: modal.addLabel,
        editLabel: modal.editLabel,
        roleOptions: sortOptions(roleOptions),
        schema: schema,
        autocompleteNames: autocompleteNames,
        trigger: /*#__PURE__*/React.createElement(Button, {
          type: "button",
          icon: true,
          labelPosition: "left"
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "add"
        }), addButtonLabel)
      }), creatibutorsError && typeof creatibutorsError == "string" && /*#__PURE__*/React.createElement(Label, {
        pointing: "left",
        prompt: true
      }, creatibutorsError))));
    }
  }]);

  return CreatibutorsFieldForm;
}(Component);

var CreatibutorsField = /*#__PURE__*/function (_Component2) {
  _inherits(CreatibutorsField, _Component2);

  var _super2 = _createSuper(CreatibutorsField);

  function CreatibutorsField() {
    _classCallCheck(this, CreatibutorsField);

    return _super2.apply(this, arguments);
  }

  _createClass(CreatibutorsField, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React.createElement(FieldArray, {
        name: fieldPath,
        component: function component(formikProps) {
          return /*#__PURE__*/React.createElement(CreatibutorsFieldForm, Object.assign({}, formikProps, _this2.props));
        }
      });
    }
  }]);

  return CreatibutorsField;
}(Component);
CreatibutorsFieldForm.defaultProps = {
  autocompleteNames: "search",
  label: i18next.t("Creators"),
  labelIcon: "user",
  modal: {
    addLabel: i18next.t("Add creator"),
    editLabel: i18next.t("Edit creator")
  },
  addButtonLabel: i18next.t("Add creator")
};
CreatibutorsField.defaultProps = {
  autocompleteNames: "search",
  label: undefined,
  labelIcon: undefined,
  roleOptions: undefined,
  modal: {
    addLabel: i18next.t("Add creator"),
    editLabel: i18next.t("Edit creator")
  },
  addButtonLabel: i18next.t("Add creator")
};

var DatesField = /*#__PURE__*/function (_Component) {
  _inherits(DatesField, _Component);

  var _super = _createSuper(DatesField);

  function DatesField() {
    var _this;

    _classCallCheck(this, DatesField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.getRequiredOption = function (currentValue, arrayOfValues) {
      var requiredOptions = _this.props.requiredOptions;

      var _iterator = _createForOfIteratorHelper(requiredOptions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var requiredOption = _step.value;

          // If more values matched we do take the first value
          var matchingValue = _filter(arrayOfValues, _matches(requiredOption))[0];

          if (_isEqual(matchingValue, currentValue)) {
            return requiredOption;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    };

    return _this;
  }

  _createClass(DatesField, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          options = _this$props.options,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          placeholderDate = _this$props.placeholderDate,
          required = _this$props.required,
          requiredOptions = _this$props.requiredOptions,
          showEmptyValue = _this$props.showEmptyValue;
      return /*#__PURE__*/React.createElement(ArrayField, {
        addButtonLabel: i18next.t("Add date") // TODO: Pass by prop
        ,
        defaultNewValue: emptyDate,
        fieldPath: fieldPath,
        helpText: i18next.t("Format: DATE or DATE/DATE where DATE is YYYY or YYYY-MM or YYYY-MM-DD."),
        label: label,
        labelIcon: labelIcon,
        required: required,
        requiredOptions: requiredOptions,
        showEmptyValue: showEmptyValue
      }, function (_ref) {
        var array = _ref.array,
            arrayHelpers = _ref.arrayHelpers,
            indexPath = _ref.indexPath,
            value = _ref.value;
        var fieldPathPrefix = "".concat(fieldPath, ".").concat(indexPath);

        var requiredOption = _this2.getRequiredOption(value, array);

        var hasRequiredDateValue = _has(requiredOption, "date");

        var hasRequiredTypeValue = _has(requiredOption, "type");

        var hasRequiredDescriptionValue = _has(requiredOption, "description");

        return /*#__PURE__*/React.createElement(GroupField, {
          fieldPath: fieldPath,
          optimized: true
        }, /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".date"),
          label: i18next.t("Date"),
          placeholder: placeholderDate,
          disabled: hasRequiredDateValue,
          required: true,
          width: 5
        }), /*#__PURE__*/React.createElement(SelectField, {
          fieldPath: "".concat(fieldPathPrefix, ".type"),
          label: i18next.t("Type"),
          options: sortOptions(options.type),
          disabled: hasRequiredTypeValue,
          required: true,
          width: 5,
          optimized: true
        }), /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".description"),
          label: i18next.t("Description"),
          disabled: hasRequiredDescriptionValue,
          width: 5
        }), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Button, {
          "aria-label": i18next.t("Remove field"),
          className: "close-btn",
          disabled: !_isEmpty(requiredOption),
          icon: true,
          onClick: function onClick() {
            return arrayHelpers.remove(indexPath);
          },
          type: "button"
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "close"
        }))));
      });
    }
  }]);

  return DatesField;
}(Component);
DatesField.defaultProps = {
  label: i18next.t("Dates"),
  labelIcon: "calendar",
  placeholderDate: i18next.t("YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD"),
  required: false,
  requiredOptions: [],
  showEmptyValue: false
};

// This file is part of React-Invenio-Deposit
var DepositFormSubmitActions = {
  SAVE: "SAVE",
  PUBLISH: "PUBLISH",
  PUBLISH_WITHOUT_COMMUNITY: "PUBLISH_WITHOUT_COMMUNITY",
  PREVIEW: "PREVIEW",
  DELETE: "DELETE",
  RESERVE_PID: "RESERVE_PID",
  DISCARD_PID: "DISCARD_PID",
  SUBMIT_REVIEW: "SUBMIT_REVIEW"
};
/**
 * The current version of Formik does not allow to pass a context/arg to the submit action.
 * The assumption is that there must be only one Submit button in a form.
 * As a workaround, each submit button (Save, Publish, etc...) will:
 * 1. call `setSubmitContext` with the action name as first param (mandatory) and any extra context, if needed.
 * 2. call `formik.handleSubmit` to trigger the action.
 *
 * This might be fixed in future versions of Formik. See:
 * - https://github.com/jaredpalmer/formik/issues/214
 * - https://github.com/jaredpalmer/formik/issues/1792
 */

var DepositFormSubmitContext = /*#__PURE__*/React.createContext({
  setSubmitContext: undefined
});

var _excluded$c = ["draftExists", "isPublished", "isVersion", "actionState", "formik"];
// action
var DISCARD_CHANGES_LBL = i18next.t("discard changes");
var DISCARD_VERSION_LBL = i18next.t("discard version");
var DELETE_LBL = i18next.t("delete"); // action messages

var DISCARD_CHANGES_DLG = i18next.t("Are you sure you want to discard the changes to this draft?");
var DISCARD_VERSION_DLG = i18next.t("Are you sure you want to delete this new version?");
var DISCARD_DELETE_DLG = i18next.t("Are you sure you want to delete this draft?");

var DialogText = function DialogText(_ref) {
  var actionLbl = _ref.actionLbl;
  var text = "";

  switch (actionLbl) {
    case DISCARD_CHANGES_LBL:
      text = DISCARD_CHANGES_DLG;
      break;

    case DISCARD_VERSION_LBL:
      text = DISCARD_VERSION_DLG;
      break;

    case DELETE_LBL:
      text = DISCARD_DELETE_DLG;
      break;
  }

  return text;
};

var DeleteButtonComponent = /*#__PURE__*/function (_Component) {
  _inherits(DeleteButtonComponent, _Component);

  var _super = _createSuper(DeleteButtonComponent);

  function DeleteButtonComponent() {
    var _this;

    _classCallCheck(this, DeleteButtonComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      modalOpen: false
    };

    _this.openConfirmModal = function () {
      return _this.setState({
        modalOpen: true
      });
    };

    _this.closeConfirmModal = function () {
      return _this.setState({
        modalOpen: false
      });
    };

    _this.handleDelete = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
        var _this$props, isPublished, isVersion, formik, handleSubmit, setSubmitContext;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = _this.props, isPublished = _this$props.isPublished, isVersion = _this$props.isVersion, formik = _this$props.formik;
                handleSubmit = formik.handleSubmit;
                setSubmitContext = _this.context.setSubmitContext;
                setSubmitContext(DepositFormSubmitActions.DELETE, {
                  isDiscardingVersion: isPublished || isVersion
                });
                handleSubmit(event);

                _this.closeConfirmModal();

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();

    return _this;
  }

  _createClass(DeleteButtonComponent, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          draftExists = _this$props2.draftExists,
          isPublished = _this$props2.isPublished,
          isVersion = _this$props2.isVersion,
          actionState = _this$props2.actionState,
          formik = _this$props2.formik,
          ui = _objectWithoutProperties(_this$props2, _excluded$c);

      var modalOpen = this.state.modalOpen;
      var isSubmitting = formik.isSubmitting;

      var uiProps = _omit(ui, ["dispatch"]);

      var actionLbl = "";

      if (!isPublished) {
        actionLbl = isVersion ? DISCARD_VERSION_LBL : DELETE_LBL;
      } else {
        actionLbl = DISCARD_CHANGES_LBL;
      }

      var color = isPublished ? "warning" : "negative";
      var capitalizedActionLbl = toCapitalCase(actionLbl);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, Object.assign({
        disabled: !draftExists || isSubmitting,
        onClick: this.openConfirmModal,
        className: color,
        icon: true,
        loading: isSubmitting && actionState === DRAFT_DELETE_STARTED,
        labelPosition: "left"
      }, uiProps, {
        content: capitalizedActionLbl
      })), /*#__PURE__*/React.createElement(Modal, {
        open: modalOpen,
        onClose: this.closeConfirmModal,
        size: "tiny"
      }, /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(DialogText, {
        actionLbl: actionLbl
      })), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
        onClick: this.closeConfirmModal,
        floated: "left"
      }, i18next.t("Cancel")), /*#__PURE__*/React.createElement(Button, Object.assign({}, color, {
        onClick: this.handleDelete,
        loading: isSubmitting && actionState === DRAFT_DELETE_STARTED,
        icon: "trash alternate outline",
        content: capitalizedActionLbl
      })))));
    }
  }]);

  return DeleteButtonComponent;
}(Component);
DeleteButtonComponent.contextType = DepositFormSubmitContext;
DeleteButtonComponent.defaultProps = {
  draftExists: false,
  isPublished: false,
  isVersion: false,
  actionState: undefined
};

var mapStateToProps$b = function mapStateToProps(state) {
  var _state$deposit$record;

  return {
    draftExists: Boolean(state.deposit.record.id),
    isPublished: state.deposit.record.is_published,
    isVersion: ((_state$deposit$record = state.deposit.record.versions) === null || _state$deposit$record === void 0 ? void 0 : _state$deposit$record.index) > 1,
    actionState: state.deposit.actionState
  };
};

var DeleteButton = connect$1(mapStateToProps$b, null)(connect$2(DeleteButtonComponent));

var DepositFormTitleComponent = /*#__PURE__*/function (_Component) {
  _inherits(DepositFormTitleComponent, _Component);

  var _super = _createSuper(DepositFormTitleComponent);

  function DepositFormTitleComponent() {
    _classCallCheck(this, DepositFormTitleComponent);

    return _super.apply(this, arguments);
  }

  _createClass(DepositFormTitleComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          isPublished = _this$props.isPublished,
          isVersion = _this$props.isVersion;
      var content = "";

      if (!isPublished) {
        content = isVersion ? i18next.t("New version") : i18next.t("New upload");
      } else {
        content = i18next.t("Edit upload");
      }

      return /*#__PURE__*/React.createElement(Header, {
        as: "h1",
        icon: "upload",
        content: content
      });
    }
  }]);

  return DepositFormTitleComponent;
}(Component);

DepositFormTitleComponent.defaultProps = {
  isPublished: false,
  isVersion: false
};

var mapStateToProps$a = function mapStateToProps(state) {
  var _state$deposit$record;

  return {
    isPublished: state.deposit.record.is_published,
    isVersion: ((_state$deposit$record = state.deposit.record.versions) === null || _state$deposit$record === void 0 ? void 0 : _state$deposit$record.index) > 1
  };
};

var DepositFormTitle = connect$1(mapStateToProps$a, null)(DepositFormTitleComponent);

var DepositStatus = /*#__PURE__*/_createClass(function DepositStatus() {
  _classCallCheck(this, DepositStatus);
});
DepositStatus.DRAFT = "draft";
DepositStatus.NEW_VERSION_DRAFT = "new_version_draft";
DepositStatus.DRAFT_WITH_REVIEW = "draft_with_review";
DepositStatus.IN_REVIEW = "in_review";
DepositStatus.DECLINED = "declined";
DepositStatus.EXPIRED = "expired";
DepositStatus.PUBLISHED = "published";
DepositStatus.allowsReviewDeletionStates = [DepositStatus.DRAFT_WITH_REVIEW, DepositStatus.DECLINED, DepositStatus.EXPIRED];
DepositStatus.allowsReviewUpdateStates = [DepositStatus.DRAFT_WITH_REVIEW, DepositStatus.DECLINED, DepositStatus.EXPIRED, DepositStatus.DRAFT];
DepositStatus.disallowsSubmitForReviewStates = [DepositStatus.PUBLISHED, DepositStatus.IN_REVIEW, DepositStatus.NEW_VERSION_DRAFT];

function hasStatus(record) {
  var statuses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return statuses.includes(record.status);
}

function getSelectedCommunityMetadata(record, selectedCommunity) {
  switch (selectedCommunity) {
    case undefined:
      {
        var _record$parent, _record$parent$review, _record$parent$review2, _record$parent2, _record$parent2$commu;

        // when `undefined`, retrieve the community from the record, if previously selected
        var reviewCommunityId = (_record$parent = record.parent) === null || _record$parent === void 0 ? void 0 : (_record$parent$review = _record$parent.review) === null || _record$parent$review === void 0 ? void 0 : (_record$parent$review2 = _record$parent$review.receiver) === null || _record$parent$review2 === void 0 ? void 0 : _record$parent$review2.community;
        var defaultCommunityId = (_record$parent2 = record.parent) === null || _record$parent2 === void 0 ? void 0 : (_record$parent2$commu = _record$parent2.communities) === null || _record$parent2$commu === void 0 ? void 0 : _record$parent2$commu.default;
        var hasCommunity = reviewCommunityId || defaultCommunityId;

        if (!hasCommunity) {
          // community never selected
          return undefined;
        }

        var alreadyPublished = hasStatus(record, [DepositStatus.PUBLISHED, DepositStatus.NEW_VERSION_DRAFT]); // record should be expanded

        return alreadyPublished ? record.expanded.parent.communities.default : record.expanded.parent.review.receiver;
      }

    case null:
      // when value is `null`, the selected community was deselected
      return null;

    default:
      return selectedCommunity;
  }
}
/**
 * Given a draft and optionally a newly selected community, it computes multiple states. The computed
 * states are split in 2 namespaces, `ui` and `actions`. The former is holding state regarding
 * the UI components while the later holds the state that is used on redux actions. More specifically:
 *
 * - `actions.shouldUpdateReview`: true if the review associated with the draft needs to be updated or created i.e
 * all of the following are true:
 *     - user has selected a community
 *     - the selected community has a saved request in the backend
 *     - the draft status is one of `DepositStatus.allowsReviewUpdateStates`
 *     - the community selected for the draft has not a declined/expired request associated with it
 * - `actions.shouldDeleteReview`: true if the review associated with the draft needs to be deleted i.e
 * all of the following are true:
 *     - user has deselected a community
 *     - the draft status is one of `DepositStatus.allowsReviewDeletionStates`
 * - `actions.communityStateMustBeChecked`: true if one of the `shouldUpdateReview` or `shouldDeleteReview` is true
 * - `ui.showSubmitForReviewButton`: true if all of the following are true:
 *     - user has selected a community
 *     - the associated review for the selected community is not declined/expired
 *     - the record is not published
 * - `ui.disableSubmitForReviewButton`: true if all the following are true
 *     - `ui.showSubmitForReviewButton` is true
 *     - the draft status is one of `DepositStatus.disallowsSubmitForReviewStates`
 * - `ui.showChangeCommunityButton`: true if the associated review for the selected community is declined/expired
 * - `ui.showCommunitySelectionButton`: true if the record is not published
 * - `ui.disableCommunitySelectionButton`: true `ui.showCommunitySelectionButton` is true and any of the following is true:
 *     - the associated review for the selected community is declined/expired
 *     - the draft status is one of `DepositStatus.disallowsSubmitForReviewStates` and `ui.showCommunityHeader` is false
 * - `ui.showCommunityHeader`: false if all of the following is true:
 *     - the draft is published
 *     - the `record.parent.communities` is empty i.e the record was published without a community selected.
 *
 * When the `selectedCommunity` param is omitted, it will retrieve the community from the draft, if any.
 *
 * @param {object} record: the latest version of the record
 * @param {object} selectedCommunity: the selected community, `null` to deselect.
 * @returns a new state for the deposit form
 */


function computeDepositState(record) {
  var _record$parent3, _draftReview$receiver, _draftReview$receiver2, _record$parent4;

  var selectedCommunity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var depositStatusAllowsReviewDeletion = hasStatus(record, DepositStatus.allowsReviewDeletionStates);
  var depositStatusAllowsReviewUpdate = hasStatus(record, DepositStatus.allowsReviewUpdateStates);
  var depositStatusDisallowsSubmitForReview = hasStatus(record, DepositStatus.disallowsSubmitForReviewStates); // Serialize selectedCommunity

  var _selectedCommunity = getSelectedCommunityMetadata(record, selectedCommunity);

  var communityIsSelected = !_isEmpty(_selectedCommunity);
  var draftReview = record === null || record === void 0 ? void 0 : (_record$parent3 = record.parent) === null || _record$parent3 === void 0 ? void 0 : _record$parent3.review; // check if the selected community has a request created

  var isReviewForSelectedCommunityCreated = hasStatus(record, [DepositStatus.DRAFT_WITH_REVIEW]) && (draftReview === null || draftReview === void 0 ? void 0 : (_draftReview$receiver = draftReview.receiver) === null || _draftReview$receiver === void 0 ? void 0 : _draftReview$receiver.community) === (_selectedCommunity === null || _selectedCommunity === void 0 ? void 0 : _selectedCommunity.id); // check if the selected community has a declined or expired request

  var isReviewForSelectedCommunityDeclinedOrExpired = hasStatus(record, [DepositStatus.DECLINED, DepositStatus.EXPIRED]) && (draftReview === null || draftReview === void 0 ? void 0 : (_draftReview$receiver2 = draftReview.receiver) === null || _draftReview$receiver2 === void 0 ? void 0 : _draftReview$receiver2.community) === (_selectedCommunity === null || _selectedCommunity === void 0 ? void 0 : _selectedCommunity.id); // check if the record is published without a community selected

  var isRecordPublishedWithoutCommunity = hasStatus(record, [DepositStatus.PUBLISHED, DepositStatus.NEW_VERSION_DRAFT]) && _isEmpty((_record$parent4 = record.parent) === null || _record$parent4 === void 0 ? void 0 : _record$parent4.communities); // show submit for review button conditions extracted to be reused


  var _showSubmitReviewButton = communityIsSelected && !isReviewForSelectedCommunityDeclinedOrExpired && !hasStatus(record, [DepositStatus.PUBLISHED, DepositStatus.NEW_VERSION_DRAFT]); // show community selection button conditions extracted to be reused


  var _showCommunitySelectionButton = !hasStatus(record, [DepositStatus.PUBLISHED, DepositStatus.NEW_VERSION_DRAFT]);

  var shouldUpdateReview = communityIsSelected && depositStatusAllowsReviewUpdate && !isReviewForSelectedCommunityCreated && !isReviewForSelectedCommunityDeclinedOrExpired;
  var shouldDeleteReview = !communityIsSelected && depositStatusAllowsReviewDeletion;

  var _disableCommunitySelectionButton = _showCommunitySelectionButton && (isReviewForSelectedCommunityDeclinedOrExpired || depositStatusDisallowsSubmitForReview && !isRecordPublishedWithoutCommunity);

  return {
    selectedCommunity: _selectedCommunity,
    ui: {
      showSubmitForReviewButton: _showSubmitReviewButton,
      disableSubmitForReviewButton: _showSubmitReviewButton && depositStatusDisallowsSubmitForReview,
      showChangeCommunityButton: isReviewForSelectedCommunityDeclinedOrExpired,
      showCommunitySelectionButton: _showCommunitySelectionButton,
      showCommunityHeader: !isRecordPublishedWithoutCommunity,
      disableCommunitySelectionButton: _disableCommunitySelectionButton
    },
    actions: {
      shouldUpdateReview: shouldUpdateReview,
      shouldDeleteReview: shouldDeleteReview,
      communityStateMustBeChecked: shouldUpdateReview || shouldDeleteReview
    }
  };
}

var depositReducer = function depositReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case DRAFT_SAVE_STARTED:
    case DRAFT_PUBLISH_STARTED:
    case DRAFT_DELETE_STARTED:
    case DRAFT_PREVIEW_STARTED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        actionState: action.type
      });

    case DRAFT_SUBMIT_REVIEW_STARTED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        actionState: action.type,
        actionStateExtra: {
          reviewComment: action.payload.reviewComment
        }
      });

    case RESERVE_PID_STARTED:
    case DISCARD_PID_STARTED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        actionState: action.type,
        actionStateExtra: {
          pidType: action.payload.pidType
        }
      });

    case DRAFT_FETCHED:
    case DRAFT_SAVE_SUCCEEDED:
    case RESERVE_PID_SUCCEEDED:
    case DISCARD_PID_SUCCEEDED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        record: _objectSpread2(_objectSpread2({}, state.record), action.payload.data),
        editorState: computeDepositState(action.payload.data, state.editorState.selectedCommunity),
        errors: {},
        actionState: action.type,
        actionStateExtra: {}
      });

    case DRAFT_HAS_VALIDATION_ERRORS:
    case DRAFT_PUBLISH_FAILED_WITH_VALIDATION_ERRORS:
    case DRAFT_SUBMIT_REVIEW_FAILED_WITH_VALIDATION_ERRORS:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        record: _objectSpread2(_objectSpread2({}, state.record), action.payload.data),
        editorState: computeDepositState(action.payload.data, state.editorState.selectedCommunity),
        errors: _objectSpread2({}, action.payload.errors),
        actionState: action.type
      });

    case DRAFT_SAVE_FAILED:
    case DRAFT_PUBLISH_FAILED:
    case DRAFT_DELETE_FAILED:
    case DRAFT_PREVIEW_FAILED:
    case RESERVE_PID_FAILED:
    case DISCARD_PID_FAILED:
    case DRAFT_SUBMIT_REVIEW_FAILED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        errors: _objectSpread2({}, action.payload.errors),
        actionState: action.type,
        actionStateExtra: {}
      });

    case SET_COMMUNITY:
      {
        var _action$payload, _action$payload$commu, _action$payload$commu2;

        var recordCopy = _objectSpread2({}, state.record);

        var isCommunityRestricted = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$commu = _action$payload.community) === null || _action$payload$commu === void 0 ? void 0 : (_action$payload$commu2 = _action$payload$commu.access) === null || _action$payload$commu2 === void 0 ? void 0 : _action$payload$commu2.visibility) === "restricted";
        var isRecordPublic = recordCopy.access.record === "public";

        if (isRecordPublic && isCommunityRestricted) {
          recordCopy = _objectSpread2(_objectSpread2({}, state.record), {}, {
            access: {
              files: "restricted",
              record: "restricted"
            }
          });
        }

        return _objectSpread2(_objectSpread2({}, state), {}, {
          record: recordCopy,
          editorState: computeDepositState(recordCopy, action.payload.community)
        });
      }

    default:
      return state;
  }
};

var _STATUSES;
var STATUSES = (_STATUSES = {}, _defineProperty(_STATUSES, DepositStatus.IN_REVIEW, {
  color: "warning",
  title: i18next.t("In review"),
  message: i18next.t("Community curators will review your upload. Once accepted, it will be published.")
}), _defineProperty(_STATUSES, DepositStatus.DECLINED, {
  color: "negative",
  title: i18next.t("Declined"),
  message: i18next.t("The request to submit this upload to the community was declined.")
}), _defineProperty(_STATUSES, DepositStatus.EXPIRED, {
  color: "expired",
  title: i18next.t("Expired"),
  message: i18next.t("The request to submit this upload to the community has expired.")
}), _defineProperty(_STATUSES, DepositStatus.PUBLISHED, {
  color: "positive",
  title: i18next.t("Published"),
  message: i18next.t("Your upload is published.")
}), _defineProperty(_STATUSES, DepositStatus.DRAFT_WITH_REVIEW, {
  color: "neutral",
  title: i18next.t("Draft"),
  message: i18next.t("Once your upload is complete, you can submit it for review to the community curators.")
}), _defineProperty(_STATUSES, DepositStatus.DRAFT, {
  color: "neutral",
  title: i18next.t("Draft"),
  message: i18next.t("Once your upload is complete, you can publish or submit it for review to the community curators.")
}), _defineProperty(_STATUSES, DepositStatus.NEW_VERSION_DRAFT, {
  color: "neutral",
  title: i18next.t("New version draft"),
  message: i18next.t("Once your upload is complete, you can publish it.")
}), _STATUSES);

var DepositStatusBoxComponent = function DepositStatusBoxComponent(_ref) {
  var depositReview = _ref.depositReview,
      depositStatus = _ref.depositStatus;
  var status = STATUSES[depositStatus];

  if (!status) {
    throw new Error("Status is undefined");
  }

  var isReviewStatus = depositStatus === DepositStatus.IN_REVIEW;
  return /*#__PURE__*/React.createElement(Grid, {
    verticalAlign: "middle"
  }, /*#__PURE__*/React.createElement(Grid.Row, {
    centered: true,
    className: "pt-5 pb-5 ".concat(status.color)
  }, /*#__PURE__*/React.createElement(Grid.Column, {
    width: isReviewStatus ? 8 : 16,
    textAlign: isReviewStatus ? "left" : "center"
  }, /*#__PURE__*/React.createElement("span", null, status.title), /*#__PURE__*/React.createElement(Popup, {
    trigger: /*#__PURE__*/React.createElement(Icon, {
      className: "ml-10",
      name: "info circle"
    }),
    content: status.message
  })), isReviewStatus && /*#__PURE__*/React.createElement(Grid.Column, {
    width: 8,
    textAlign: "right"
  }, /*#__PURE__*/React.createElement(Button, {
    href: "/me/requests/".concat(depositReview.id),
    target: "_blank",
    icon: "external alternate",
    content: i18next.t("View request"),
    size: "mini",
    className: "transparent",
    title: i18next.t("Opens in new tab")
  }))));
};

var mapStateToProps$9 = function mapStateToProps(state) {
  return {
    depositStatus: state.deposit.record.status,
    depositReview: state.deposit.record.status !== DepositStatus.DRAFT && state.deposit.record.parent.review
  };
};

var DepositStatusBox = connect$1(mapStateToProps$9, null)(DepositStatusBoxComponent);

var AdditionalDescriptionsField = /*#__PURE__*/function (_Component) {
  _inherits(AdditionalDescriptionsField, _Component);

  var _super = _createSuper(AdditionalDescriptionsField);

  function AdditionalDescriptionsField() {
    _classCallCheck(this, AdditionalDescriptionsField);

    return _super.apply(this, arguments);
  }

  _createClass(AdditionalDescriptionsField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          options = _this$props.options,
          recordUI = _this$props.recordUI,
          editorConfig = _this$props.editorConfig;
      return /*#__PURE__*/React.createElement(ArrayField, {
        addButtonLabel: i18next.t("Add description"),
        defaultNewValue: emptyAdditionalDescription,
        fieldPath: fieldPath,
        className: "additional-descriptions"
      }, function (_ref) {
        var _recordUI$additional_;

        var arrayHelpers = _ref.arrayHelpers,
            indexPath = _ref.indexPath;
        var fieldPathPrefix = "".concat(fieldPath, ".").concat(indexPath);
        return /*#__PURE__*/React.createElement(Grid, {
          className: "description"
        }, /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Column, {
          mobile: 16,
          tablet: 10,
          computer: 12
        }, /*#__PURE__*/React.createElement(RichInputField, {
          fieldPath: "".concat(fieldPathPrefix, ".description"),
          label: i18next.t("Additional Description"),
          editorConfig: editorConfig,
          optimized: true,
          required: true
        })), /*#__PURE__*/React.createElement(Grid.Column, {
          mobile: 16,
          tablet: 6,
          computer: 4
        }, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Button, {
          "aria-label": i18next.t("Remove field"),
          className: "close-btn",
          floated: "right",
          icon: true,
          onClick: function onClick() {
            return arrayHelpers.remove(indexPath);
          }
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "close"
        }))), /*#__PURE__*/React.createElement(SelectField, {
          fieldPath: "".concat(fieldPathPrefix, ".type"),
          label: i18next.t("Type"),
          options: sortOptions(options.type),
          required: true,
          optimized: true
        }), /*#__PURE__*/React.createElement(LanguagesField, {
          serializeSuggestions: function serializeSuggestions(suggestions) {
            return suggestions.map(function (item) {
              return {
                text: item.title_l10n,
                value: item.id,
                fieldPathPrefix: item.id
              };
            });
          },
          initialOptions: recordUI !== null && recordUI !== void 0 && recordUI.additional_descriptions && (_recordUI$additional_ = recordUI.additional_descriptions[indexPath]) !== null && _recordUI$additional_ !== void 0 && _recordUI$additional_.lang ? [recordUI.additional_descriptions[indexPath].lang] : [],
          fieldPath: "".concat(fieldPathPrefix, ".lang"),
          label: i18next.t("Language"),
          multiple: false,
          placeholder: i18next.t("Select language"),
          labelIcon: "",
          clearable: true,
          selectOnBlur: false
        }))));
      });
    }
  }]);

  return AdditionalDescriptionsField;
}(Component);
AdditionalDescriptionsField.defaultProps = {
  recordUI: {},
  editorConfig: undefined
};

var DescriptionsField = /*#__PURE__*/function (_Component) {
  _inherits(DescriptionsField, _Component);

  var _super = _createSuper(DescriptionsField);

  function DescriptionsField() {
    _classCallCheck(this, DescriptionsField);

    return _super.apply(this, arguments);
  }

  _createClass(DescriptionsField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          options = _this$props.options,
          editorConfig = _this$props.editorConfig,
          recordUI = _this$props.recordUI;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RichInputField, {
        className: "description-field rel-mb-1",
        fieldPath: fieldPath,
        editorConfig: editorConfig,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        optimized: true
      }), /*#__PURE__*/React.createElement(AdditionalDescriptionsField, {
        recordUI: recordUI,
        options: options,
        editorConfig: editorConfig,
        fieldPath: "metadata.additional_descriptions"
      }));
    }
  }]);

  return DescriptionsField;
}(Component);
DescriptionsField.defaultProps = {
  label: i18next.t("Description"),
  labelIcon: "pencil",
  editorConfig: undefined,
  recordUI: undefined
};

function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];

  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }

  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

var UploadState = {
  // initial: 'initial', // no file or the initial file selected
  uploading: "uploading",
  // currently uploading a file from the UI
  error: "error",
  // upload failed
  finished: "finished",
  // upload finished (uploaded file is the field's current file)
  pending: "pending" // files retrieved from the backend are in pending state

};
var initialState = {};

var fileReducer = function fileReducer() {
  var _action$payload$filen, _action$payload, _action$payload$filen2;

  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var newState; // Filename needs to be normalised due to encoding differences between client and server.

  var remoteFileName = (_action$payload$filen = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$filen2 = _action$payload.filename) === null || _action$payload$filen2 === void 0 ? void 0 : _action$payload$filen2.normalize()) !== null && _action$payload$filen !== void 0 ? _action$payload$filen : "";

  switch (action.type) {
    case FILE_UPLOAD_ADDED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2(_objectSpread2({}, state.entries), {}, _defineProperty({}, remoteFileName, {
          progressPercentage: 0,
          name: remoteFileName,
          size: 0,
          status: UploadState.pending,
          checksum: null,
          links: null,
          cancelUploadFn: null
        })),
        actionState: action.type
      });

    case FILE_UPLOAD_IN_PROGRESS:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2(_objectSpread2({}, state.entries), {}, _defineProperty({}, remoteFileName, _objectSpread2(_objectSpread2({}, state.entries[remoteFileName]), {}, {
          progressPercentage: action.payload.percent,
          status: UploadState.uploading
        }))),
        isFileUploadInProgress: true,
        actionState: action.type
      });

    case FILE_UPLOAD_FINISHED:
      newState = _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2(_objectSpread2({}, state.entries), {}, _defineProperty({}, remoteFileName, _objectSpread2(_objectSpread2({}, state.entries[remoteFileName]), {}, {
          status: UploadState.finished,
          size: action.payload.size,
          progressPercentage: 100,
          checksum: action.payload.checksum,
          links: action.payload.links,
          cancelUploadFn: null
        })))
      });
      return _objectSpread2(_objectSpread2({}, newState), {}, {
        isFileUploadInProgress: Object.values(newState.entries).some(function (value) {
          return value.status === UploadState.uploading;
        }),
        actionState: action.type
      });

    case FILE_UPLOAD_SAVE_DRAFT_FAILED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        errors: _objectSpread2({}, action.payload.errors),
        actionState: action.type
      });

    case FILE_UPLOAD_FAILED:
      newState = _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2(_objectSpread2({}, state.entries), {}, _defineProperty({}, remoteFileName, _objectSpread2(_objectSpread2({}, state.entries[remoteFileName]), {}, {
          status: UploadState.error,
          cancelUploadFn: null
        })))
      });
      return _objectSpread2(_objectSpread2({}, newState), {}, {
        isFileUploadInProgress: Object.values(newState.entries).some(function (value) {
          return value.status === UploadState.uploading;
        }),
        actionState: action.type
      });

    case FILE_UPLOAD_SET_CANCEL_FUNCTION:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2(_objectSpread2({}, state.entries), {}, _defineProperty({}, remoteFileName, _objectSpread2(_objectSpread2({}, state.entries[remoteFileName]), {}, {
          cancelUploadFn: action.payload.cancelUploadFn
        }))),
        actionState: action.type
      });

    case FILE_UPLOAD_CANCELLED:
      {
        // eslint-disable-next-line no-unused-vars
        var _state$entries = state.entries;
            _state$entries[remoteFileName];
            var afterCancellationEntriesState = _objectWithoutProperties(_state$entries, [remoteFileName].map(_toPropertyKey));

        return _objectSpread2(_objectSpread2({}, state), {}, {
          entries: _objectSpread2({}, afterCancellationEntriesState),
          isFileUploadInProgress: Object.values(afterCancellationEntriesState).some(function (value) {
            return value.status === UploadState.uploading;
          }),
          actionState: action.type
        });
      }

    case FILE_DELETED_SUCCESS:
      {
        // eslint-disable-next-line no-unused-vars
        var _state$entries2 = state.entries;
            _state$entries2[remoteFileName];
            var afterDeletionEntriesState = _objectWithoutProperties(_state$entries2, [remoteFileName].map(_toPropertyKey));

        return _objectSpread2(_objectSpread2({}, state), {}, {
          entries: _objectSpread2({}, afterDeletionEntriesState),
          isFileUploadInProgress: Object.values(afterDeletionEntriesState).some(function (value) {
            return value.status === UploadState.uploading;
          }),
          actionState: action.type
        });
      }

    case FILE_DELETE_FAILED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        actionState: action.type
      });

    case FILE_IMPORT_STARTED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileImportInProgress: true,
        actionState: action.type
      });

    case FILE_IMPORT_SUCCESS:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        entries: _objectSpread2({}, action.payload.files),
        isFileImportInProgress: false,
        actionState: action.type
      });

    case FILE_IMPORT_FAILED:
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileImportInProgress: false,
        actionState: action.type
      });

    default:
      return state;
  }
};

var _excluded$b = ["onError", "record", "disabled"];
var NewVersionButton = function NewVersionButton(_ref) {
  var onError = _ref.onError,
      record = _ref.record,
      disabled = _ref.disabled,
      uiProps = _objectWithoutProperties(_ref, _excluded$b);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var handleClick = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setLoading(true);
              _context.prev = 1;
              _context.next = 4;
              return http.post(record.links.versions);

            case 4:
              response = _context.sent;
              window.location = response.data.links.self_html;
              _context.next = 13;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);
              console.error(_context.t0);
              setLoading(false);
              onError(_context.t0.response.data.message);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 8]]);
    }));

    return function handleClick() {
      return _ref2.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/React.createElement(Popup, {
    content: i18next.t("You don't have permissions to create a new version."),
    disabled: !disabled,
    trigger: /*#__PURE__*/React.createElement(Button, Object.assign({
      type: "button",
      positive: true,
      size: "mini",
      onClick: handleClick,
      loading: loading,
      icon: true,
      labelPosition: "left"
    }, uiProps), /*#__PURE__*/React.createElement(Icon, {
      name: "tag"
    }), i18next.t("New version"))
  });
};
NewVersionButton.defaultProps = {
  disabled: false
};

// This file is part of React-Invenio-Deposit
function humanReadableBytes(bytes) {
  var decimalDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_isNumber(bytes)) {
    var base = decimalDisplay ? 1000 : 1024;
    var kiloBytes = base;
    var megaBytes = base * kiloBytes;
    var gigaBytes = base * megaBytes;

    if (bytes < kiloBytes) {
      return "".concat(bytes, " bytes");
    } else if (bytes < megaBytes) {
      return "".concat((bytes / kiloBytes).toFixed(2), " ").concat(decimalDisplay ? "KB" : "KiB");
    } else if (bytes < gigaBytes) {
      return "".concat((bytes / megaBytes).toFixed(2), " ").concat(decimalDisplay ? "MB" : "MiB");
    } else {
      return "".concat((bytes / gigaBytes).toFixed(2), " ").concat(decimalDisplay ? "GB" : "GiB");
    }
  }

  return "";
}

var FileTableHeader = function FileTableHeader(_ref) {
  var isDraftRecord = _ref.isDraftRecord;
  return /*#__PURE__*/React.createElement(Table.Header, null, /*#__PURE__*/React.createElement(Table.Row, null, /*#__PURE__*/React.createElement(Table.HeaderCell, null, i18next.t("Preview"), " ", /*#__PURE__*/React.createElement(Popup, {
    content: "Set the default preview",
    trigger: /*#__PURE__*/React.createElement(Icon, {
      fitted: true,
      name: "help circle",
      size: "small"
    })
  })), /*#__PURE__*/React.createElement(Table.HeaderCell, null, i18next.t("Filename")), /*#__PURE__*/React.createElement(Table.HeaderCell, null, i18next.t("Size")), isDraftRecord && /*#__PURE__*/React.createElement(Table.HeaderCell, {
    textAlign: "center"
  }, i18next.t("Progress")), isDraftRecord && /*#__PURE__*/React.createElement(Table.HeaderCell, null)));
};

FileTableHeader.defaultProps = {
  isDraftRecord: false
};

var FileTableRow = function FileTableRow(_ref2) {
  var _file$uploadState, _file$uploadState2, _file$uploadState3, _file$uploadState4, _file$uploadState5;

  var isDraftRecord = _ref2.isDraftRecord,
      file = _ref2.file,
      deleteFile = _ref2.deleteFile,
      defaultPreview = _ref2.defaultPreview,
      setDefaultPreview = _ref2.setDefaultPreview,
      decimalSizeDisplay = _ref2.decimalSizeDisplay;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isCancelling = _useState2[0],
      setIsCancelling = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isDeleting = _useState4[0],
      setIsDeleting = _useState4[1];

  var isDefaultPreview = defaultPreview === file.name;

  var handleDelete = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(file) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              setIsDeleting(true);
              _context.prev = 1;
              _context.next = 4;
              return deleteFile(file);

            case 4:
              if (isDefaultPreview) {
                setDefaultPreview("");
              }

              _context.next = 10;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](1);
              console.error(_context.t0);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 7]]);
    }));

    return function handleDelete(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  var handleCancelUpload = function handleCancelUpload(file) {
    setIsCancelling(true);
    file.cancelUploadFn();
  };

  return /*#__PURE__*/React.createElement(Table.Row, {
    key: file.name
  }, /*#__PURE__*/React.createElement(Table.Cell, {
    "data-label": i18next.t("Default preview"),
    width: 2
  }, /*#__PURE__*/React.createElement(Checkbox, {
    checked: isDefaultPreview,
    onChange: function onChange() {
      return setDefaultPreview(isDefaultPreview ? "" : file.name);
    }
  })), /*#__PURE__*/React.createElement(Table.Cell, {
    "data-label": i18next.t("Filename"),
    width: 10
  }, /*#__PURE__*/React.createElement("div", null, file.uploadState.isPending ? file.name : /*#__PURE__*/React.createElement("a", {
    href: _get(file, "links.content", ""),
    target: "_blank",
    rel: "noopener noreferrer",
    className: "mr-5"
  }, file.name), /*#__PURE__*/React.createElement("br", null), file.checksum && /*#__PURE__*/React.createElement("div", {
    className: "ui text-muted"
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      fontSize: "10px"
    }
  }, file.checksum), " ", /*#__PURE__*/React.createElement(Popup, {
    content: i18next.t("This is the file fingerprint (MD5 checksum), which can be used to verify the file integrity."),
    trigger: /*#__PURE__*/React.createElement(Icon, {
      fitted: true,
      name: "help circle",
      size: "small"
    }),
    position: "top center"
  })))), /*#__PURE__*/React.createElement(Table.Cell, {
    "data-label": i18next.t("Size"),
    width: 2
  }, file.size ? humanReadableBytes(file.size, decimalSizeDisplay) : ""), isDraftRecord && /*#__PURE__*/React.createElement(Table.Cell, {
    className: "file-upload-pending",
    "data-label": i18next.t("Progress"),
    width: 2
  }, !((_file$uploadState = file.uploadState) !== null && _file$uploadState !== void 0 && _file$uploadState.isPending) && /*#__PURE__*/React.createElement(Progress$w, {
    className: "file-upload-progress primary",
    percent: file.progressPercentage,
    error: file.uploadState.isFailed,
    size: "medium",
    progress: true,
    autoSuccess: true,
    active: true
  }), ((_file$uploadState2 = file.uploadState) === null || _file$uploadState2 === void 0 ? void 0 : _file$uploadState2.isPending) && /*#__PURE__*/React.createElement("span", null, i18next.t("Pending"))), isDraftRecord && /*#__PURE__*/React.createElement(Table.Cell, {
    textAlign: "right",
    width: 2
  }, (((_file$uploadState3 = file.uploadState) === null || _file$uploadState3 === void 0 ? void 0 : _file$uploadState3.isFinished) || ((_file$uploadState4 = file.uploadState) === null || _file$uploadState4 === void 0 ? void 0 : _file$uploadState4.isFailed)) && (isDeleting ? /*#__PURE__*/React.createElement(Icon, {
    loading: true,
    name: "spinner"
  }) : /*#__PURE__*/React.createElement(Icon, {
    link: true,
    className: "action primary",
    name: "trash alternate outline",
    disabled: isDeleting,
    onClick: function onClick() {
      return handleDelete(file);
    },
    "aria-label": i18next.t("Delete file"),
    title: i18next.t("Delete file")
  })), ((_file$uploadState5 = file.uploadState) === null || _file$uploadState5 === void 0 ? void 0 : _file$uploadState5.isUploading) && /*#__PURE__*/React.createElement(Button, {
    compact: true,
    type: "button",
    negative: true,
    size: "tiny",
    disabled: isCancelling,
    onClick: function onClick() {
      return handleCancelUpload(file);
    }
  }, isCancelling ? /*#__PURE__*/React.createElement(Icon, {
    loading: true,
    name: "spinner"
  }) : i18next.t("Cancel"))));
};

FileTableRow.defaultProps = {
  isDraftRecord: false,
  file: undefined,
  defaultPreview: undefined,
  decimalSizeDisplay: false
};

var FileUploadBox = function FileUploadBox(_ref4) {
  var isDraftRecord = _ref4.isDraftRecord,
      filesList = _ref4.filesList,
      dragText = _ref4.dragText,
      uploadButtonIcon = _ref4.uploadButtonIcon,
      uploadButtonText = _ref4.uploadButtonText,
      openFileDialog = _ref4.openFileDialog;
  return isDraftRecord && /*#__PURE__*/React.createElement(Segment, {
    basic: true,
    padded: "very",
    className: filesList.length ? "file-upload-area" : "file-upload-area no-files"
  }, /*#__PURE__*/React.createElement(Grid, {
    columns: 3,
    textAlign: "center"
  }, /*#__PURE__*/React.createElement(Grid.Row, {
    verticalAlign: "middle"
  }, /*#__PURE__*/React.createElement(Grid.Column, {
    mobile: 16,
    tablet: 7,
    computer: 7
  }, /*#__PURE__*/React.createElement(Header, {
    size: "small"
  }, dragText)), /*#__PURE__*/React.createElement(Grid.Column, {
    className: "mt-10 mb-10",
    mobile: 16,
    tablet: 2,
    computer: 2
  }, "- ", i18next.t("or"), " -"), /*#__PURE__*/React.createElement(Grid.Column, {
    mobile: 16,
    tablet: 7,
    computer: 7
  }, /*#__PURE__*/React.createElement(Button, {
    type: "button",
    primary: true,
    labelPosition: "left",
    icon: uploadButtonIcon,
    content: uploadButtonText,
    onClick: function onClick() {
      return openFileDialog();
    },
    disabled: openFileDialog === null
  })))));
};

FileUploadBox.defaultProps = {
  filesList: undefined,
  dragText: undefined,
  uploadButtonIcon: undefined,
  uploadButtonText: undefined,
  openFileDialog: null
};

var FilesListTable = function FilesListTable(_ref5) {
  var isDraftRecord = _ref5.isDraftRecord,
      filesList = _ref5.filesList,
      deleteFile = _ref5.deleteFile,
      decimalSizeDisplay = _ref5.decimalSizeDisplay;

  var _useFormikContext = useFormikContext(),
      setFieldValue = _useFormikContext.setFieldValue,
      formikDraft = _useFormikContext.values;

  var defaultPreview = _get(formikDraft, "files.default_preview", "");

  return /*#__PURE__*/React.createElement(Table, null, /*#__PURE__*/React.createElement(FileTableHeader, {
    isDraftRecord: isDraftRecord
  }), /*#__PURE__*/React.createElement(Table.Body, null, filesList.map(function (file) {
    return /*#__PURE__*/React.createElement(FileTableRow, {
      key: file.name,
      isDraftRecord: isDraftRecord,
      file: file,
      deleteFile: deleteFile,
      defaultPreview: defaultPreview,
      setDefaultPreview: function setDefaultPreview(filename) {
        return setFieldValue("files.default_preview", filename);
      },
      decimalSizeDisplay: decimalSizeDisplay
    });
  })));
};

FilesListTable.defaultProps = {
  isDraftRecord: undefined,
  filesList: undefined,
  deleteFile: undefined,
  decimalSizeDisplay: undefined
};
var FileUploaderArea = /*#__PURE__*/function (_Component) {
  _inherits(FileUploaderArea, _Component);

  var _super = _createSuper(FileUploaderArea);

  function FileUploaderArea() {
    _classCallCheck(this, FileUploaderArea);

    return _super.apply(this, arguments);
  }

  _createClass(FileUploaderArea, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          filesEnabled = _this$props.filesEnabled,
          dropzoneParams = _this$props.dropzoneParams,
          filesList = _this$props.filesList;
      return filesEnabled ? /*#__PURE__*/React.createElement(Dropzone, dropzoneParams, function (_ref6) {
        var getRootProps = _ref6.getRootProps,
            getInputProps = _ref6.getInputProps,
            openFileDialog = _ref6.open;
        return /*#__PURE__*/React.createElement(Grid.Column, {
          width: 16
        }, /*#__PURE__*/React.createElement("span", getRootProps(), /*#__PURE__*/React.createElement("input", getInputProps()), filesList.length !== 0 && /*#__PURE__*/React.createElement(Grid.Column, {
          verticalAlign: "middle"
        }, /*#__PURE__*/React.createElement(FilesListTable, _this.props)), /*#__PURE__*/React.createElement(FileUploadBox, Object.assign({}, _this.props, {
          openFileDialog: openFileDialog
        }))));
      }) : /*#__PURE__*/React.createElement(Grid.Column, {
        width: 16
      }, /*#__PURE__*/React.createElement(Segment, {
        basic: true,
        padded: "very",
        className: "file-upload-area no-files"
      }, /*#__PURE__*/React.createElement(Grid, {
        textAlign: "center"
      }, /*#__PURE__*/React.createElement(Grid.Row, {
        verticalAlign: "middle"
      }, /*#__PURE__*/React.createElement(Grid.Column, null, /*#__PURE__*/React.createElement(Header, {
        size: "medium"
      }, i18next.t("This is a Metadata-only record.")))))));
    }
  }]);

  return FileUploaderArea;
}(Component);
FileUploaderArea.defaultProps = {
  deleteFile: undefined,
  dragText: undefined,
  dropzoneParams: undefined,
  filesList: undefined,
  isDraftRecord: false,
  links: undefined,
  setDefaultPreviewFile: undefined,
  uploadButtonIcon: undefined,
  uploadButtonText: undefined,
  decimalSizeDisplay: undefined
};

// This file is part of React-Invenio-Deposit
//       the `useFormikContext` hook.

var FileUploaderToolbar = function FileUploaderToolbar(props) {
  var config = props.config,
      filesList = props.filesList,
      filesSize = props.filesSize,
      filesEnabled = props.filesEnabled,
      quota = props.quota,
      decimalSizeDisplay = props.decimalSizeDisplay;

  var _useFormikContext = useFormikContext(),
      setFieldValue = _useFormikContext.setFieldValue;

  var handleOnChangeMetadataOnly = function handleOnChangeMetadataOnly() {
    setFieldValue("files.enabled", !filesEnabled);
    setFieldValue("access.files", "public");
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid.Column, {
    verticalAlign: "middle",
    floated: "left",
    mobile: 16,
    tablet: 6,
    computer: 6
  }, config.canHaveMetadataOnlyRecords && /*#__PURE__*/React.createElement(Overridable, Object.assign({
    id: "ReactInvenioDeposit.MetadataOnlyToggle.layout"
  }, props), /*#__PURE__*/React.createElement(List, {
    horizontal: true
  }, /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(Checkbox, {
    label: i18next.t("Metadata-only record"),
    onChange: handleOnChangeMetadataOnly,
    disabled: filesList.length > 0,
    checked: !filesEnabled
  })), /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(Popup, {
    trigger: /*#__PURE__*/React.createElement(Icon, {
      name: "question circle outline",
      className: "neutral"
    }),
    content: i18next.t("Disable files for this record"),
    position: "top center"
  }))))), filesEnabled && /*#__PURE__*/React.createElement(Grid.Column, {
    mobile: 16,
    tablet: 10,
    computer: 10,
    className: "storage-col"
  }, /*#__PURE__*/React.createElement(Header, {
    size: "tiny",
    className: "mr-10"
  }, i18next.t("Storage available")), /*#__PURE__*/React.createElement(List, {
    horizontal: true,
    floated: "right"
  }, /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(Label, filesList.length === quota.maxFiles ? {
    color: "blue"
  } : {}, i18next.t("{{length}} out of {{maxfiles}} files", {
    length: filesList.length,
    maxfiles: quota.maxFiles
  }))), /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(Label, humanReadableBytes(filesSize, decimalSizeDisplay) === humanReadableBytes(quota.maxStorage, decimalSizeDisplay) ? {
    color: "blue"
  } : {}, humanReadableBytes(filesSize, decimalSizeDisplay), " ", i18next.t("out of"), " ", humanReadableBytes(quota.maxStorage, decimalSizeDisplay))))));
};
FileUploaderToolbar.defaultProps = {
  config: undefined,
  filesList: undefined,
  filesSize: undefined,
  quota: undefined,
  decimalSizeDisplay: false
};

var _excluded$a = ["config", "files", "isDraftRecord", "hasParentRecord", "quota", "permissions", "record", "uploadFiles", "deleteFile", "importParentFiles", "importButtonIcon", "importButtonText", "isFileImportInProgress", "decimalSizeDisplay"];
//       the `useFormikContext` hook.

var FileUploaderComponent = function FileUploaderComponent(_ref) {
  var config = _ref.config,
      files = _ref.files,
      isDraftRecord = _ref.isDraftRecord,
      hasParentRecord = _ref.hasParentRecord,
      quota = _ref.quota,
      permissions = _ref.permissions,
      record = _ref.record,
      uploadFiles = _ref.uploadFiles,
      deleteFile = _ref.deleteFile,
      importParentFiles = _ref.importParentFiles,
      importButtonIcon = _ref.importButtonIcon,
      importButtonText = _ref.importButtonText,
      isFileImportInProgress = _ref.isFileImportInProgress,
      decimalSizeDisplay = _ref.decimalSizeDisplay,
      uiProps = _objectWithoutProperties(_ref, _excluded$a);

  // We extract the working copy of the draft stored as `values` in formik
  var _useFormikContext = useFormikContext(),
      formikDraft = _useFormikContext.values;

  var filesEnabled = _get(formikDraft, "files.enabled", false);

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      warningMsg = _useState2[0],
      setWarningMsg = _useState2[1];

  var filesList = Object.values(files).map(function (fileState) {
    return {
      name: fileState.name,
      size: fileState.size,
      checksum: fileState.checksum,
      links: fileState.links,
      uploadState: {
        // initial: fileState.status === UploadState.initial,
        isFailed: fileState.status === UploadState.error,
        isUploading: fileState.status === UploadState.uploading,
        isFinished: fileState.status === UploadState.finished,
        isPending: fileState.status === UploadState.pending
      },
      progressPercentage: fileState.progressPercentage,
      cancelUploadFn: fileState.cancelUploadFn
    };
  });
  var filesSize = filesList.reduce(function (totalSize, file) {
    return totalSize += file.size;
  }, 0);
  var dropzoneParams = {
    preventDropOnDocument: true,
    onDropAccepted: function onDropAccepted(acceptedFiles) {
      var maxFileNumberReached = filesList.length + acceptedFiles.length > quota.maxFiles;
      var acceptedFilesSize = acceptedFiles.reduce(function (totalSize, file) {
        return totalSize += file.size;
      }, 0);
      var maxFileStorageReached = filesSize + acceptedFilesSize > quota.maxStorage;

      var filesNames = _map(filesList, "name");

      var duplicateFiles = acceptedFiles.filter(function (acceptedFile) {
        return filesNames.includes(acceptedFile.name);
      });

      if (maxFileNumberReached) {
        setWarningMsg( /*#__PURE__*/React.createElement("div", {
          className: "content"
        }, /*#__PURE__*/React.createElement(Message, {
          warning: true,
          icon: "warning circle",
          header: "Could not upload files.",
          content: "Uploading the selected files would result in ".concat(filesList.length + acceptedFiles.length, " files (max.").concat(quota.maxFiles, ")")
        })));
      } else if (maxFileStorageReached) {
        setWarningMsg( /*#__PURE__*/React.createElement("div", {
          className: "content"
        }, /*#__PURE__*/React.createElement(Message, {
          warning: true,
          icon: "warning circle",
          header: "Could not upload files.",
          content: /*#__PURE__*/React.createElement(React.Fragment, null, i18next.t("Uploading the selected files would result in"), " ", humanReadableBytes(filesSize + acceptedFilesSize, decimalSizeDisplay), i18next.t("but the limit is"), humanReadableBytes(quota.maxStorage, decimalSizeDisplay), ".")
        })));
      } else if (!_isEmpty(duplicateFiles)) {
        setWarningMsg( /*#__PURE__*/React.createElement("div", {
          className: "content"
        }, /*#__PURE__*/React.createElement(Message, {
          warning: true,
          icon: "warning circle",
          header: i18next.t("The following files already exist"),
          list: _map(duplicateFiles, "name")
        })));
      } else {
        uploadFiles(formikDraft, acceptedFiles);
      }
    },
    multiple: true,
    noClick: true,
    noKeyboard: true,
    disabled: false
  };
  var filesLeft = filesList.length < quota.maxFiles;

  if (!filesLeft) {
    dropzoneParams["disabled"] = true;
  }

  var displayImportBtn = filesEnabled && isDraftRecord && hasParentRecord && !filesList.length;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Grid.Row, {
    className: "pt-10 pb-5"
  }, isDraftRecord && /*#__PURE__*/React.createElement(FileUploaderToolbar, Object.assign({}, uiProps, {
    config: config,
    filesEnabled: filesEnabled,
    filesList: filesList,
    filesSize: filesSize,
    isDraftRecord: isDraftRecord,
    quota: quota,
    decimalSizeDisplay: decimalSizeDisplay
  }))), displayImportBtn && /*#__PURE__*/React.createElement(Grid.Row, {
    className: "pb-5 pt-5"
  }, /*#__PURE__*/React.createElement(Grid.Column, {
    width: 16
  }, /*#__PURE__*/React.createElement(Message, {
    visible: true,
    info: true
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "inline-block",
      float: "right"
    }
  }, /*#__PURE__*/React.createElement(Button, {
    type: "button",
    size: "mini",
    primary: true,
    icon: importButtonIcon,
    content: importButtonText,
    onClick: function onClick() {
      return importParentFiles();
    },
    disabled: isFileImportInProgress,
    loading: isFileImportInProgress
  })), /*#__PURE__*/React.createElement("p", {
    style: {
      marginTop: "5px",
      display: "inline-block"
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "info circle"
  }), i18next.t("You can import files from the previous version."))))), filesEnabled && /*#__PURE__*/React.createElement(Grid.Row, {
    className: "pt-0 pb-0"
  }, /*#__PURE__*/React.createElement(FileUploaderArea, Object.assign({}, uiProps, {
    filesList: filesList,
    dropzoneParams: dropzoneParams,
    isDraftRecord: isDraftRecord,
    filesEnabled: filesEnabled,
    deleteFile: deleteFile,
    decimalSizeDisplay: decimalSizeDisplay
  }))), isDraftRecord ? /*#__PURE__*/React.createElement(Grid.Row, {
    className: "file-upload-note pt-5"
  }, /*#__PURE__*/React.createElement(Grid.Column, {
    width: 16
  }, /*#__PURE__*/React.createElement(Message, {
    visible: true,
    warning: true
  }, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement(Icon, {
    name: "warning sign"
  }), i18next.t("File addition, removal or modification are not allowed after you have published your upload."))))) : /*#__PURE__*/React.createElement(Grid.Row, {
    className: "file-upload-note pt-5"
  }, /*#__PURE__*/React.createElement(Grid.Column, {
    width: 16
  }, /*#__PURE__*/React.createElement(Message, {
    info: true
  }, /*#__PURE__*/React.createElement(NewVersionButton, {
    record: record,
    onError: function onError() {},
    className: "",
    disabled: !permissions.can_new_version,
    style: {
      float: "right"
    }
  }), /*#__PURE__*/React.createElement("p", {
    style: {
      marginTop: "5px",
      display: "inline-block"
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "info circle",
    size: "large"
  }), i18next.t("You must create a new version to add, modify or delete files.")))))), /*#__PURE__*/React.createElement(Modal, {
    open: !!warningMsg,
    header: "Warning!",
    content: warningMsg,
    onClose: function onClose() {
      return setWarningMsg();
    },
    closeIcon: true
  }));
};
FileUploaderComponent.defaultProps = {
  permissions: undefined,
  config: undefined,
  files: undefined,
  record: undefined,
  isFileImportInProgress: false,
  dragText: i18next.t("Drag and drop files"),
  isDraftRecord: true,
  hasParentRecord: false,
  quota: {
    maxFiles: 5,
    maxStorage: Math.pow(10, 10)
  },
  uploadButtonIcon: "upload",
  uploadButtonText: i18next.t("Upload files"),
  importButtonIcon: "sync",
  importButtonText: i18next.t("Import files"),
  decimalSizeDisplay: true
};

// This file is part of React-Invenio-Deposit

var mapStateToProps$8 = function mapStateToProps(state) {
  var _state$deposit$record, _state$deposit$record2, _state$deposit$record3, _state$deposit$record4;

  var _state$files = state.files,
      links = _state$files.links,
      entries = _state$files.entries;
  return {
    files: entries,
    links: links,
    record: state.deposit.record,
    config: state.deposit.config,
    permissions: state.deposit.permissions,
    isFileImportInProgress: state.files.isFileImportInProgress,
    hasParentRecord: Boolean(((_state$deposit$record = state.deposit.record) === null || _state$deposit$record === void 0 ? void 0 : (_state$deposit$record2 = _state$deposit$record.versions) === null || _state$deposit$record2 === void 0 ? void 0 : _state$deposit$record2.index) && ((_state$deposit$record3 = state.deposit.record) === null || _state$deposit$record3 === void 0 ? void 0 : (_state$deposit$record4 = _state$deposit$record3.versions) === null || _state$deposit$record4 === void 0 ? void 0 : _state$deposit$record4.index) > 1)
  };
};

var mapDispatchToProps$2 = function mapDispatchToProps(dispatch) {
  return {
    uploadFiles: function uploadFiles$1(draft, files) {
      return dispatch(uploadFiles(draft, files));
    },
    importParentFiles: function importParentFiles$1() {
      return dispatch(importParentFiles());
    },
    deleteFile: function deleteFile$1(file) {
      return dispatch(deleteFile(file));
    }
  };
};

var FileUploader = connect$1(mapStateToProps$8, mapDispatchToProps$2)(FileUploaderComponent);

var _ACTIONS;
var defaultLabels = {
  "files.enabled": i18next.t("Files"),
  "metadata.resource_type": i18next.t("Resource type"),
  "metadata.title": i18next.t("Title"),
  "metadata.additional_titles": i18next.t("Additional titles"),
  "metadata.publication_date": i18next.t("Publication date"),
  "metadata.creators": i18next.t("Creators"),
  "metadata.contributors": i18next.t("Contributors"),
  "metadata.description": i18next.t("Description"),
  "metadata.additional_descriptions": i18next.t("Additional descriptions"),
  "metadata.rights": i18next.t("Licenses"),
  "metadata.languages": i18next.t("Languages"),
  "metadata.dates": i18next.t("Dates"),
  "metadata.version": i18next.t("Version"),
  "metadata.publisher": i18next.t("Publisher"),
  "metadata.related_identifiers": i18next.t("Related works"),
  "metadata.identifiers": i18next.t("Alternate identifiers"),
  "access.embargo.until": i18next.t("Embargo until"),
  "pids.doi": i18next.t("DOI")
};
var ACTIONS = (_ACTIONS = {}, _defineProperty(_ACTIONS, DRAFT_SAVE_SUCCEEDED, {
  feedback: "positive",
  message: i18next.t("Record successfully saved.")
}), _defineProperty(_ACTIONS, DRAFT_HAS_VALIDATION_ERRORS, {
  feedback: "warning",
  message: i18next.t("Record saved with validation errors:")
}), _defineProperty(_ACTIONS, DRAFT_SAVE_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft was not saved. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, DRAFT_PUBLISH_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft was not published. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, DRAFT_PUBLISH_FAILED_WITH_VALIDATION_ERRORS, {
  feedback: "negative",
  message: i18next.t("The draft was not published. Record saved with validation errors:")
}), _defineProperty(_ACTIONS, DRAFT_SUBMIT_REVIEW_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft was not submitted for review. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, DRAFT_SUBMIT_REVIEW_FAILED_WITH_VALIDATION_ERRORS, {
  feedback: "negative",
  message: i18next.t("The draft was not submitted for review. Record saved with validation errors:")
}), _defineProperty(_ACTIONS, DRAFT_DELETE_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft was not deleted. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, DRAFT_PREVIEW_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft cannot be previewed. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, RESERVE_PID_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The identifier was not reserved. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, DISCARD_PID_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The identifier was not discarded. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, FILE_UPLOAD_SAVE_DRAFT_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! The draft could not be saved before uploading the file. Please try again. If the problem persists, contact user support.")
}), _defineProperty(_ACTIONS, FILE_IMPORT_FAILED, {
  feedback: "negative",
  message: i18next.t("Oops, something went wrong! Importing files from the previous version failed. Please try again. If the problem persists, contact user support.")
}), _ACTIONS);

var DisconnectedFormFeedback = /*#__PURE__*/function (_Component) {
  _inherits(DisconnectedFormFeedback, _Component);

  var _super = _createSuper(DisconnectedFormFeedback);

  function DisconnectedFormFeedback(props) {
    var _this;

    _classCallCheck(this, DisconnectedFormFeedback);

    _this = _super.call(this, props);
    _this.labels = _objectSpread2(_objectSpread2({}, defaultLabels), props.labels);
    return _this;
  }
  /**
   * Render error messages inline (if 1) or as list (if multiple).
   *
   * @param {Array<String>} messages
   * @returns String or React node
   */


  _createClass(DisconnectedFormFeedback, [{
    key: "renderErrorMessages",
    value: function renderErrorMessages(messages) {
      var uniqueMessages = _toConsumableArray(new Set(messages));

      if (uniqueMessages.length === 1) {
        return messages[0];
      } else {
        return /*#__PURE__*/React.createElement("ul", null, uniqueMessages.map(function (m) {
          return /*#__PURE__*/React.createElement("li", {
            key: m
          }, m);
        }));
      }
    }
    /**
     * Return array of error messages from errorValue object.
     *
     * The error message(s) might be deeply nested in the errorValue e.g.
     *
     * errorValue = [
     *   {
     *     title: "Missing value"
     *   }
     * ];
     *
     * @param {object} errorValue
     * @returns array of Strings (error messages)
     */

  }, {
    key: "toErrorMessages",
    value: function toErrorMessages(errorValue) {
      var messages = [];

      var store = function store(l) {
        messages.push(l);
      };

      leafTraverse(errorValue, store);
      return messages;
    }
    /**
     * Return object with human readbable labels as keys and error messages as
     * values given an errors object.
     *
     * @param {object} errors
     * @returns object
     */

  }, {
    key: "toLabelledErrorMessages",
    value: function toLabelledErrorMessages(errors) {
      var _errors$access,
          _this2 = this;

      // Step 0 - Create object with collapsed 1st and 2nd level keys
      //          e.g., {metadata: {creators: ,,,}} => {"metadata.creators": ...}
      // For now, only for metadata, files and access.embargo
      var metadata = errors.metadata || {};
      var step0Metadata = Object.entries(metadata).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        return ["metadata." + key, value];
      });
      var files = errors.files || {};
      var step0Files = Object.entries(files).map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            value = _ref4[1];

        return ["files." + key, value];
      });
      var access = ((_errors$access = errors.access) === null || _errors$access === void 0 ? void 0 : _errors$access.embargo) || {};
      var step0Access = Object.entries(access).map(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            key = _ref6[0],
            value = _ref6[1];

        return ["access.embargo." + key, value];
      });
      var pids = errors.pids || {};
      var step0Pids = _isObject(pids) ? Object.entries(pids).map(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            key = _ref8[0],
            value = _ref8[1];

        return ["pids." + key, value];
      }) : [["pids", pids]];
      var customFields = errors.custom_fields || {};
      var step0CustomFields = Object.entries(customFields).map(function (_ref9) {
        var _ref10 = _slicedToArray(_ref9, 2),
            key = _ref10[0],
            value = _ref10[1];

        return ["custom_fields." + key, value];
      });
      var step0 = Object.fromEntries(step0Metadata.concat(step0Files).concat(step0Access).concat(step0Pids).concat(step0CustomFields)); // Step 1 - Transform each error value into array of error messages

      var step1 = Object.fromEntries(Object.entries(step0).map(function (_ref11) {
        var _ref12 = _slicedToArray(_ref11, 2),
            key = _ref12[0],
            value = _ref12[1];

        return [key, _this2.toErrorMessages(value)];
      })); // Step 2 - Group error messages by label
      // (different error keys can map to same label e.g. title and
      // additional_titles)

      var labelledErrorMessages = {};

      for (var key in step1) {
        var label = this.labels[key] || "Unknown field";
        var messages = labelledErrorMessages[label] || [];
        labelledErrorMessages[label] = messages.concat(step1[key]);
      }

      return labelledErrorMessages;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          errorsProp = _this$props.errors,
          actionState = _this$props.actionState;
      var errors = errorsProp || {};

      var _get2 = _get(ACTIONS, actionState, {
        feedback: undefined,
        message: undefined
      }),
          feedback = _get2.feedback,
          message = _get2.message;

      if (!message) {
        // if no message to display, simply return null
        return null;
      }

      var labelledMessages = this.toLabelledErrorMessages(errors);
      var listErrors = Object.entries(labelledMessages).map(function (_ref13) {
        var _ref14 = _slicedToArray(_ref13, 2),
            label = _ref14[0],
            messages = _ref14[1];

        return /*#__PURE__*/React.createElement(Message.Item, {
          key: label
        }, /*#__PURE__*/React.createElement("b", null, label), ": ", _this3.renderErrorMessages(messages));
      }); // errors not related to validation, following a different format {status:.., message:..}

      var backendErrorMessage = errors.message;
      return /*#__PURE__*/React.createElement(Message, {
        visible: true,
        positive: feedback === "positive",
        warning: feedback === "warning",
        negative: feedback === "negative",
        className: "flashed top attached"
      }, /*#__PURE__*/React.createElement(Grid, {
        container: true
      }, /*#__PURE__*/React.createElement(Grid.Column, {
        width: 15,
        textAlign: "left"
      }, /*#__PURE__*/React.createElement("strong", null, backendErrorMessage || message), listErrors.length > 0 && /*#__PURE__*/React.createElement(Message.List, null, listErrors))));
    }
  }]);

  return DisconnectedFormFeedback;
}(Component);

DisconnectedFormFeedback.defaultProps = {
  errors: undefined,
  actionState: undefined,
  labels: undefined
};

var mapStateToProps$7 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState,
    errors: state.deposit.errors
  };
};

var FormFeedback = connect$1(mapStateToProps$7, null)(DisconnectedFormFeedback);

// This file is part of React-Invenio-Deposit
var AwardResults = withState(function (_ref) {
  var results = _ref.currentResultsState,
      deserializeAward = _ref.deserializeAward,
      deserializeFunder = _ref.deserializeFunder,
      computeFundingContents = _ref.computeFundingContents;
  return /*#__PURE__*/React.createElement(FastField, {
    name: "selectedFunding"
  }, function (_ref2) {
    var _ref2$form = _ref2.form,
        values = _ref2$form.values,
        setFieldValue = _ref2$form.setFieldValue;
    return /*#__PURE__*/React.createElement(Item.Group, null, results.data.hits.map(function (award) {
      var funder = award === null || award === void 0 ? void 0 : award.funder;
      var deserializedAward = deserializeAward(award);
      var deserializedFunder = deserializeFunder(funder);
      var funding = {
        award: deserializedAward,
        funder: deserializedFunder
      };

      var _computeFundingConten = computeFundingContents(funding),
          headerContent = _computeFundingConten.headerContent,
          descriptionContent = _computeFundingConten.descriptionContent,
          awardOrFunder = _computeFundingConten.awardOrFunder;

      return /*#__PURE__*/React.createElement(Item, {
        key: deserializedAward.id,
        onClick: function onClick() {
          return setFieldValue("selectedFunding", funding);
        },
        className: "license-item"
      }, /*#__PURE__*/React.createElement(Radio, {
        checked: _get(values, "selectedFunding.award.id") === funding.award.id,
        onChange: function onChange() {
          return setFieldValue("selectedFunding", funding);
        }
      }), /*#__PURE__*/React.createElement(Item.Content, {
        className: "license-item-content"
      }, /*#__PURE__*/React.createElement(Header, {
        size: "small"
      }, headerContent, awardOrFunder === "award" ? award.number && /*#__PURE__*/React.createElement(Label, {
        basic: true,
        size: "mini"
      }, award.number) : "", awardOrFunder === "award" ? award.url && /*#__PURE__*/React.createElement("a", {
        href: "".concat(award.url),
        target: "_blank",
        rel: "noopener noreferrer"
      }, /*#__PURE__*/React.createElement(Icon, {
        link: true,
        name: "external alternate",
        className: "spaced-left"
      })) : ""), /*#__PURE__*/React.createElement(Item.Description, {
        className: "license-item-description"
      }, descriptionContent)));
    }));
  });
});

function CustomAwardForm(_ref) {
  var deserializeFunder = _ref.deserializeFunder,
      selectedFunding = _ref.selectedFunding;

  function deserializeFunderToDropdown(funderItem) {
    var funderName = null;
    var funderPID = null;

    if (funderItem.name) {
      funderName = funderItem.name;
    }

    if (funderItem.pid) {
      funderPID = funderItem.pid;
    }

    if (!funderName && !funderPID) {
      return {};
    }

    return _objectSpread2(_objectSpread2({
      text: funderName || funderPID,
      value: funderItem.id,
      key: funderItem.id
    }, funderName && {
      name: funderName
    }), funderPID && {
      pid: funderPID
    });
  }

  function serializeFunderFromDropdown(funderDropObject) {
    return _objectSpread2(_objectSpread2({
      id: funderDropObject.key
    }, funderDropObject.name && {
      name: funderDropObject.name
    }), funderDropObject.pid && {
      pid: funderDropObject.pid
    });
  }

  return /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(RemoteSelectField, {
    fieldPath: "selectedFunding.funder.id",
    suggestionAPIUrl: "/api/funders",
    suggestionAPIHeaders: {
      Accept: "application/vnd.inveniordm.v1+json"
    },
    placeholder: i18next.t("Search for a funder by name"),
    serializeSuggestions: function serializeSuggestions(funders) {
      return funders.map(function (funder) {
        return deserializeFunderToDropdown(deserializeFunder(funder));
      });
    },
    searchInput: {
      autoFocus: _isEmpty(selectedFunding)
    },
    label: i18next.t("Funder"),
    noQueryMessage: i18next.t("Search for funder..."),
    clearable: true,
    allowAdditions: false,
    multiple: false,
    selectOnBlur: false,
    selectOnNavigation: false,
    required: true,
    search: function search(options) {
      return options;
    },
    onValueChange: function onValueChange(_ref2, selectedFundersArray) {
      var formikProps = _ref2.formikProps;

      if (selectedFundersArray.length === 1) {
        var selectedFunder = selectedFundersArray[0];

        if (selectedFunder) {
          var deserializedFunder = serializeFunderFromDropdown(selectedFunder);
          formikProps.form.setFieldValue("selectedFunding.funder", deserializedFunder);
        }
      }
    }
  }), /*#__PURE__*/React.createElement(Header, {
    as: "h3",
    size: "small"
  }, i18next.t("Award information"), " (", i18next.t("optional"), ")"), /*#__PURE__*/React.createElement(Form.Group, {
    widths: "equal"
  }, /*#__PURE__*/React.createElement(TextField, {
    label: i18next.t("Number"),
    placeholder: i18next.t("Award number"),
    fieldPath: "selectedFunding.award.number"
  }), /*#__PURE__*/React.createElement(TextField, {
    label: i18next.t("Title"),
    placeholder: i18next.t("Award Title"),
    fieldPath: "selectedFunding.award.title"
  }), /*#__PURE__*/React.createElement(TextField, {
    label: i18next.t("URL"),
    placeholder: i18next.t("Award URL"),
    fieldPath: "selectedFunding.award.url"
  })));
}

CustomAwardForm.defaultProps = {
  selectedFunding: undefined
};

var FunderDropdown = withState(function (_ref) {
  var awardsList = _ref.currentResultsState,
      updateQueryState = _ref.updateQueryState,
      currentQueryState = _ref.currentQueryState;

  var _useFundersFromFacets = useFundersFromFacets(awardsList),
      _useFundersFromFacets2 = _slicedToArray(_useFundersFromFacets, 1),
      fundersFromFacets = _useFundersFromFacets2[0];
  /**
   * Trigger on funder selection.
   * Updated the query state to filter by the selected funder.
   *
   * @param {*} event
   * @param {*} data
   */


  function onFunderSelect(event, data) {
    var newFilter = [];

    if (data && data.value !== "") {
      newFilter = ["funders", data.value];
    }

    updateQueryState(_objectSpread2(_objectSpread2({}, currentQueryState), {}, {
      filters: newFilter,
      page: 1
    }));
  }
  /**
   * Custom hook, triggered when the awards list changes.
   * It retrieves funders from new award's facets.
   *
   * @param {object} awards
   *
   * @returns {object[]} an array of objects, each representing a facetted funder.
   */


  function useFundersFromFacets(awards) {
    var _React$useState = React.useState([]),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        result = _React$useState2[0],
        setResult = _React$useState2[1];

    React.useEffect(function () {
      /**
       * Retrieves funders from awards facets and sets the result in state 'result'.
       */
      function getFundersFromAwardsFacet() {
        var _awards$data$aggregat, _awards$data$aggregat2;

        if (awards.loading) {
          setResult([]);
          return;
        }

        var funders = (_awards$data$aggregat = awards.data.aggregations) === null || _awards$data$aggregat === void 0 ? void 0 : (_awards$data$aggregat2 = _awards$data$aggregat.funders) === null || _awards$data$aggregat2 === void 0 ? void 0 : _awards$data$aggregat2.buckets.map(function (agg) {
          return {
            key: agg.key,
            value: agg.key,
            text: agg.label
          };
        });
        setResult(funders);
      }

      getFundersFromAwardsFacet();
    }, [awards]);
    return [result];
  }

  return /*#__PURE__*/React.createElement(Dropdown, {
    placeholder: i18next.t("Funder"),
    search: true,
    selection: true,
    clearable: true,
    scrolling: true,
    multiple: false,
    options: fundersFromFacets || [],
    allowAdditions: false,
    onChange: onFunderSelect,
    fluid: true,
    selectOnBlur: false,
    selectOnNavigation: false
  });
});

// This file is part of React-Invenio-Deposit
function NoAwardResults(_ref) {
  var switchToCustom = _ref.switchToCustom;
  return /*#__PURE__*/React.createElement(Segment, {
    basic: true,
    content: /*#__PURE__*/React.createElement("p", null, i18next.t("Did not find your award? "), /*#__PURE__*/React.createElement("a", {
      href: "/",
      onClick: function onClick(e) {
        e.preventDefault();
        switchToCustom();
      }
    }, i18next.t("Add a custom award.")))
  });
}

var _excluded$9 = ["action", "mode", "trigger", "onAwardChange", "searchConfig", "deserializeAward", "deserializeFunder", "computeFundingContents"];
var ModalTypes$1 = {
  STANDARD: "standard",
  CUSTOM: "custom"
};
var ModalActions$1 = {
  ADD: "add",
  EDIT: "edit"
};
var StandardSchema = Yup.object().shape({
  selectedFunding: Yup.object().shape({
    funder: Yup.object().shape({
      id: Yup.string().required()
    }),
    award: Yup.object().shape({
      id: Yup.string().required()
    })
  })
});
var CustomFundingSchema = Yup.object().shape({
  selectedFunding: Yup.object().shape({
    funder: Yup.object().shape({
      id: Yup.string().required(i18next.t("Funder is required."))
    }),
    award: Yup.object().shape({
      title: Yup.string().test({
        name: "testTitle",
        message: i18next.t("Title must be set alongside number."),
        test: function testTitle(value) {
          var number = this.parent.number;

          if (number && !value) {
            return false;
          }

          return true;
        }
      }),
      number: Yup.string().test({
        name: "testNumber",
        message: i18next.t("Number must be set alongside title."),
        test: function testNumber(value) {
          var title = this.parent.title;

          if (title && !value) {
            return false;
          }

          return true;
        }
      }),
      url: Yup.string().url(i18next.t("URL must be valid.")).test({
        name: "validateUrlDependencies",
        message: i18next.t("URL must be set alongside title and number."),
        test: function testUrl(value) {
          var _this$parent = this.parent,
              title = _this$parent.title,
              number = _this$parent.number;

          if (value && value !== "" && !title && !number) {
            return false;
          }

          return true;
        }
      })
    })
  })
});

function FundingModal(_ref) {
  var action = _ref.action,
      initialMode = _ref.mode,
      trigger = _ref.trigger,
      onAwardChange = _ref.onAwardChange,
      searchConfig = _ref.searchConfig,
      deserializeAward = _ref.deserializeAward,
      deserializeFunder = _ref.deserializeFunder,
      computeFundingContents = _ref.computeFundingContents,
      props = _objectWithoutProperties(_ref, _excluded$9);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = useState(initialMode),
      _useState4 = _slicedToArray(_useState3, 2),
      mode = _useState4[0],
      setMode = _useState4[1];

  var openModal = function openModal() {
    return setOpen(true);
  };

  var closeModal = function closeModal() {
    setMode(initialMode);
    setOpen(false);
  };

  var onSubmit = function onSubmit(values, formikBag) {
    formikBag.setSubmitting(false);
    formikBag.resetForm();
    setMode(initialMode);
    closeModal();
    onAwardChange(values.selectedFunding);
  };

  var searchApi = new InvenioSearchApi(searchConfig.searchApi);
  var customObject = mode === ModalTypes$1.CUSTOM ? props.initialFunding : {};
  var initialFunding = {
    selectedFunding: action === ModalActions$1.EDIT ? customObject : {}
  };
  var FundingSchema = mode === ModalTypes$1.CUSTOM ? CustomFundingSchema : StandardSchema;
  return /*#__PURE__*/React.createElement(Formik, {
    initialValues: initialFunding,
    onSubmit: onSubmit,
    validationSchema: FundingSchema,
    validateOnChange: false,
    validateOnBlur: false,
    enableReinitialize: true
  }, function (_ref2) {
    var values = _ref2.values,
        resetForm = _ref2.resetForm,
        handleSubmit = _ref2.handleSubmit;
    return /*#__PURE__*/React.createElement(Modal, {
      role: "dialog",
      centered: false,
      onOpen: openModal,
      open: open,
      trigger: /*#__PURE__*/React.cloneElement(trigger, {
        "aria-expanded": open,
        "aria-haspopup": "dialog"
      }),
      onClose: closeModal,
      closeIcon: true,
      closeOnDimmerClick: false
    }, /*#__PURE__*/React.createElement(Modal.Header, {
      as: "h2",
      className: "pt-10 pb-10"
    }, mode === "standard" ? i18next.t("Add standard award") : i18next.t("Add custom award")), /*#__PURE__*/React.createElement(Modal.Content, null, mode === ModalTypes$1.STANDARD && /*#__PURE__*/React.createElement(ReactSearchKit, {
      searchApi: searchApi,
      appName: "awards",
      urlHandlerApi: {
        enabled: false
      },
      initialQueryState: searchConfig.initialQueryState
    }, /*#__PURE__*/React.createElement(Grid, {
      className: "m-0"
    }, /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Column, {
      width: 11,
      floated: "left",
      verticalAlign: "middle"
    }, /*#__PURE__*/React.createElement(SearchBar, {
      placeholder: i18next.t("Search for awards"),
      autofocus: true,
      actionProps: {
        icon: "search",
        content: null,
        className: "search"
      }
    })), /*#__PURE__*/React.createElement(Grid.Column, {
      width: 5,
      floated: "right",
      textAlign: "right"
    }, /*#__PURE__*/React.createElement(FunderDropdown, null))), /*#__PURE__*/React.createElement(Grid.Column, {
      width: 16,
      className: "pb-0"
    }, /*#__PURE__*/React.createElement(ResultsLoader, null, /*#__PURE__*/React.createElement(EmptyResults, null), /*#__PURE__*/React.createElement(Error$1, null), /*#__PURE__*/React.createElement(AwardResults, {
      deserializeAward: deserializeAward,
      deserializeFunder: deserializeFunder,
      computeFundingContents: computeFundingContents
    })), /*#__PURE__*/React.createElement(Container, {
      textAlign: "center",
      className: "rel-mb-1"
    }, /*#__PURE__*/React.createElement(Pagination, null))), /*#__PURE__*/React.createElement(Grid.Column, {
      width: 16,
      textAlign: "center",
      className: "pt-0 pb-0"
    }, /*#__PURE__*/React.createElement(NoAwardResults, {
      switchToCustom: function switchToCustom() {
        resetForm();
        setMode(ModalTypes$1.CUSTOM);
      }
    })))), mode === ModalTypes$1.CUSTOM && /*#__PURE__*/React.createElement(CustomAwardForm, {
      deserializeFunder: deserializeFunder,
      selectedFunding: values.selectedFunding
    })), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
      onClick: function onClick() {
        resetForm();
        closeModal();
      },
      icon: "remove",
      content: i18next.t("Cancel"),
      floated: "left"
    }), /*#__PURE__*/React.createElement(Button, {
      onClick: function onClick(event) {
        return handleSubmit(event);
      },
      primary: true,
      icon: "checkmark",
      content: action === ModalActions$1.ADD ? i18next.t("Add award") : i18next.t("Change award")
    })));
  });
}

FundingModal.defaultProps = {
  initialFunding: undefined
};

var FundingFieldItem = function FundingFieldItem(_ref) {
  var _fundingItem$award, _fundingItem$award2;

  var compKey = _ref.compKey,
      index = _ref.index,
      fundingItem = _ref.fundingItem,
      awardType = _ref.awardType,
      moveFunding = _ref.moveFunding,
      replaceFunding = _ref.replaceFunding,
      removeFunding = _ref.removeFunding,
      searchConfig = _ref.searchConfig,
      deserializeAward = _ref.deserializeAward,
      deserializeFunder = _ref.deserializeFunder,
      computeFundingContents = _ref.computeFundingContents;
  var dropRef = React.useRef(null); // eslint-disable-next-line no-unused-vars

  var _useDrag = useDrag({
    item: {
      index: index,
      type: "award"
    }
  }),
      _useDrag2 = _slicedToArray(_useDrag, 3);
      _useDrag2[0];
      var drag = _useDrag2[1],
      preview = _useDrag2[2];

  var _useDrop = useDrop({
    accept: "award",
    hover: function hover(item, monitor) {
      if (!dropRef.current) {
        return;
      }

      var dragIndex = item.index;
      var hoverIndex = index; // Don't replace items with themselves

      if (dragIndex === hoverIndex) {
        return;
      }

      if (monitor.isOver({
        shallow: true
      })) {
        moveFunding(dragIndex, hoverIndex);
        item.index = hoverIndex;
      }
    },
    collect: function collect(monitor) {
      return {
        hidden: monitor.isOver({
          shallow: true
        })
      };
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      hidden = _useDrop2[0].hidden,
      drop = _useDrop2[1];

  var _computeFundingConten = computeFundingContents(fundingItem),
      headerContent = _computeFundingConten.headerContent,
      descriptionContent = _computeFundingConten.descriptionContent,
      awardOrFunder = _computeFundingConten.awardOrFunder; // Initialize the ref explicitely


  drop(dropRef);
  return /*#__PURE__*/React.createElement(Ref, {
    innerRef: dropRef,
    key: compKey
  }, /*#__PURE__*/React.createElement(List.Item, {
    key: compKey,
    className: hidden ? "deposit-drag-listitem hidden" : "deposit-drag-listitem"
  }, /*#__PURE__*/React.createElement(List.Content, {
    floated: "right"
  }, /*#__PURE__*/React.createElement(FundingModal, {
    searchConfig: searchConfig,
    onAwardChange: function onAwardChange(selectedFunding) {
      replaceFunding(index, selectedFunding);
    },
    mode: awardType,
    action: "edit",
    trigger: /*#__PURE__*/React.createElement(Button, {
      size: "mini",
      primary: true,
      type: "button"
    }, i18next.t("Edit")),
    deserializeAward: deserializeAward,
    deserializeFunder: deserializeFunder,
    computeFundingContents: computeFundingContents,
    initialFunding: fundingItem
  }), /*#__PURE__*/React.createElement(Button, {
    size: "mini",
    type: "button",
    onClick: function onClick() {
      return removeFunding(index);
    }
  }, i18next.t("Remove"))), /*#__PURE__*/React.createElement(Ref, {
    innerRef: drag
  }, /*#__PURE__*/React.createElement(List.Icon, {
    name: "bars",
    className: "drag-anchor"
  })), /*#__PURE__*/React.createElement(Ref, {
    innerRef: preview
  }, /*#__PURE__*/React.createElement(List.Content, null, /*#__PURE__*/React.createElement(List.Header, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: "mr-5"
  }, headerContent), awardOrFunder === "award" ? (fundingItem === null || fundingItem === void 0 ? void 0 : (_fundingItem$award = fundingItem.award) === null || _fundingItem$award === void 0 ? void 0 : _fundingItem$award.number) && /*#__PURE__*/React.createElement(Label, {
    basic: true,
    size: "mini",
    className: "mr-5"
  }, fundingItem.award.number) : "", awardOrFunder === "award" ? (fundingItem === null || fundingItem === void 0 ? void 0 : (_fundingItem$award2 = fundingItem.award) === null || _fundingItem$award2 === void 0 ? void 0 : _fundingItem$award2.url) && /*#__PURE__*/React.createElement("a", {
    href: "".concat(fundingItem.award.url),
    target: "_blank",
    rel: "noopener noreferrer",
    "aria-label": i18next.t("Open external link")
  }, /*#__PURE__*/React.createElement(Icon, {
    link: true,
    name: "external alternate"
  })) : "")), /*#__PURE__*/React.createElement(List.Description, null, descriptionContent ? descriptionContent : /*#__PURE__*/React.createElement("br", null))))));
};
FundingFieldItem.defaultProps = {
  compKey: undefined,
  index: undefined,
  fundingItem: undefined,
  awardType: undefined
};

function FundingFieldForm(props) {
  var label = props.label,
      labelIcon = props.labelIcon,
      fieldPath = props.fieldPath,
      values = props.form.values,
      formikArrayMove = props.move,
      formikArrayPush = props.push,
      formikArrayRemove = props.remove,
      formikArrayReplace = props.replace,
      required = props.required,
      deserializeAwardFunc = props.deserializeAward,
      deserializeFunderFunc = props.deserializeFunder,
      computeFundingContentsFunc = props.computeFundingContents,
      searchConfig = props.searchConfig;
  var deserializeAward = deserializeAwardFunc ? deserializeAwardFunc : function (award) {
    var _award$funder;

    return _objectSpread2(_objectSpread2({
      title: award === null || award === void 0 ? void 0 : award.title_l10n,
      number: award.number,
      funder: (_award$funder = award.funder) !== null && _award$funder !== void 0 ? _award$funder : "",
      id: award.id
    }, award.identifiers && {
      identifiers: award.identifiers
    }), award.acronym && {
      acronym: award.acronym
    });
  };
  var deserializeFunder = deserializeFunderFunc ? deserializeFunderFunc : function (funder) {
    return _objectSpread2(_objectSpread2(_objectSpread2({
      id: funder.id,
      name: funder.name
    }, funder.pid && {
      pid: funder.pid
    }), funder.country && {
      country: funder.country
    }), funder.identifiers && {
      identifiers: funder.identifiers
    });
  };
  var computeFundingContents = computeFundingContentsFunc ? computeFundingContentsFunc : function (funding) {
    var headerContent,
        descriptionContent = "";
    var awardOrFunder = "award";

    if (funding.award) {
      headerContent = funding.award.title;
    }

    if (funding.funder) {
      var _ref, _ref2, _funding$funder$name, _funding$funder, _funding$funder2, _funding$funder3;

      var funderName = (_ref = (_ref2 = (_funding$funder$name = funding === null || funding === void 0 ? void 0 : (_funding$funder = funding.funder) === null || _funding$funder === void 0 ? void 0 : _funding$funder.name) !== null && _funding$funder$name !== void 0 ? _funding$funder$name : (_funding$funder2 = funding.funder) === null || _funding$funder2 === void 0 ? void 0 : _funding$funder2.title) !== null && _ref2 !== void 0 ? _ref2 : funding === null || funding === void 0 ? void 0 : (_funding$funder3 = funding.funder) === null || _funding$funder3 === void 0 ? void 0 : _funding$funder3.id) !== null && _ref !== void 0 ? _ref : "";
      descriptionContent = funderName;

      if (!headerContent) {
        awardOrFunder = "funder";
        headerContent = funderName;
        descriptionContent = "";
      }
    }

    return {
      headerContent: headerContent,
      descriptionContent: descriptionContent,
      awardOrFunder: awardOrFunder
    };
  };
  return /*#__PURE__*/React.createElement(DndProvider, {
    backend: HTML5Backend
  }, /*#__PURE__*/React.createElement(Form.Field, {
    required: required
  }, /*#__PURE__*/React.createElement(FieldLabel, {
    htmlFor: fieldPath,
    icon: labelIcon,
    label: label
  }), /*#__PURE__*/React.createElement(List, null, getIn(values, fieldPath, []).map(function (value, index) {
    var _value$award;

    var key = "".concat(fieldPath, ".").concat(index); // if award does not exist or has no id, it's a custom one

    var awardType = value !== null && value !== void 0 && (_value$award = value.award) !== null && _value$award !== void 0 && _value$award.id ? "standard" : "custom";
    return /*#__PURE__*/React.createElement(FundingFieldItem, {
      key: key,
      index: index,
      compKey: key,
      fundingItem: value,
      awardType: awardType,
      moveFunding: formikArrayMove,
      replaceFunding: formikArrayReplace,
      removeFunding: formikArrayRemove,
      searchConfig: searchConfig,
      computeFundingContents: computeFundingContents,
      deserializeAward: deserializeAward,
      deserializeFunder: deserializeFunder
    });
  }), /*#__PURE__*/React.createElement(FundingModal, {
    searchConfig: searchConfig,
    trigger: /*#__PURE__*/React.createElement(Button, {
      type: "button",
      key: "custom",
      icon: true,
      labelPosition: "left",
      className: "mb-5"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "add"
    }), i18next.t("Add award")),
    onAwardChange: function onAwardChange(selectedFunding) {
      formikArrayPush(selectedFunding);
    },
    mode: "standard",
    action: "add",
    deserializeAward: deserializeAward,
    deserializeFunder: deserializeFunder,
    computeFundingContents: computeFundingContents
  }), /*#__PURE__*/React.createElement(FundingModal, {
    searchConfig: searchConfig,
    trigger: /*#__PURE__*/React.createElement(Button, {
      type: "button",
      key: "custom",
      icon: true,
      labelPosition: "left"
    }, /*#__PURE__*/React.createElement(Icon, {
      name: "add"
    }), i18next.t("Add custom")),
    onAwardChange: function onAwardChange(selectedFunding) {
      formikArrayPush(selectedFunding);
    },
    mode: "custom",
    action: "add",
    deserializeAward: deserializeAward,
    deserializeFunder: deserializeFunder,
    computeFundingContents: computeFundingContents
  }))));
}

FundingFieldForm.defaultProps = {
  label: undefined,
  labelIcon: undefined,
  form: undefined,
  move: undefined,
  push: undefined,
  remove: undefined,
  replace: undefined,
  required: undefined,
  deserializeAward: undefined,
  deserializeFunder: undefined,
  computeFundingContents: undefined,
  searchConfig: undefined
};
function FundingField$1(props) {
  var fieldPath = props.fieldPath;
  return /*#__PURE__*/React.createElement(FieldArray, {
    name: fieldPath,
    component: function component(formikProps) {
      return /*#__PURE__*/React.createElement(FundingFieldForm, Object.assign({}, formikProps, props));
    }
  });
}
FundingField$1.defaultProps = {
  label: "Awards",
  labelIcon: "money bill alternate outline",
  required: false,
  deserializeAward: undefined,
  deserializeFunder: undefined,
  computeFundingContents: undefined
};

/** Identifiers array component */

var IdentifiersField = /*#__PURE__*/function (_Component) {
  _inherits(IdentifiersField, _Component);

  var _super = _createSuper(IdentifiersField);

  function IdentifiersField() {
    _classCallCheck(this, IdentifiersField);

    return _super.apply(this, arguments);
  }

  _createClass(IdentifiersField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          required = _this$props.required,
          schemeOptions = _this$props.schemeOptions,
          showEmptyValue = _this$props.showEmptyValue;
      return /*#__PURE__*/React.createElement(ArrayField, {
        addButtonLabel: i18next.t("Add identifier"),
        defaultNewValue: emptyIdentifier,
        fieldPath: fieldPath,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        required: required,
        showEmptyValue: showEmptyValue
      }, function (_ref) {
        var arrayHelpers = _ref.arrayHelpers,
            indexPath = _ref.indexPath;
        var fieldPathPrefix = "".concat(fieldPath, ".").concat(indexPath);
        return /*#__PURE__*/React.createElement(GroupField, null, /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".identifier"),
          label: i18next.t("Identifier"),
          required: true,
          width: 11
        }), schemeOptions && /*#__PURE__*/React.createElement(SelectField, {
          fieldPath: "".concat(fieldPathPrefix, ".scheme"),
          label: i18next.t("Scheme"),
          options: schemeOptions,
          optimized: true,
          required: true,
          width: 5
        }), !schemeOptions && /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".scheme"),
          label: i18next.t("Scheme"),
          required: true,
          width: 5
        }), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Button, {
          "aria-label": i18next.t("Remove field"),
          className: "close-btn",
          icon: "close",
          onClick: function onClick() {
            return arrayHelpers.remove(indexPath);
          }
        })));
      });
    }
  }]);

  return IdentifiersField;
}(Component);
IdentifiersField.defaultProps = {
  label: i18next.t("Identifiers"),
  labelIcon: "barcode",
  required: false,
  schemeOptions: undefined,
  showEmptyValue: false
};

var PROVIDER_EXTERNAL = "external";
var UPDATE_PID_DEBOUNCE_MS = 200;

var getFieldErrors = function getFieldErrors(form, fieldPath) {
  return getIn(form.errors, fieldPath, null) || getIn(form.initialErrors, fieldPath, null);
};
/**
 * Button component to reserve a PID.
 */


var ReservePIDBtn = /*#__PURE__*/function (_Component) {
  _inherits(ReservePIDBtn, _Component);

  var _super = _createSuper(ReservePIDBtn);

  function ReservePIDBtn() {
    _classCallCheck(this, ReservePIDBtn);

    return _super.apply(this, arguments);
  }

  _createClass(ReservePIDBtn, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          handleReservePID = _this$props.handleReservePID,
          label = _this$props.label,
          loading = _this$props.loading;
      return /*#__PURE__*/React.createElement(Field$1, null, function (_ref) {
        var formik = _ref.form;
        return /*#__PURE__*/React.createElement(Form.Button, {
          className: "positive",
          size: "mini",
          loading: loading,
          disabled: disabled || loading,
          onClick: function onClick(e) {
            return handleReservePID(e, formik);
          },
          content: label
        });
      });
    }
  }]);

  return ReservePIDBtn;
}(Component);

ReservePIDBtn.defaultProps = {
  disabled: false,
  loading: false
};
/**
 * Button component to unreserve a PID.
 */

var UnreservePIDBtn = /*#__PURE__*/function (_Component2) {
  _inherits(UnreservePIDBtn, _Component2);

  var _super2 = _createSuper(UnreservePIDBtn);

  function UnreservePIDBtn() {
    _classCallCheck(this, UnreservePIDBtn);

    return _super2.apply(this, arguments);
  }

  _createClass(UnreservePIDBtn, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          handleDiscardPID = _this$props2.handleDiscardPID,
          label = _this$props2.label,
          loading = _this$props2.loading;
      return /*#__PURE__*/React.createElement(Popup, {
        content: label,
        trigger: /*#__PURE__*/React.createElement(Field$1, null, function (_ref2) {
          var formik = _ref2.form;
          return /*#__PURE__*/React.createElement(Form.Button, {
            disabled: disabled || loading,
            loading: loading,
            icon: "close",
            onClick: function onClick(e) {
              return handleDiscardPID(e, formik);
            },
            size: "mini"
          });
        })
      });
    }
  }]);

  return UnreservePIDBtn;
}(Component);

UnreservePIDBtn.defaultProps = {
  disabled: false,
  loading: false
};
/**
 * Manage radio buttons choices between managed
 * and unmanaged PID.
 */

var ManagedUnmanagedSwitch = /*#__PURE__*/function (_Component3) {
  _inherits(ManagedUnmanagedSwitch, _Component3);

  var _super3 = _createSuper(ManagedUnmanagedSwitch);

  function ManagedUnmanagedSwitch() {
    var _this;

    _classCallCheck(this, ManagedUnmanagedSwitch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super3.call.apply(_super3, [this].concat(args));

    _this.handleChange = function (e, _ref3) {
      var value = _ref3.value;
      var onManagedUnmanagedChange = _this.props.onManagedUnmanagedChange;
      var isManagedSelected = value === "managed";
      onManagedUnmanagedChange(isManagedSelected);
    };

    return _this;
  }

  _createClass(ManagedUnmanagedSwitch, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          isManagedSelected = _this$props3.isManagedSelected,
          pidLabel = _this$props3.pidLabel;
      return /*#__PURE__*/React.createElement(Form.Group, {
        inline: true
      }, /*#__PURE__*/React.createElement(Form.Field, null, i18next.t("Do you already have a {{pidLabel}} for this upload?", {
        pidLabel: pidLabel
      })), /*#__PURE__*/React.createElement(Form.Field, {
        width: 2
      }, /*#__PURE__*/React.createElement(Radio, {
        label: i18next.t("Yes"),
        name: "radioGroup",
        value: "unmanaged",
        disabled: disabled,
        checked: !isManagedSelected,
        onChange: this.handleChange
      })), /*#__PURE__*/React.createElement(Form.Field, {
        width: 2
      }, /*#__PURE__*/React.createElement(Radio, {
        label: i18next.t("No"),
        name: "radioGroup",
        value: "managed",
        disabled: disabled,
        checked: isManagedSelected,
        onChange: this.handleChange
      })));
    }
  }]);

  return ManagedUnmanagedSwitch;
}(Component);

ManagedUnmanagedSwitch.defaultProps = {
  disabled: false,
  pidLabel: undefined
};
/**
 * Render identifier field and reserve/unreserve
 * button components for managed PID.
 */

var ManagedIdentifierComponent = /*#__PURE__*/function (_Component4) {
  _inherits(ManagedIdentifierComponent, _Component4);

  var _super4 = _createSuper(ManagedIdentifierComponent);

  function ManagedIdentifierComponent() {
    var _this2;

    _classCallCheck(this, ManagedIdentifierComponent);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this2 = _super4.call.apply(_super4, [this].concat(args));

    _this2.handleReservePID = function (event, formik) {
      var pidType = _this2.props.pidType;
      var setSubmitContext = _this2.context.setSubmitContext;
      setSubmitContext(DepositFormSubmitActions.RESERVE_PID, {
        pidType: pidType
      });
      formik.handleSubmit(event);
    };

    _this2.handleDiscardPID = function (event, formik) {
      var pidType = _this2.props.pidType;
      var setSubmitContext = _this2.context.setSubmitContext;
      setSubmitContext(DepositFormSubmitActions.DISCARD_PID, {
        pidType: pidType
      });
      formik.handleSubmit(event);
    };

    return _this2;
  }

  _createClass(ManagedIdentifierComponent, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          actionState = _this$props4.actionState,
          actionStateExtra = _this$props4.actionStateExtra,
          btnLabelDiscardPID = _this$props4.btnLabelDiscardPID,
          btnLabelGetPID = _this$props4.btnLabelGetPID,
          disabled = _this$props4.disabled,
          helpText = _this$props4.helpText,
          identifier = _this$props4.identifier,
          pidPlaceholder = _this$props4.pidPlaceholder,
          pidType = _this$props4.pidType;
      var hasIdentifier = identifier !== "";
      var ReserveBtn = /*#__PURE__*/React.createElement(ReservePIDBtn, {
        disabled: disabled || hasIdentifier,
        label: btnLabelGetPID,
        loading: actionState === RESERVE_PID_STARTED && actionStateExtra.pidType === pidType,
        handleReservePID: this.handleReservePID
      });
      var UnreserveBtn = /*#__PURE__*/React.createElement(UnreservePIDBtn, {
        disabled: disabled,
        label: btnLabelDiscardPID,
        handleDiscardPID: this.handleDiscardPID,
        loading: actionState === DISCARD_PID_STARTED && actionStateExtra.pidType === pidType,
        pidType: pidType
      });
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Group, {
        inline: true
      }, hasIdentifier ? /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement("label", null, identifier)) : /*#__PURE__*/React.createElement(Form.Field, {
        width: 4
      }, /*#__PURE__*/React.createElement(Form.Input, {
        disabled: true,
        value: "",
        placeholder: pidPlaceholder,
        width: 16
      })), /*#__PURE__*/React.createElement(Form.Field, null, identifier ? UnreserveBtn : ReserveBtn)), helpText && /*#__PURE__*/React.createElement("label", {
        className: "helptext"
      }, helpText));
    }
  }]);

  return ManagedIdentifierComponent;
}(Component);

ManagedIdentifierComponent.contextType = DepositFormSubmitContext;
ManagedIdentifierComponent.defaultProps = {
  disabled: false,
  helpText: null,

  /* from Redux */
  actionState: "",
  actionStateExtra: {}
};

var mapStateToProps$6 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState,
    actionStateExtra: state.deposit.actionStateExtra
  };
};

var ManagedIdentifierCmp = connect$1(mapStateToProps$6, null)(ManagedIdentifierComponent);
/**
 * Render identifier field to allow user to input
 * the unmanaged PID.
 */

var UnmanagedIdentifierCmp = /*#__PURE__*/function (_Component5) {
  _inherits(UnmanagedIdentifierCmp, _Component5);

  var _super5 = _createSuper(UnmanagedIdentifierCmp);

  function UnmanagedIdentifierCmp(props) {
    var _this3;

    _classCallCheck(this, UnmanagedIdentifierCmp);

    _this3 = _super5.call(this, props);

    _this3.onChange = function (value) {
      var onIdentifierChanged = _this3.props.onIdentifierChanged;

      _this3.setState({
        localIdentifier: value
      }, function () {
        return onIdentifierChanged(value);
      });
    };

    var identifier = props.identifier;
    _this3.state = {
      localIdentifier: identifier
    };
    return _this3;
  }

  _createClass(UnmanagedIdentifierCmp, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      // called after the form field is updated and therefore re-rendered.
      var identifier = this.props.identifier;

      if (identifier !== prevProps.identifier) {
        this.setState({
          localIdentifier: identifier
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var localIdentifier = this.state.localIdentifier;
      var _this$props5 = this.props,
          form = _this$props5.form,
          fieldPath = _this$props5.fieldPath,
          helpText = _this$props5.helpText,
          pidPlaceholder = _this$props5.pidPlaceholder;
      var fieldError = getFieldErrors(form, fieldPath);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Field, {
        width: 8,
        error: fieldError
      }, /*#__PURE__*/React.createElement(Form.Input, {
        onChange: function onChange(e, _ref4) {
          var value = _ref4.value;
          return _this4.onChange(value);
        },
        value: localIdentifier,
        placeholder: pidPlaceholder,
        width: 16,
        error: fieldError
      })), helpText && /*#__PURE__*/React.createElement("label", {
        className: "helptext"
      }, helpText));
    }
  }]);

  return UnmanagedIdentifierCmp;
}(Component);

UnmanagedIdentifierCmp.defaultProps = {
  helpText: null
};
/**
 * Render managed or unamanged PID fields and update
 * Formik form on input changed.
 * The field value has the following format:
 * { 'doi': { identifier: '<value>', provider: '<value>', client: '<value>' } }
 */

var CustomPIDField = /*#__PURE__*/function (_Component6) {
  _inherits(CustomPIDField, _Component6);

  var _super6 = _createSuper(CustomPIDField);

  function CustomPIDField(props) {
    var _this5;

    _classCallCheck(this, CustomPIDField);

    _this5 = _super6.call(this, props);

    _this5.onExternalIdentifierChanged = function (identifier) {
      var _this5$props = _this5.props,
          form = _this5$props.form,
          fieldPath = _this5$props.fieldPath;
      var pid = {
        identifier: identifier,
        provider: PROVIDER_EXTERNAL
      };
      _this5.debounced && _this5.debounced.cancel();
      _this5.debounced = _debounce(function () {
        form.setFieldValue(fieldPath, pid);
      }, UPDATE_PID_DEBOUNCE_MS);

      _this5.debounced();
    };

    var _this5$props2 = _this5.props,
        canBeManaged = _this5$props2.canBeManaged,
        canBeUnmanaged = _this5$props2.canBeUnmanaged;
    _this5.canBeManagedAndUnmanaged = canBeManaged && canBeUnmanaged;
    _this5.state = {
      isManagedSelected: undefined
    };
    return _this5;
  }

  _createClass(CustomPIDField, [{
    key: "render",
    value: function render() {
      var _this6 = this;

      var isManagedSelected = this.state.isManagedSelected;
      var _this$props6 = this.props,
          btnLabelDiscardPID = _this$props6.btnLabelDiscardPID,
          btnLabelGetPID = _this$props6.btnLabelGetPID,
          canBeManaged = _this$props6.canBeManaged,
          canBeUnmanaged = _this$props6.canBeUnmanaged,
          form = _this$props6.form,
          fieldPath = _this$props6.fieldPath,
          fieldLabel = _this$props6.fieldLabel,
          isEditingPublishedRecord = _this$props6.isEditingPublishedRecord,
          managedHelpText = _this$props6.managedHelpText,
          pidLabel = _this$props6.pidLabel,
          pidIcon = _this$props6.pidIcon,
          pidPlaceholder = _this$props6.pidPlaceholder,
          required = _this$props6.required,
          unmanagedHelpText = _this$props6.unmanagedHelpText,
          pidType = _this$props6.pidType,
          field = _this$props6.field;
      var value = field.value || {};
      var currentIdentifier = value.identifier || "";
      var currentProvider = value.provider || "";
      var managedIdentifier = "",
          unmanagedIdentifier = "";

      if (currentIdentifier !== "") {
        var isProviderExternal = currentProvider === PROVIDER_EXTERNAL;
        managedIdentifier = !isProviderExternal ? currentIdentifier : "";
        unmanagedIdentifier = isProviderExternal ? currentIdentifier : "";
      }

      var hasManagedIdentifier = managedIdentifier !== "";

      var _isManagedSelected = isManagedSelected === undefined ? hasManagedIdentifier || currentProvider === "" // i.e pids: {}
      : isManagedSelected;

      var fieldError = getFieldErrors(form, fieldPath);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Field, {
        required: required,
        error: fieldError
      }, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: pidIcon,
        label: fieldLabel
      })), this.canBeManagedAndUnmanaged && /*#__PURE__*/React.createElement(ManagedUnmanagedSwitch, {
        disabled: isEditingPublishedRecord || hasManagedIdentifier,
        isManagedSelected: _isManagedSelected,
        onManagedUnmanagedChange: function onManagedUnmanagedChange(userSelectedManaged) {
          if (userSelectedManaged) {
            form.setFieldValue("pids", {});
          } else {
            _this6.onExternalIdentifierChanged("");
          }

          _this6.setState({
            isManagedSelected: userSelectedManaged
          });
        },
        pidLabel: pidLabel
      }), canBeManaged && _isManagedSelected && /*#__PURE__*/React.createElement(ManagedIdentifierCmp, {
        disabled: isEditingPublishedRecord,
        btnLabelDiscardPID: btnLabelDiscardPID,
        btnLabelGetPID: btnLabelGetPID,
        form: form,
        identifier: managedIdentifier,
        helpText: managedHelpText,
        pidPlaceholder: pidPlaceholder,
        pidType: pidType,
        pidLabel: pidLabel
      }), canBeUnmanaged && !_isManagedSelected && /*#__PURE__*/React.createElement(UnmanagedIdentifierCmp, {
        identifier: unmanagedIdentifier,
        onIdentifierChanged: function onIdentifierChanged(identifier) {
          _this6.onExternalIdentifierChanged(identifier);
        },
        form: form,
        fieldPath: fieldPath,
        pidPlaceholder: pidPlaceholder,
        helpText: unmanagedHelpText
      }));
    }
  }]);

  return CustomPIDField;
}(Component);

CustomPIDField.defaultProps = {
  managedHelpText: null,
  unmanagedHelpText: null,
  field: undefined
};
/**
 * Render the PIDField using a custom Formik component
 */

var PIDField = /*#__PURE__*/function (_Component7) {
  _inherits(PIDField, _Component7);

  var _super7 = _createSuper(PIDField);

  function PIDField(props) {
    var _this7;

    _classCallCheck(this, PIDField);

    _this7 = _super7.call(this, props);

    _this7.validatePropValues = function () {
      var _this7$props = _this7.props,
          canBeManaged = _this7$props.canBeManaged,
          canBeUnmanaged = _this7$props.canBeUnmanaged,
          fieldPath = _this7$props.fieldPath;

      if (!canBeManaged && !canBeUnmanaged) {
        throw Error("".concat(fieldPath, " must be managed, unmanaged or both."));
      }
    };

    _this7.validatePropValues();

    return _this7;
  }

  _createClass(PIDField, [{
    key: "render",
    value: function render() {
      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React.createElement(FastField, Object.assign({
        name: fieldPath,
        component: CustomPIDField
      }, this.props));
    }
  }]);

  return PIDField;
}(Component);
PIDField.defaultProps = {
  btnLabelDiscardPID: "Discard",
  btnLabelGetPID: "Reserve",
  canBeManaged: true,
  canBeUnmanaged: true,
  managedHelpText: null,
  pidIcon: "barcode",
  pidPlaceholder: "",
  required: false,
  unmanagedHelpText: null
};

// This file is part of React-Invenio-Deposit
var LicenseFilter = function LicenseFilter(_ref) {
  var updateQueryFilters = _ref.updateQueryFilters,
      userSelectionFilters = _ref.userSelectionFilters,
      filterValue = _ref.filterValue,
      label = _ref.label,
      title = _ref.title;

  var _isChecked = function _isChecked(userSelectionFilters) {
    var isFilterActive = userSelectionFilters.filter(function (filter) {
      return filter[1] === filterValue[1];
    }).length > 0;
    return isFilterActive;
  };

  var onToggleClicked = function onToggleClicked() {
    updateQueryFilters(userSelectionFilters.concat([filterValue]));
  };

  var isChecked = _isChecked(userSelectionFilters);

  return isChecked ? /*#__PURE__*/React.createElement(Menu.Item, {
    name: label,
    active: true,
    as: Button,
    primary: true,
    onClick: onToggleClicked
  }, title) : /*#__PURE__*/React.createElement(Menu.Item, {
    name: label,
    onClick: onToggleClicked
  }, title);
};

// This file is part of React-Invenio-Deposit
var LicenseResults = withState(function (_ref) {
  var results = _ref.currentResultsState,
      serializeLicenses = _ref.serializeLicenses;
  var serializeLicenseResult = serializeLicenses ? serializeLicenses : function (result) {
    return {
      title: result.title_l10n,
      description: result.description_l10n,
      id: result.id
    };
  };
  return /*#__PURE__*/React.createElement(FastField, {
    name: "selectedLicense"
  }, function (_ref2) {
    var _ref2$form = _ref2.form,
        values = _ref2$form.values,
        setFieldValue = _ref2$form.setFieldValue;
    return /*#__PURE__*/React.createElement(Item.Group, null, results.data.hits.map(function (result) {
      var title = result["title_l10n"];
      var description = result["description_l10n"];
      return /*#__PURE__*/React.createElement(Item, {
        key: title,
        onClick: function onClick() {
          return setFieldValue("selectedLicense", serializeLicenseResult(result));
        },
        className: "license-item mb-15"
      }, /*#__PURE__*/React.createElement(Radio, Object.assign({
        checked: _get(values, "selectedLicense.title") === title,
        onChange: function onChange() {
          return setFieldValue("selectedLicense", serializeLicenseResult(result));
        }
      }, !description && {
        className: "mt-0"
      })), /*#__PURE__*/React.createElement(Item.Content, {
        className: "license-item-content"
      }, /*#__PURE__*/React.createElement(Header, {
        size: "small",
        className: "mt-0"
      }, title), description && /*#__PURE__*/React.createElement(Item.Description, {
        className: "license-item-description"
      }, description)));
    }));
  });
});

var overriddenComponents = {
  "SearchFilters.Toggle": LicenseFilter
};
var ModalTypes = {
  STANDARD: "standard",
  CUSTOM: "custom"
};
var ModalActions = {
  ADD: "add",
  EDIT: "edit"
};
var LicenseSchema = Yup.object().shape({
  selectedLicense: Yup.object().shape({
    title: Yup.string().required(i18next.t("Title is a required field.")),
    link: Yup.string().url(i18next.t("Link must be a valid URL"))
  })
});
var LicenseModal = /*#__PURE__*/function (_Component) {
  _inherits(LicenseModal, _Component);

  var _super = _createSuper(LicenseModal);

  function LicenseModal() {
    var _this;

    _classCallCheck(this, LicenseModal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      open: false
    };

    _this.openModal = function () {
      _this.setState({
        open: true
      });
    };

    _this.closeModal = function () {
      _this.setState({
        open: false
      });
    };

    _this.onSubmit = function (values) {
      // We have to close the modal first because onLicenseChange and passing
      // license as an object makes React get rid of this component. Otherwise
      // we get a memory leak warning.
      var onLicenseChange = _this.props.onLicenseChange;

      _this.closeModal();

      onLicenseChange(values.selectedLicense);
    };

    return _this;
  }

  _createClass(LicenseModal, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          trigger = _this$props.trigger,
          action = _this$props.action,
          searchConfig = _this$props.searchConfig,
          serializeLicenses = _this$props.serializeLicenses,
          initialLicenseProp = _this$props.initialLicense;
      var open = this.state.open;
      var initialLicense = initialLicenseProp || {
        title: "",
        description: "",
        id: null,
        link: ""
      };
      var searchApi = new InvenioSearchApi(searchConfig.searchApi);
      return /*#__PURE__*/React.createElement(Formik, {
        initialValues: {
          selectedLicense: initialLicense
        },
        onSubmit: this.onSubmit,
        validationSchema: LicenseSchema,
        validateOnChange: false,
        validateOnBlur: false
      }, function (_ref) {
        var handleSubmit = _ref.handleSubmit,
            resetForm = _ref.resetForm;
        return /*#__PURE__*/React.createElement(Modal, {
          onOpen: function onOpen() {
            return _this2.openModal();
          },
          open: open,
          trigger: trigger,
          onClose: _this2.closeModal,
          closeIcon: true,
          closeOnDimmerClick: false
        }, /*#__PURE__*/React.createElement(Modal.Header, {
          as: "h6",
          className: "pt-10 pb-10"
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Grid.Column, {
          floated: "left"
        }, /*#__PURE__*/React.createElement(Header, {
          as: "h2"
        }, action === ModalActions.ADD ? i18next.t("Add {{mode}} license", {
          mode: mode
        }) : i18next.t("Change {{mode}} license", {
          mode: mode
        }))))), /*#__PURE__*/React.createElement(Modal.Content, {
          scrolling: true
        }, mode === ModalTypes.STANDARD && /*#__PURE__*/React.createElement(OverridableContext.Provider, {
          value: overriddenComponents
        }, /*#__PURE__*/React.createElement(ReactSearchKit, {
          searchApi: searchApi,
          appName: "licenses",
          urlHandlerApi: {
            enabled: false
          },
          initialQueryState: searchConfig.initialQueryState
        }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Column, {
          width: 8,
          floated: "left",
          verticalAlign: "middle"
        }, /*#__PURE__*/React.createElement(SearchBar, {
          placeholder: i18next.t("Search"),
          autofocus: true,
          actionProps: {
            icon: "search",
            content: null,
            className: "search"
          }
        })), /*#__PURE__*/React.createElement(Grid.Column, {
          width: 8,
          textAlign: "right",
          floated: "right"
        }, /*#__PURE__*/React.createElement(Menu, {
          compact: true
        }, /*#__PURE__*/React.createElement(Toggle, {
          title: i18next.t("Recommended"),
          label: "recommended",
          filterValue: ["tags", "recommended"]
        }), /*#__PURE__*/React.createElement(Toggle, {
          title: i18next.t("All"),
          label: "all",
          filterValue: ["tags", "all"]
        }), /*#__PURE__*/React.createElement(Toggle, {
          title: i18next.t("Data"),
          label: "data",
          filterValue: ["tags", "data"]
        }), /*#__PURE__*/React.createElement(Toggle, {
          title: i18next.t("Software"),
          label: "software",
          filterValue: ["tags", "software"]
        })))), /*#__PURE__*/React.createElement(Grid.Row, {
          verticalAlign: "middle"
        }, /*#__PURE__*/React.createElement(Grid.Column, null, /*#__PURE__*/React.createElement(ResultsLoader, null, /*#__PURE__*/React.createElement(EmptyResults, null), /*#__PURE__*/React.createElement(Error$1, null), /*#__PURE__*/React.createElement(LicenseResults, serializeLicenses && {
          serializeLicenses: serializeLicenses
        }))))))), mode === ModalTypes.CUSTOM && /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(TextField, {
          label: i18next.t("Title"),
          placeholder: i18next.t("License title"),
          fieldPath: "selectedLicense.title",
          required: true
        }), /*#__PURE__*/React.createElement(TextAreaField, {
          fieldPath: "selectedLicense.description",
          label: i18next.t("Description")
        }), /*#__PURE__*/React.createElement(TextField, {
          label: i18next.t("Link"),
          placeholder: i18next.t("License link"),
          fieldPath: "selectedLicense.link"
        }))), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
          name: "cancel",
          onClick: function onClick() {
            resetForm();

            _this2.closeModal();
          },
          icon: "remove",
          labelPosition: "left",
          content: i18next.t("Cancel"),
          floated: "left"
        }), /*#__PURE__*/React.createElement(Button, {
          name: "submit",
          onClick: function onClick(event) {
            return handleSubmit(event);
          },
          primary: true,
          icon: "checkmark",
          labelPosition: "left",
          content: action === ModalActions.ADD ? i18next.t("Add license") : i18next.t("Change license")
        })));
      });
    }
  }]);

  return LicenseModal;
}(Component);
LicenseModal.defaultProps = {
  initialLicense: undefined,
  serializeLicenses: undefined
};

var LicenseFieldItem = function LicenseFieldItem(_ref) {
  var license = _ref.license,
      moveLicense = _ref.moveLicense,
      replaceLicense = _ref.replaceLicense,
      removeLicense = _ref.removeLicense,
      searchConfig = _ref.searchConfig,
      serializeLicenses = _ref.serializeLicenses;
  var dropRef = React.useRef(null);

  var _useDrag = useDrag({
    item: {
      index: license.index,
      type: "license"
    }
  }),
      _useDrag2 = _slicedToArray(_useDrag, 3),
      drag = _useDrag2[1],
      preview = _useDrag2[2];

  var _useDrop = useDrop({
    accept: "license",
    hover: function hover(item, monitor) {
      if (!dropRef.current) {
        return;
      }

      var dragIndex = item.index;
      var hoverIndex = license.index; // Don't replace items with themselves

      if (dragIndex === hoverIndex) {
        return;
      }

      if (monitor.isOver({
        shallow: true
      })) {
        moveLicense(dragIndex, hoverIndex);
        item.index = hoverIndex;
      }
    },
    collect: function collect(monitor) {
      return {
        hidden: monitor.isOver({
          shallow: true
        })
      };
    }
  }),
      _useDrop2 = _slicedToArray(_useDrop, 2),
      hidden = _useDrop2[0].hidden,
      drop = _useDrop2[1]; // Initialize the ref explicitely


  drop(dropRef);
  return /*#__PURE__*/React.createElement(Ref, {
    innerRef: dropRef,
    key: license.key
  }, /*#__PURE__*/React.createElement(List.Item, {
    key: license.key,
    className: hidden ? "deposit-drag-listitem hidden" : "deposit-drag-listitem"
  }, /*#__PURE__*/React.createElement(List.Content, {
    floated: "right"
  }, /*#__PURE__*/React.createElement(LicenseModal, {
    searchConfig: searchConfig,
    onLicenseChange: function onLicenseChange(selectedLicense) {
      replaceLicense(license.index, selectedLicense);
    },
    mode: license.type,
    initialLicense: license.initial,
    action: "edit",
    trigger: /*#__PURE__*/React.createElement(Button, {
      size: "mini",
      primary: true,
      type: "button"
    }, i18next.t("Edit")),
    serializeLicenses: serializeLicenses
  }), /*#__PURE__*/React.createElement(Button, {
    size: "mini",
    type: "button",
    onClick: function onClick() {
      removeLicense(license.index);
    }
  }, i18next.t("Remove"))), /*#__PURE__*/React.createElement(Ref, {
    innerRef: drag
  }, /*#__PURE__*/React.createElement(List.Icon, {
    name: "bars",
    className: "drag-anchor"
  })), /*#__PURE__*/React.createElement(Ref, {
    innerRef: preview
  }, /*#__PURE__*/React.createElement(List.Content, null, /*#__PURE__*/React.createElement(List.Header, null, license.title), license.description && /*#__PURE__*/React.createElement(List.Description, null, _truncate(license.description, {
    length: 300
  })), license.link && /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("a", {
    href: license.link,
    target: "_blank",
    rel: "noopener noreferrer"
  }, license.description && /*#__PURE__*/React.createElement("span", null, "\xA0"), i18next.t("Read more")))))));
};
LicenseFieldItem.defaultProps = {
  serializeLicenses: undefined
};

/**
 * The user-facing license.
 *
 */

var VisibleLicense = /*#__PURE__*/_createClass(
/**
 * Constructor.
 *
 * @param {array} uiRights
 * @param {object} right
 * @param {int} index
 */
function VisibleLicense(uiRights, right, index) {
  _classCallCheck(this, VisibleLicense);

  this.index = index;
  this.type = right.id ? "standard" : "custom";
  this.key = right.id || right.title;
  this.initial = this.type === "custom" ? right : null;
  var uiRight = _find(uiRights, right.id ? function (o) {
    return o.id === right.id;
  } : function (o) {
    return o.title === right.title;
  }) || {};
  this.description = uiRight.description_l10n || right.description || "";
  this.title = uiRight.title_l10n || right.title || "";
  this.link = uiRight.props && uiRight.props.url || uiRight.link || right.props && right.props.url || right.link || "";
});

var LicenseFieldForm = /*#__PURE__*/function (_Component) {
  _inherits(LicenseFieldForm, _Component);

  var _super = _createSuper(LicenseFieldForm);

  function LicenseFieldForm() {
    _classCallCheck(this, LicenseFieldForm);

    return _super.apply(this, arguments);
  }

  _createClass(LicenseFieldForm, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          fieldPath = _this$props.fieldPath,
          uiFieldPath = _this$props.uiFieldPath,
          values = _this$props.form.values,
          formikArrayMove = _this$props.move,
          formikArrayPush = _this$props.push,
          formikArrayRemove = _this$props.remove,
          formikArrayReplace = _this$props.replace,
          required = _this$props.required,
          searchConfig = _this$props.searchConfig,
          serializeLicenses = _this$props.serializeLicenses;
      var uiRights = getIn(values, uiFieldPath, []);
      return /*#__PURE__*/React.createElement(DndProvider, {
        backend: HTML5Backend
      }, /*#__PURE__*/React.createElement(Form.Field, {
        required: required
      }, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }), /*#__PURE__*/React.createElement(List, null, getIn(values, fieldPath, []).map(function (value, index) {
        var license = new VisibleLicense(uiRights, value, index);
        return /*#__PURE__*/React.createElement(LicenseFieldItem, {
          key: license.key,
          license: license,
          moveLicense: formikArrayMove,
          replaceLicense: formikArrayReplace,
          removeLicense: formikArrayRemove,
          searchConfig: searchConfig,
          serializeLicenses: serializeLicenses
        });
      }), /*#__PURE__*/React.createElement(LicenseModal, {
        searchConfig: searchConfig,
        trigger: /*#__PURE__*/React.createElement(Button, {
          type: "button",
          key: "standard",
          icon: true,
          labelPosition: "left"
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "add"
        }), i18next.t("Add standard")),
        onLicenseChange: function onLicenseChange(selectedLicense) {
          formikArrayPush(selectedLicense);
        },
        mode: "standard",
        action: "add",
        serializeLicenses: serializeLicenses
      }), /*#__PURE__*/React.createElement(LicenseModal, {
        searchConfig: searchConfig,
        trigger: /*#__PURE__*/React.createElement(Button, {
          type: "button",
          key: "custom",
          icon: true,
          labelPosition: "left"
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "add"
        }), i18next.t("Add custom")),
        onLicenseChange: function onLicenseChange(selectedLicense) {
          formikArrayPush(selectedLicense);
        },
        mode: "custom",
        action: "add"
      }))));
    }
  }]);

  return LicenseFieldForm;
}(Component);

LicenseFieldForm.defaultProps = {
  labelIcon: undefined,
  uiFieldPath: undefined,
  serializeLicenses: undefined
};
var LicenseField = /*#__PURE__*/function (_Component2) {
  _inherits(LicenseField, _Component2);

  var _super2 = _createSuper(LicenseField);

  function LicenseField() {
    _classCallCheck(this, LicenseField);

    return _super2.apply(this, arguments);
  }

  _createClass(LicenseField, [{
    key: "render",
    value: function render() {
      var _this = this;

      var fieldPath = this.props.fieldPath;
      return /*#__PURE__*/React.createElement(FieldArray, {
        name: fieldPath,
        component: function component(formikProps) {
          return /*#__PURE__*/React.createElement(LicenseFieldForm, Object.assign({}, formikProps, _this.props));
        }
      });
    }
  }]);

  return LicenseField;
}(Component);
LicenseField.defaultProps = {
  label: i18next.t("Licenses"),
  uiFieldPath: "ui.rights",
  labelIcon: "drivers license",
  required: false,
  serializeLicenses: undefined
};

var _excluded$8 = ["actionState", "formik"];
var PreviewButtonComponent = /*#__PURE__*/function (_Component) {
  _inherits(PreviewButtonComponent, _Component);

  var _super = _createSuper(PreviewButtonComponent);

  function PreviewButtonComponent() {
    var _this;

    _classCallCheck(this, PreviewButtonComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handlePreview = function (event, handleSubmit) {
      var setSubmitContext = _this.context.setSubmitContext;
      setSubmitContext(DepositFormSubmitActions.PREVIEW);
      handleSubmit(event);
    };

    return _this;
  }

  _createClass(PreviewButtonComponent, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actionState = _this$props.actionState,
          formik = _this$props.formik,
          ui = _objectWithoutProperties(_this$props, _excluded$8);

      var handleSubmit = formik.handleSubmit,
          isSubmitting = formik.isSubmitting;

      var uiProps = _omit(ui, ["dispatch"]);

      return /*#__PURE__*/React.createElement(Button, Object.assign({
        name: "preview",
        disabled: isSubmitting,
        onClick: function onClick(e) {
          return _this2.handlePreview(e, handleSubmit);
        },
        loading: isSubmitting && actionState === DRAFT_PREVIEW_STARTED,
        icon: "eye",
        labelPosition: "left",
        content: i18next.t("Preview")
      }, uiProps));
    }
  }]);

  return PreviewButtonComponent;
}(Component);
PreviewButtonComponent.contextType = DepositFormSubmitContext;
PreviewButtonComponent.defaultProps = {
  actionState: undefined
};

var mapStateToProps$5 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState,
    record: state.deposit.record
  };
};

var PreviewButton = connect$1(mapStateToProps$5, null)(connect$2(PreviewButtonComponent));

var PublicationDateField = /*#__PURE__*/function (_Component) {
  _inherits(PublicationDateField, _Component);

  var _super = _createSuper(PublicationDateField);

  function PublicationDateField() {
    _classCallCheck(this, PublicationDateField);

    return _super.apply(this, arguments);
  }

  _createClass(PublicationDateField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          placeholder = _this$props.placeholder,
          required = _this$props.required;
      return /*#__PURE__*/React.createElement(TextField, {
        fieldPath: fieldPath,
        helpText: i18next.t("In case your upload was already published elsewhere, please use the date of the first publication. Format: YYYY-MM-DD, YYYY-MM, or YYYY. For intervals use DATE/DATE, e.g. 1939/1945."),
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        placeholder: placeholder,
        required: required
      });
    }
  }]);

  return PublicationDateField;
}(Component);
PublicationDateField.defaultProps = {
  label: i18next.t("Publication date"),
  labelIcon: "calendar",
  required: undefined,
  placeholder: i18next.t("YYYY-MM-DD or YYYY-MM-DD/YYYY-MM-DD for intervals. MM and DD are optional.")
};

var _excluded$7 = ["actionState", "numberOfFiles", "buttonLabel", "publishWithoutCommunity", "formik", "publishModalExtraContent"];

var PublishButtonComponent = /*#__PURE__*/function (_Component) {
  _inherits(PublishButtonComponent, _Component);

  var _super = _createSuper(PublishButtonComponent);

  function PublishButtonComponent() {
    var _this;

    _classCallCheck(this, PublishButtonComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isConfirmModalOpen: false
    };

    _this.openConfirmModal = function () {
      return _this.setState({
        isConfirmModalOpen: true
      });
    };

    _this.closeConfirmModal = function () {
      return _this.setState({
        isConfirmModalOpen: false
      });
    };

    _this.handlePublish = function (event, handleSubmit, publishWithoutCommunity) {
      var setSubmitContext = _this.context.setSubmitContext;
      setSubmitContext(publishWithoutCommunity ? DepositFormSubmitActions.PUBLISH_WITHOUT_COMMUNITY : DepositFormSubmitActions.PUBLISH);
      handleSubmit(event);

      _this.closeConfirmModal();
    };

    _this.isDisabled = function (values, isSubmitting, numberOfFiles) {
      var filesEnabled = _get(values, "files.enabled", false);

      var filesMissing = filesEnabled && !numberOfFiles;
      return isSubmitting || filesMissing;
    };

    return _this;
  }

  _createClass(PublishButtonComponent, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actionState = _this$props.actionState,
          numberOfFiles = _this$props.numberOfFiles,
          buttonLabel = _this$props.buttonLabel,
          publishWithoutCommunity = _this$props.publishWithoutCommunity,
          formik = _this$props.formik,
          publishModalExtraContent = _this$props.publishModalExtraContent,
          ui = _objectWithoutProperties(_this$props, _excluded$7);

      var isConfirmModalOpen = this.state.isConfirmModalOpen;
      var values = formik.values,
          isSubmitting = formik.isSubmitting,
          handleSubmit = formik.handleSubmit;

      var uiProps = _omit(ui, ["dispatch"]);

      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, Object.assign({
        disabled: this.isDisabled(values, isSubmitting, numberOfFiles),
        name: "publish",
        onClick: this.openConfirmModal,
        positive: true,
        icon: "upload",
        loading: isSubmitting && actionState === DRAFT_PUBLISH_STARTED,
        labelPosition: "left",
        content: buttonLabel
      }, uiProps, {
        type: "button" // needed so the formik form doesn't handle it as submit button i.e enable HTML validation on required input fields

      })), isConfirmModalOpen && /*#__PURE__*/React.createElement(Modal, {
        open: isConfirmModalOpen,
        onClose: this.closeConfirmModal,
        size: "small",
        closeIcon: true,
        closeOnDimmerClick: false
      }, /*#__PURE__*/React.createElement(Modal.Header, null, i18next.t("Are you sure you want to publish this record?")), /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(Message, {
        visible: true,
        warning: true
      }, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement(Icon, {
        name: "warning sign"
      }), " ", i18next.t("Once the record is published you will no longer be able to change the files in the upload! However, you will still be able to update the record's metadata later."))), publishModalExtraContent && /*#__PURE__*/React.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: publishModalExtraContent
        }
      })), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
        onClick: this.closeConfirmModal,
        floated: "left"
      }, i18next.t("Cancel")), /*#__PURE__*/React.createElement(Button, {
        onClick: function onClick(event) {
          return _this2.handlePublish(event, handleSubmit, publishWithoutCommunity);
        },
        positive: true,
        content: buttonLabel
      }))));
    }
  }]);

  return PublishButtonComponent;
}(Component);

PublishButtonComponent.contextType = DepositFormSubmitContext;
PublishButtonComponent.defaultProps = {
  buttonLabel: i18next.t("Publish"),
  publishWithoutCommunity: false,
  actionState: undefined,
  publishModalExtraContent: undefined
};

var mapStateToProps$4 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState,
    numberOfFiles: Object.values(state.files.entries).length,
    publishModalExtraContent: state.deposit.config.publish_modal_extra
  };
};

var PublishButton = connect$1(mapStateToProps$4, null)(connect$2(PublishButtonComponent));

var SubmitReviewModal = /*#__PURE__*/function (_Component) {
  _inherits(SubmitReviewModal, _Component);

  var _super = _createSuper(SubmitReviewModal);

  function SubmitReviewModal() {
    var _this;

    _classCallCheck(this, SubmitReviewModal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.ConfirmSubmitReviewSchema = Yup.object({
      acceptAccessToRecord: Yup.string().required(i18next.t("You must accept this.")),
      acceptAfterPublishRecord: Yup.string().required(i18next.t("You must accept this.")),
      reviewComment: Yup.string()
    });
    return _this;
  }

  _createClass(SubmitReviewModal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          initialReviewComment = _this$props.initialReviewComment,
          isConfirmModalOpen = _this$props.isConfirmModalOpen,
          community = _this$props.community,
          onClose = _this$props.onClose,
          onSubmit = _this$props.onSubmit,
          publishModalExtraContent = _this$props.publishModalExtraContent;
      var communityTitle = community.metadata.title;
      return /*#__PURE__*/React.createElement(Formik, {
        initialValues: {
          acceptAccessToRecord: "",
          acceptAfterPublishRecord: "",
          reviewComment: initialReviewComment || ""
        },
        onSubmit: onSubmit,
        validationSchema: this.ConfirmSubmitReviewSchema,
        validateOnChange: false,
        validateOnBlur: false
      }, function (_ref) {
        var values = _ref.values,
            handleSubmit = _ref.handleSubmit;
        return /*#__PURE__*/React.createElement(Modal, {
          open: isConfirmModalOpen,
          onClose: onClose,
          size: "small",
          closeIcon: true,
          closeOnDimmerClick: false
        }, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Trans$1, null, "Submit for review")), /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(Message, {
          visible: true,
          warning: true
        }, /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement(Icon, {
          name: "warning sign"
        }), i18next.t("Before requesting review please read and check the following:"))), /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(RadioField, {
          control: Checkbox,
          fieldPath: "acceptAccessToRecord",
          label: /*#__PURE__*/React.createElement(Trans$1, {
            defaults: "The '{{communityTitle}}' curators will have access to <bold>view</bold> and <bold>edit</bold> your upload's metadata and files.",
            values: {
              communityTitle: communityTitle
            },
            components: {
              bold: /*#__PURE__*/React.createElement("b", null)
            }
          }),
          checked: _get(values, "acceptAccessToRecord") === "checked",
          onChange: function onChange(_ref2) {
            var data = _ref2.data,
                formikProps = _ref2.formikProps;
            formikProps.form.setFieldValue("acceptAccessToRecord", data.checked ? "checked" : "");
          },
          optimized: true
        }), /*#__PURE__*/React.createElement(ErrorLabel, {
          fieldPath: "acceptAccessToRecord",
          className: "mt-0 mb-5"
        })), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(RadioField, {
          control: Checkbox,
          fieldPath: "acceptAfterPublishRecord",
          label: /*#__PURE__*/React.createElement(Trans$1, {
            defaults: "If your upload is accepted by the community curators, it will be <bold>immediately published</bold>. Before that, you will still be able to modify metadata and files of this upload.",
            values: {
              communityTitle: communityTitle
            },
            components: {
              bold: /*#__PURE__*/React.createElement("b", null)
            }
          }),
          checked: _get(values, "acceptAfterPublishRecord") === "checked",
          onChange: function onChange(_ref3) {
            var data = _ref3.data,
                formikProps = _ref3.formikProps;
            formikProps.form.setFieldValue("acceptAfterPublishRecord", data.checked ? "checked" : "");
          },
          optimized: true
        }), /*#__PURE__*/React.createElement(ErrorLabel, {
          fieldPath: "acceptAfterPublishRecord",
          className: "mt-0 mb-5"
        })), /*#__PURE__*/React.createElement(TextAreaField, {
          fieldPath: "reviewComment",
          label: "Message to curators (optional)"
        }), publishModalExtraContent && /*#__PURE__*/React.createElement("div", {
          dangerouslySetInnerHTML: {
            __html: publishModalExtraContent
          }
        }))), /*#__PURE__*/React.createElement(Modal.Actions, null, /*#__PURE__*/React.createElement(Button, {
          onClick: onClose,
          floated: "left"
        }, i18next.t("Cancel")), /*#__PURE__*/React.createElement(Button, {
          name: "submitReview",
          onClick: function onClick(event) {
            handleSubmit(event);
          },
          positive: true,
          content: i18next.t("Submit review")
        })));
      });
    }
  }]);

  return SubmitReviewModal;
}(Component);
SubmitReviewModal.defaultProps = {
  initialReviewComment: "",
  publishModalExtraContent: ""
};

var _excluded$6 = ["actionState", "actionStateExtra", "community", "numberOfFiles", "disableSubmitForReviewButton", "isRecordSubmittedForReview", "formik", "publishModalExtraContent"];

var SubmitReviewButtonComponent = /*#__PURE__*/function (_Component) {
  _inherits(SubmitReviewButtonComponent, _Component);

  var _super = _createSuper(SubmitReviewButtonComponent);

  function SubmitReviewButtonComponent() {
    var _this;

    _classCallCheck(this, SubmitReviewButtonComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isConfirmModalOpen: false
    };

    _this.openConfirmModal = function () {
      return _this.setState({
        isConfirmModalOpen: true
      });
    };

    _this.closeConfirmModal = function () {
      return _this.setState({
        isConfirmModalOpen: false
      });
    };

    _this.handleSubmitReview = function (_ref) {
      var reviewComment = _ref.reviewComment;
      var formik = _this.props.formik;
      var handleSubmit = formik.handleSubmit;
      var setSubmitContext = _this.context.setSubmitContext;
      setSubmitContext(DepositFormSubmitActions.SUBMIT_REVIEW, {
        reviewComment: reviewComment
      });
      handleSubmit();

      _this.closeConfirmModal();
    };

    _this.isDisabled = function (numberOfFiles, disableSubmitForReviewButton) {
      var formik = _this.props.formik;
      var values = formik.values,
          isSubmitting = formik.isSubmitting;

      var filesEnabled = _get(values, "files.enabled", false);

      var filesMissing = filesEnabled && !numberOfFiles;
      return isSubmitting || filesMissing || disableSubmitForReviewButton;
    };

    return _this;
  }

  _createClass(SubmitReviewButtonComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          actionState = _this$props.actionState,
          actionStateExtra = _this$props.actionStateExtra,
          community = _this$props.community,
          numberOfFiles = _this$props.numberOfFiles,
          disableSubmitForReviewButton = _this$props.disableSubmitForReviewButton,
          isRecordSubmittedForReview = _this$props.isRecordSubmittedForReview,
          formik = _this$props.formik,
          publishModalExtraContent = _this$props.publishModalExtraContent,
          ui = _objectWithoutProperties(_this$props, _excluded$6);

      var isSubmitting = formik.isSubmitting;

      var uiProps = _omit(ui, ["dispatch"]);

      var isConfirmModalOpen = this.state.isConfirmModalOpen;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, Object.assign({
        disabled: this.isDisabled(numberOfFiles, disableSubmitForReviewButton),
        name: "SubmitReview",
        onClick: this.openConfirmModal,
        positive: true,
        icon: "upload",
        loading: isSubmitting && actionState === "DRAFT_SUBMIT_REVIEW_STARTED",
        labelPosition: "left",
        content: isRecordSubmittedForReview ? i18next.t("Submitted for review") : i18next.t("Submit for review")
      }, uiProps, {
        type: "button" // needed so the formik form doesn't handle it as submit button i.e enable HTML validation on required input fields

      })), isConfirmModalOpen && /*#__PURE__*/React.createElement(SubmitReviewModal, {
        isConfirmModalOpen: isConfirmModalOpen,
        initialReviewComment: actionStateExtra.reviewComment,
        onSubmit: this.handleSubmitReview,
        community: community,
        onClose: this.closeConfirmModal,
        publishModalExtraContent: publishModalExtraContent
      }));
    }
  }]);

  return SubmitReviewButtonComponent;
}(Component);

SubmitReviewButtonComponent.contextType = DepositFormSubmitContext;
SubmitReviewButtonComponent.defaultProps = {
  numberOfFiles: undefined,
  disableSubmitForReviewButton: undefined,
  publishModalExtraContent: undefined
};

var mapStateToProps$3 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState,
    actionStateExtra: state.deposit.actionStateExtra,
    community: state.deposit.editorState.selectedCommunity,
    isRecordSubmittedForReview: state.deposit.record.status === DepositStatus.IN_REVIEW,
    disableSubmitForReviewButton: state.deposit.editorState.ui.disableSubmitForReviewButton,
    numberOfFiles: Object.values(state.files.entries).length,
    publishModalExtraContent: state.deposit.config.publish_modal_extra
  };
};

var SubmitReviewButton = connect$1(mapStateToProps$3, null)(connect$2(SubmitReviewButtonComponent));

var _excluded$5 = ["community", "changeSelectedCommunity", "showChangeCommunityButton", "showSubmitForReviewButton"];

var SubmitReviewOrPublishComponent = /*#__PURE__*/function (_Component) {
  _inherits(SubmitReviewOrPublishComponent, _Component);

  var _super = _createSuper(SubmitReviewOrPublishComponent);

  function SubmitReviewOrPublishComponent() {
    _classCallCheck(this, SubmitReviewOrPublishComponent);

    return _super.apply(this, arguments);
  }

  _createClass(SubmitReviewOrPublishComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          community = _this$props.community,
          changeSelectedCommunity = _this$props.changeSelectedCommunity,
          showChangeCommunityButton = _this$props.showChangeCommunityButton,
          showSubmitForReviewButton = _this$props.showSubmitForReviewButton,
          ui = _objectWithoutProperties(_this$props, _excluded$5);

      var result;

      if (showSubmitForReviewButton) {
        result = /*#__PURE__*/React.createElement(SubmitReviewButton, ui);
      } else if (showChangeCommunityButton) {
        result = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CommunitySelectionModal, {
          onCommunityChange: function onCommunityChange(community) {
            changeSelectedCommunity(community);
          },
          chosenCommunity: community,
          trigger: /*#__PURE__*/React.createElement(Button, {
            content: i18next.t("Change community"),
            fluid: true,
            className: "mb-10"
          })
        }), /*#__PURE__*/React.createElement(PublishButton, Object.assign({
          buttonLabel: i18next.t("Publish without community"),
          publishWithoutCommunity: true
        }, ui)));
      } else {
        result = /*#__PURE__*/React.createElement(PublishButton, ui);
      }

      return result;
    }
  }]);

  return SubmitReviewOrPublishComponent;
}(Component);

SubmitReviewOrPublishComponent.defaultProps = {
  community: undefined
};

var mapStateToProps$2 = function mapStateToProps(state) {
  return {
    community: state.deposit.editorState.selectedCommunity,
    showSubmitForReviewButton: state.deposit.editorState.ui.showSubmitForReviewButton,
    showChangeCommunityButton: state.deposit.editorState.ui.showChangeCommunityButton
  };
};

var mapDispatchToProps$1 = function mapDispatchToProps(dispatch) {
  return {
    changeSelectedCommunity: function changeSelectedCommunity$1(community) {
      return dispatch(changeSelectedCommunity(community));
    }
  };
};

var SubmitReviewOrPublishButton = connect$1(mapStateToProps$2, mapDispatchToProps$1)(SubmitReviewOrPublishComponent);

var PublisherField = /*#__PURE__*/function (_Component) {
  _inherits(PublisherField, _Component);

  var _super = _createSuper(PublisherField);

  function PublisherField() {
    _classCallCheck(this, PublisherField);

    return _super.apply(this, arguments);
  }

  _createClass(PublisherField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          placeholder = _this$props.placeholder;
      return /*#__PURE__*/React.createElement(TextField, {
        fieldPath: fieldPath,
        helpText: i18next.t("The publisher is used to formulate the citation, so consider the prominence of the role."),
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        placeholder: placeholder
      });
    }
  }]);

  return PublisherField;
}(Component);
PublisherField.defaultProps = {
  label: i18next.t("Publisher"),
  labelIcon: "building outline",
  placeholder: i18next.t("Publisher")
};

var _excluded$4 = ["fieldPath", "label", "labelIcon", "options"];
var ResourceTypeField = /*#__PURE__*/function (_Component) {
  _inherits(ResourceTypeField, _Component);

  var _super = _createSuper(ResourceTypeField);

  function ResourceTypeField() {
    var _this;

    _classCallCheck(this, ResourceTypeField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.groupErrors = function (errors, fieldPath) {
      var fieldErrors = _get(errors, fieldPath);

      if (fieldErrors) {
        return {
          content: fieldErrors
        };
      }

      return null;
    };

    _this._label = function (option) {
      return option.type_name + (option.subtype_name ? " / " + option.subtype_name : "");
    };

    _this.createOptions = function (propsOptions) {
      return propsOptions.map(function (o) {
        return _objectSpread2(_objectSpread2({}, o), {}, {
          label: _this._label(o)
        });
      }).sort(function (o1, o2) {
        return o1.label.localeCompare(o2.label);
      }).map(function (o) {
        return {
          value: o.id,
          icon: o.icon,
          text: o.label
        };
      });
    };

    return _this;
  }

  _createClass(ResourceTypeField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          options = _this$props.options,
          restProps = _objectWithoutProperties(_this$props, _excluded$4);

      var frontEndOptions = this.createOptions(options);
      return /*#__PURE__*/React.createElement(SelectField, Object.assign({
        fieldPath: fieldPath,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        optimized: true,
        options: frontEndOptions,
        selectOnBlur: false
      }, restProps));
    }
  }]);

  return ResourceTypeField;
}(Component);
ResourceTypeField.defaultProps = {
  label: i18next.t("Resource type"),
  labelIcon: "tag",
  labelclassname: "field-label-class",
  required: false
};

var RelatedWorksField = /*#__PURE__*/function (_Component) {
  _inherits(RelatedWorksField, _Component);

  var _super = _createSuper(RelatedWorksField);

  function RelatedWorksField() {
    _classCallCheck(this, RelatedWorksField);

    return _super.apply(this, arguments);
  }

  _createClass(RelatedWorksField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          required = _this$props.required,
          options = _this$props.options,
          showEmptyValue = _this$props.showEmptyValue;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("label", {
        className: "helptext",
        style: {
          marginBottom: "10px"
        }
      }, i18next.t("Specify identifiers of related works. Supported identifiers include DOI, Handle, ARK, PURL, ISSN, ISBN, PubMed ID, PubMed Central ID, ADS Bibliographic Code, arXiv, Life Science Identifiers (LSID), EAN-13, ISTC, URNs, and URLs.")), /*#__PURE__*/React.createElement(ArrayField, {
        addButtonLabel: i18next.t("Add related work"),
        defaultNewValue: emptyRelatedWork,
        fieldPath: fieldPath,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        required: required,
        showEmptyValue: showEmptyValue
      }, function (_ref) {
        var arrayHelpers = _ref.arrayHelpers,
            indexPath = _ref.indexPath;
        var fieldPathPrefix = "".concat(fieldPath, ".").concat(indexPath);
        return /*#__PURE__*/React.createElement(GroupField, {
          optimized: true
        }, /*#__PURE__*/React.createElement(SelectField, {
          clearable: true,
          fieldPath: "".concat(fieldPathPrefix, ".relation_type"),
          label: i18next.t("Relation"),
          optimized: true,
          options: options.relations,
          placeholder: i18next.t("Select relation..."),
          required: true,
          width: 3
        }), /*#__PURE__*/React.createElement(TextField, {
          fieldPath: "".concat(fieldPathPrefix, ".identifier"),
          label: i18next.t("Identifier"),
          required: true,
          width: 4
        }), /*#__PURE__*/React.createElement(SelectField, {
          clearable: true,
          fieldPath: "".concat(fieldPathPrefix, ".scheme"),
          label: i18next.t("Scheme"),
          optimized: true,
          options: options.scheme,
          required: true,
          width: 2
        }), /*#__PURE__*/React.createElement(ResourceTypeField, {
          clearable: true,
          fieldPath: "".concat(fieldPathPrefix, ".resource_type"),
          labelIcon: "" // Otherwise breaks alignment
          ,
          options: options.resource_type,
          width: 7,
          labelclassname: "small field-label-class"
        }), /*#__PURE__*/React.createElement(Form.Field, null, /*#__PURE__*/React.createElement(Button, {
          "aria-label": i18next.t("Remove field"),
          className: "close-btn",
          icon: true,
          onClick: function onClick() {
            return arrayHelpers.remove(indexPath);
          }
        }, /*#__PURE__*/React.createElement(Icon, {
          name: "close"
        }))));
      }));
    }
  }]);

  return RelatedWorksField;
}(Component);
RelatedWorksField.defaultProps = {
  label: i18next.t("Related works"),
  labelIcon: "barcode",
  required: undefined,
  showEmptyValue: false
};

var _excluded$3 = ["actionState", "formik"];
var SaveButtonComponent = /*#__PURE__*/function (_Component) {
  _inherits(SaveButtonComponent, _Component);

  var _super = _createSuper(SaveButtonComponent);

  function SaveButtonComponent() {
    var _this;

    _classCallCheck(this, SaveButtonComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleSave = function (event) {
      var formik = _this.props.formik;
      var setSubmitContext = _this.context.setSubmitContext;
      var handleSubmit = formik.handleSubmit;
      setSubmitContext(DepositFormSubmitActions.SAVE);
      handleSubmit(event);
      scrollTop();
    };

    return _this;
  }

  _createClass(SaveButtonComponent, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          actionState = _this$props.actionState,
          formik = _this$props.formik,
          ui = _objectWithoutProperties(_this$props, _excluded$3);

      var isSubmitting = formik.isSubmitting;

      var uiProps = _omit(ui, ["dispatch"]);

      return /*#__PURE__*/React.createElement(Button, Object.assign({
        name: "save",
        disabled: isSubmitting,
        onClick: function onClick(event) {
          return _this2.handleSave(event);
        },
        icon: "save",
        loading: isSubmitting && actionState === DRAFT_SAVE_STARTED,
        labelPosition: "left",
        content: i18next.t("Save draft")
      }, uiProps));
    }
  }]);

  return SaveButtonComponent;
}(Component);
SaveButtonComponent.contextType = DepositFormSubmitContext;
SaveButtonComponent.defaultProps = {
  actionState: undefined
};

var mapStateToProps$1 = function mapStateToProps(state) {
  return {
    actionState: state.deposit.actionState
  };
};

var SaveButton = connect$1(mapStateToProps$1, null)(connect$2(SaveButtonComponent));

var SubjectsField = /*#__PURE__*/function (_Component) {
  _inherits(SubjectsField, _Component);

  var _super = _createSuper(SubjectsField);

  function SubjectsField() {
    var _this;

    _classCallCheck(this, SubjectsField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      limitTo: "all"
    };

    _this.serializeSubjects = function (subjects) {
      return subjects.map(function (subject) {
        var scheme = subject.scheme ? "(".concat(subject.scheme, ") ") : "";
        return _objectSpread2(_objectSpread2({
          text: scheme + subject.subject,
          value: subject.subject,
          key: subject.subject
        }, subject.id ? {
          id: subject.id
        } : {}), {}, {
          subject: subject.subject
        });
      });
    };

    _this.prepareSuggest = function (searchQuery) {
      var limitTo = _this.state.limitTo;
      var prefix = limitTo === "all" ? "" : "".concat(limitTo, ":");
      return "".concat(prefix).concat(searchQuery);
    };

    return _this;
  }

  _createClass(SubjectsField, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          required = _this$props.required,
          multiple = _this$props.multiple,
          placeholder = _this$props.placeholder,
          clearable = _this$props.clearable,
          limitToOptions = _this$props.limitToOptions;
      return /*#__PURE__*/React.createElement(GroupField, {
        className: "main-group-field"
      }, /*#__PURE__*/React.createElement(Form.Field, {
        width: 5,
        className: "subjects-field"
      }, /*#__PURE__*/React.createElement(FieldLabel, {
        htmlFor: fieldPath,
        icon: labelIcon,
        label: label
      }), /*#__PURE__*/React.createElement(GroupField, null, /*#__PURE__*/React.createElement(Form.Field, {
        width: 8,
        style: {
          marginBottom: "auto",
          marginTop: "auto"
        },
        className: "p-0"
      }, i18next.t("Suggest from")), /*#__PURE__*/React.createElement(Form.Dropdown, {
        className: "p-0",
        defaultValue: limitToOptions[0].value,
        fluid: true,
        onChange: function onChange(event, data) {
          return _this2.setState({
            limitTo: data.value
          });
        },
        options: limitToOptions,
        selection: true,
        width: 8
      }))), /*#__PURE__*/React.createElement(Field$1, {
        name: fieldPath
      }, function (_ref) {
        var values = _ref.form.values;
        return /*#__PURE__*/React.createElement(RemoteSelectField, {
          clearable: clearable,
          fieldPath: fieldPath,
          initialSuggestions: getIn(values, fieldPath, []),
          multiple: multiple,
          noQueryMessage: i18next.t("Search or create subjects..."),
          placeholder: placeholder,
          preSearchChange: _this2.prepareSuggest,
          required: required,
          serializeSuggestions: _this2.serializeSubjects,
          serializeAddedValue: function serializeAddedValue(value) {
            return {
              text: value,
              value: value,
              key: value,
              subject: value
            };
          },
          suggestionAPIUrl: "/api/subjects",
          onValueChange: function onValueChange(_ref2, selectedSuggestions) {
            var formikProps = _ref2.formikProps;
            formikProps.form.setFieldValue(fieldPath, // save the suggestion objects so we can extract information
            // about which value added by the user
            selectedSuggestions);
          },
          value: getIn(values, fieldPath, []).map(function (val) {
            return val.subject;
          }),
          label: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("label", {
            className: "mobile-hidden"
          }, "\xA0"))
          /** For alignment purposes */
          ,
          allowAdditions: true,
          width: 11
        });
      }));
    }
  }]);

  return SubjectsField;
}(Component);
SubjectsField.defaultProps = {
  required: false,
  label: i18next.t("Subjects"),
  labelIcon: "tag",
  multiple: true,
  clearable: true,
  placeholder: i18next.t("Search for a subject by name")
};

var TitlesField = /*#__PURE__*/function (_Component) {
  _inherits(TitlesField, _Component);

  var _super = _createSuper(TitlesField);

  function TitlesField() {
    _classCallCheck(this, TitlesField);

    return _super.apply(this, arguments);
  }

  _createClass(TitlesField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          options = _this$props.options,
          label = _this$props.label,
          required = _this$props.required,
          recordUI = _this$props.recordUI;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextField, {
        fieldPath: fieldPath,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: "book",
          label: label
        }),
        required: required,
        className: "title-field",
        optimized: true
      }), /*#__PURE__*/React.createElement(AdditionalTitlesField, {
        options: options,
        recordUI: recordUI,
        fieldPath: "metadata.additional_titles"
      }));
    }
  }]);

  return TitlesField;
}(Component);
TitlesField.defaultProps = {
  label: i18next.t("Title"),
  required: false,
  recordUI: undefined
};

var VersionField = /*#__PURE__*/function (_Component) {
  _inherits(VersionField, _Component);

  var _super = _createSuper(VersionField);

  function VersionField() {
    _classCallCheck(this, VersionField);

    return _super.apply(this, arguments);
  }

  _createClass(VersionField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldPath = _this$props.fieldPath,
          label = _this$props.label,
          labelIcon = _this$props.labelIcon,
          placeholder = _this$props.placeholder;
      var helpText = /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Trans, null, "Mostly relevant for software and dataset uploads. A semantic version string is preferred see", /*#__PURE__*/React.createElement("a", {
        href: "https://semver.org/",
        target: "_blank",
        rel: "noopener noreferrer"
      }, " ", "semver.org"), ", but any version string is accepted."));
      return /*#__PURE__*/React.createElement(TextField, {
        fieldPath: fieldPath,
        helpText: helpText,
        label: /*#__PURE__*/React.createElement(FieldLabel, {
          htmlFor: fieldPath,
          icon: labelIcon,
          label: label
        }),
        placeholder: placeholder
      });
    }
  }]);

  return VersionField;
}(Component);
VersionField.defaultProps = {
  label: i18next.t("Version"),
  labelIcon: "code branch",
  placeholder: ""
};

var _excluded$2 = ["dispatch"];
function connect(Component) {
  // eslint-disable-next-line no-unused-vars,react/prop-types
  var WrappedComponent = function WrappedComponent(_ref) {
    _ref.dispatch;
        var props = _objectWithoutProperties(_ref, _excluded$2);

    return /*#__PURE__*/React.createElement(Component, props);
  };

  var mapStateToProps = function mapStateToProps(state) {
    return {
      deposit: state.deposit
    };
  };

  return connect$1(mapStateToProps, null)(WrappedComponent);
}

var BASE_HEADERS = {
  "json": {
    "Content-Type": "application/json"
  },
  "vnd+json": {
    "Content-Type": "application/json",
    "Accept": "application/vnd.inveniordm.v1+json"
  },
  "octet-stream": {
    "Content-Type": "application/octet-stream"
  }
};
/**
 * API client response.
 */

var DepositApiClientResponse = /*#__PURE__*/_createClass(function DepositApiClientResponse(data, errors) {
  _classCallCheck(this, DepositApiClientResponse);

  this.data = data;
  this.errors = errors;
});
var DepositApiClient = /*#__PURE__*/function () {
  /* eslint-disable no-unused-vars */
  function DepositApiClient(additionalApiConfig, createDraftURL, recordSerializer) {
    _classCallCheck(this, DepositApiClient);

    if (this.constructor === DepositApiClient) {
      throw new Error("Abstract");
    }

    var additionalHeaders = _get(additionalApiConfig, "headers");

    this.apiHeaders = Object.assign({}, BASE_HEADERS, additionalHeaders);
    this.apiConfig = {
      withCredentials: true,
      xsrfCookieName: "csrftoken",
      xsrfHeaderName: "X-CSRFToken",
      headers: this.apiHeaders.json
    };
    this.axiosWithConfig = axios.create(this.apiConfig);
    this.cancelToken = axios.CancelToken;
  }

  _createClass(DepositApiClient, [{
    key: "createDraft",
    value: function () {
      var _createDraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(draft) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function createDraft(_x) {
        return _createDraft.apply(this, arguments);
      }

      return createDraft;
    }()
  }, {
    key: "saveDraft",
    value: function () {
      var _saveDraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(draft, draftLinks) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function saveDraft(_x2, _x3) {
        return _saveDraft.apply(this, arguments);
      }

      return saveDraft;
    }()
  }, {
    key: "publishDraft",
    value: function () {
      var _publishDraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function publishDraft(_x4) {
        return _publishDraft.apply(this, arguments);
      }

      return publishDraft;
    }()
  }, {
    key: "deleteDraft",
    value: function () {
      var _deleteDraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function deleteDraft(_x5) {
        return _deleteDraft.apply(this, arguments);
      }

      return deleteDraft;
    }()
  }, {
    key: "reservePID",
    value: function () {
      var _reservePID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function reservePID(_x6, _x7) {
        return _reservePID.apply(this, arguments);
      }

      return reservePID;
    }()
  }, {
    key: "discardPID",
    value: function () {
      var _discardPID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function discardPID(_x8, _x9) {
        return _discardPID.apply(this, arguments);
      }

      return discardPID;
    }()
  }, {
    key: "createOrUpdateReview",
    value: function () {
      var _createOrUpdateReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(draftLinks, communityId) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function createOrUpdateReview(_x10, _x11) {
        return _createOrUpdateReview.apply(this, arguments);
      }

      return createOrUpdateReview;
    }()
  }, {
    key: "deleteReview",
    value: function () {
      var _deleteReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function deleteReview(_x12) {
        return _deleteReview.apply(this, arguments);
      }

      return deleteReview;
    }()
  }, {
    key: "submitReview",
    value: function () {
      var _submitReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function submitReview(_x13) {
        return _submitReview.apply(this, arguments);
      }

      return submitReview;
    }()
  }]);

  return DepositApiClient;
}();
/**
 * API Client for deposits.
 */

var RDMDepositApiClient = /*#__PURE__*/function (_DepositApiClient) {
  _inherits(RDMDepositApiClient, _DepositApiClient);

  var _super = _createSuper(RDMDepositApiClient);

  function RDMDepositApiClient(additionalApiConfig, createDraftURL, recordSerializer) {
    var _this;

    _classCallCheck(this, RDMDepositApiClient);

    _this = _super.call(this, additionalApiConfig);
    _this.createDraftURL = createDraftURL;
    _this.recordSerializer = recordSerializer;
    return _this;
  }

  _createClass(RDMDepositApiClient, [{
    key: "_createResponse",
    value: function () {
      var _createResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(axiosRequest) {
        var response, data, errors, errorData;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                _context10.next = 3;
                return axiosRequest();

              case 3:
                response = _context10.sent;
                data = this.recordSerializer.deserialize(response.data || {});
                errors = this.recordSerializer.deserializeErrors(response.data.errors || []);
                return _context10.abrupt("return", new DepositApiClientResponse(data, errors));

              case 9:
                _context10.prev = 9;
                _context10.t0 = _context10["catch"](0);
                errorData = _context10.t0.response.data;
                throw new DepositApiClientResponse({}, errorData);

              case 13:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[0, 9]]);
      }));

      function _createResponse(_x14) {
        return _createResponse2.apply(this, arguments);
      }

      return _createResponse;
    }()
    /**
     * Calls the API to create a new draft.
     *
     * @param {object} draft - Serialized draft
     */

  }, {
    key: "createDraft",
    value: function () {
      var _createDraft2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(draft) {
        var _this2 = this;

        var payload;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                payload = this.recordSerializer.serialize(draft);
                return _context11.abrupt("return", this._createResponse(function () {
                  return _this2.axiosWithConfig.post(_this2.createDraftURL, payload, {
                    headers: _this2.apiHeaders["vnd+json"],
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 2:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function createDraft(_x15) {
        return _createDraft2.apply(this, arguments);
      }

      return createDraft;
    }()
    /**
     * Calls the API to read a pre-existing draft.
     *
     * @param {object} draftLinks - the draft links object
     */

  }, {
    key: "readDraft",
    value: function () {
      var _readDraft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(draftLinks) {
        var _this3 = this;

        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", this._createResponse(function () {
                  return _this3.axiosWithConfig.get(draftLinks.self, {
                    headers: _this3.apiHeaders["vnd+json"],
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function readDraft(_x16) {
        return _readDraft.apply(this, arguments);
      }

      return readDraft;
    }()
    /**
     * Calls the API to save a pre-existing draft.
     *
     * @param {object} draft - the draft payload
     */

  }, {
    key: "saveDraft",
    value: function () {
      var _saveDraft2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(draft, draftLinks) {
        var _this4 = this;

        var payload;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                payload = this.recordSerializer.serialize(draft);
                return _context13.abrupt("return", this._createResponse(function () {
                  return _this4.axiosWithConfig.put(draftLinks.self, payload, {
                    headers: _this4.apiHeaders["vnd+json"],
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function saveDraft(_x17, _x18) {
        return _saveDraft2.apply(this, arguments);
      }

      return saveDraft;
    }()
    /**
     * Publishes the draft by calling its publish link.
     *
     * @param {string} draftLinks - the URL to publish the draft
     */

  }, {
    key: "publishDraft",
    value: function () {
      var _publishDraft2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(draftLinks) {
        var _this5 = this;

        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                return _context14.abrupt("return", this._createResponse(function () {
                  return _this5.axiosWithConfig.post(draftLinks.publish, {}, {
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 1:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function publishDraft(_x19) {
        return _publishDraft2.apply(this, arguments);
      }

      return publishDraft;
    }()
    /**
     * Deletes the draft by calling DELETE on its self link.
     *
     * @param {string} draftLinks - the URL to delete the draft
     */

  }, {
    key: "deleteDraft",
    value: function () {
      var _deleteDraft2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(draftLinks) {
        var _this6 = this;

        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                return _context15.abrupt("return", this._createResponse(function () {
                  return _this6.axiosWithConfig.delete(draftLinks.self, {});
                }));

              case 1:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function deleteDraft(_x20) {
        return _deleteDraft2.apply(this, arguments);
      }

      return deleteDraft;
    }()
    /**
     * Calls the API to reserve a PID.
     *
     */

  }, {
    key: "reservePID",
    value: function () {
      var _reservePID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(draftLinks, pidType) {
        var _this7 = this;

        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", this._createResponse(function () {
                  var linkName = "reserve_".concat(pidType);
                  var link = draftLinks[linkName];
                  return _this7.axiosWithConfig.post(link, {}, {
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function reservePID(_x21, _x22) {
        return _reservePID2.apply(this, arguments);
      }

      return reservePID;
    }()
    /**
     * Calls the API to discard a previously reserved PID.
     *
     */

  }, {
    key: "discardPID",
    value: function () {
      var _discardPID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(draftLinks, pidType) {
        var _this8 = this;

        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt("return", this._createResponse(function () {
                  var linkName = "reserve_".concat(pidType);
                  var link = draftLinks[linkName];
                  return _this8.axiosWithConfig.delete(link, {
                    params: {
                      expand: 1
                    }
                  });
                }));

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function discardPID(_x23, _x24) {
        return _discardPID2.apply(this, arguments);
      }

      return discardPID;
    }()
    /**
     * Creates a review request in initial state for draft by calling its
     * review link.
     *
     * @param {object} draftLinks - the draft links object
     */

  }, {
    key: "createOrUpdateReview",
    value: function () {
      var _createOrUpdateReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(draftLinks, communityId) {
        var _this9 = this;

        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                return _context18.abrupt("return", this._createResponse(function () {
                  return _this9.axiosWithConfig.put(draftLinks.review, {
                    receiver: {
                      community: communityId
                    },
                    type: "community-submission"
                  });
                }));

              case 1:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function createOrUpdateReview(_x25, _x26) {
        return _createOrUpdateReview2.apply(this, arguments);
      }

      return createOrUpdateReview;
    }()
    /**
     * Deletes a review request associated with the draft using its review link.
     *
     * @param {object} draftLinks - the draft links object
     */

  }, {
    key: "deleteReview",
    value: function () {
      var _deleteReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(draftLinks) {
        var _this10 = this;

        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                return _context19.abrupt("return", this._createResponse(function () {
                  return _this10.axiosWithConfig.delete(draftLinks.review, {});
                }));

              case 1:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function deleteReview(_x27) {
        return _deleteReview2.apply(this, arguments);
      }

      return deleteReview;
    }()
    /**
     * Submits the draft for review by calling its submit-review link.
     *
     * @param {object} draftLinks - the draft links object
     */

  }, {
    key: "submitReview",
    value: function () {
      var _submitReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(draftLinks, reviewComment) {
        var _this11 = this;

        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt("return", this._createResponse(function () {
                  return _this11.axiosWithConfig.post(draftLinks["submit-review"], reviewComment ? {
                    payload: {
                      content: reviewComment,
                      format: "html"
                    }
                  } : {});
                }));

              case 1:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function submitReview(_x28, _x29) {
        return _submitReview2.apply(this, arguments);
      }

      return submitReview;
    }()
    /**
     * Cancels the review for the draft by calling its cancel link.
     *
     * @param reviewLinks
     * @param reviewComment
     */

  }, {
    key: "cancelReview",
    value: function () {
      var _cancelReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(reviewLinks, reviewComment) {
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                return _context21.abrupt("return", this.axiosWithConfig.post(reviewLinks.actions.cancel, reviewComment ? {
                  payload: {
                    content: reviewComment,
                    format: "html"
                  }
                } : {}));

              case 1:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function cancelReview(_x30, _x31) {
        return _cancelReview.apply(this, arguments);
      }

      return cancelReview;
    }()
  }]);

  return RDMDepositApiClient;
}(DepositApiClient);
/**
 * Abstract class for File API Client.
 * @constructor
 * @abstract
 */

var DepositFileApiClient = /*#__PURE__*/function () {
  function DepositFileApiClient(additionalApiConfig) {
    _classCallCheck(this, DepositFileApiClient);

    if (this.constructor === DepositFileApiClient) {
      throw new Error("Abstract");
    }

    var additionalHeaders = _get(additionalApiConfig, "headers", {});

    this.apiHeaders = Object.assign({}, BASE_HEADERS, additionalHeaders);
    var apiConfig = {
      withCredentials: true,
      xsrfCookieName: "csrftoken",
      xsrfHeaderName: "X-CSRFToken",
      headers: this.apiHeaders.json
    };
    this.axiosWithConfig = axios.create(apiConfig);
  }

  _createClass(DepositFileApiClient, [{
    key: "isCancelled",
    value: function isCancelled(error) {
      return axios.isCancel(error);
    }
  }, {
    key: "initializeFileUpload",
    value: function initializeFileUpload(initializeUploadUrl, filename) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(uploadUrl, file, onUploadProgress, cancel) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "finalizeFileUpload",
    value: function finalizeFileUpload(finalizeUploadUrl) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(fileLinks) {
      throw new Error("Not implemented.");
    }
  }]);

  return DepositFileApiClient;
}();
/**
 * Default File API Client for deposits.
 */

var RDMDepositFileApiClient = /*#__PURE__*/function (_DepositFileApiClient) {
  _inherits(RDMDepositFileApiClient, _DepositFileApiClient);

  var _super2 = _createSuper(RDMDepositFileApiClient);

  function RDMDepositFileApiClient() {
    _classCallCheck(this, RDMDepositFileApiClient);

    return _super2.apply(this, arguments);
  }

  _createClass(RDMDepositFileApiClient, [{
    key: "initializeFileUpload",
    value: function initializeFileUpload(initializeUploadUrl, filename) {
      var payload = [{
        key: filename
      }];
      return this.axiosWithConfig.post(initializeUploadUrl, payload, {});
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(uploadUrl, file, onUploadProgressFn, cancelFn) {
      return this.axiosWithConfig.put(uploadUrl, file, {
        headers: this.apiHeaders["octet-stream"],
        onUploadProgress: function onUploadProgress(event) {
          var percent = Math.floor(event.loaded / event.total * 100);
          onUploadProgressFn && onUploadProgressFn(percent);
        },
        cancelToken: new axios.CancelToken(cancelFn)
      });
    }
  }, {
    key: "finalizeFileUpload",
    value: function finalizeFileUpload(finalizeUploadUrl) {
      return this.axiosWithConfig.post(finalizeUploadUrl, {});
    }
  }, {
    key: "importParentRecordFiles",
    value: function importParentRecordFiles(draftLinks) {
      var link = "".concat(draftLinks.self, "/actions/files-import");
      return this.axiosWithConfig.post(link, {});
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(fileLinks) {
      return this.axiosWithConfig.delete(fileLinks.self);
    }
  }]);

  return RDMDepositFileApiClient;
}(DepositFileApiClient);

var DepositErrorHandler = /*#__PURE__*/function () {
  function DepositErrorHandler() {
    _classCallCheck(this, DepositErrorHandler);
  }

  _createClass(DepositErrorHandler, [{
    key: "extractErrors",
    value:
    /* eslint-disable-next-line no-unused-vars */
    function extractErrors(error, record) {
      var backendErrors = _get(error, "response.data.errors", []);

      var backendErrorMessage = _get(error, "response.data.message", "");

      var frontendErrors = {
        message: backendErrorMessage
      };

      var _iterator = _createForOfIteratorHelper(backendErrors),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fieldError = _step.value;

          var errorPath = _join([].concat(_toConsumableArray(fieldError.parents), [fieldError.field]), ".");

          frontendErrors[errorPath] = fieldError.message;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return frontendErrors;
    }
  }]);

  return DepositErrorHandler;
}();

var _excluded$1 = ["isFileUploadInProgress"];

var DepositBootstrapComponent = /*#__PURE__*/function (_Component) {
  _inherits(DepositBootstrapComponent, _Component);

  var _super = _createSuper(DepositBootstrapComponent);

  function DepositBootstrapComponent() {
    var _this;

    _classCallCheck(this, DepositBootstrapComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.submitContext = undefined;

    _this.setSubmitContext = function (actionName) {
      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _this.submitContext = {
        actionName: actionName,
        extra: extra
      };
    };

    _this.onFormSubmit = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(values, formikBag) {
        var _this$props, saveAction, publishAction, submitReview, previewAction, deleteAction, reservePIDAction, discardPIDAction, _this$submitContext, actionName, extra, actionFunc, params;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = _this.props, saveAction = _this$props.saveAction, publishAction = _this$props.publishAction, submitReview = _this$props.submitReview, previewAction = _this$props.previewAction, deleteAction = _this$props.deleteAction, reservePIDAction = _this$props.reservePIDAction, discardPIDAction = _this$props.discardPIDAction;
                _this$submitContext = _this.submitContext, actionName = _this$submitContext.actionName, extra = _this$submitContext.extra;
                actionFunc = undefined;
                params = {};
                _context.t0 = actionName;
                _context.next = _context.t0 === DepositFormSubmitActions.SAVE ? 7 : _context.t0 === DepositFormSubmitActions.PUBLISH ? 9 : _context.t0 === DepositFormSubmitActions.PUBLISH_WITHOUT_COMMUNITY ? 11 : _context.t0 === DepositFormSubmitActions.SUBMIT_REVIEW ? 14 : _context.t0 === DepositFormSubmitActions.PREVIEW ? 17 : _context.t0 === DepositFormSubmitActions.DELETE ? 19 : _context.t0 === DepositFormSubmitActions.RESERVE_PID ? 22 : _context.t0 === DepositFormSubmitActions.DISCARD_PID ? 25 : 28;
                break;

              case 7:
                actionFunc = saveAction;
                return _context.abrupt("break", 29);

              case 9:
                actionFunc = publishAction;
                return _context.abrupt("break", 29);

              case 11:
                actionFunc = publishAction;
                params["withoutCommunity"] = true;
                return _context.abrupt("break", 29);

              case 14:
                actionFunc = submitReview;
                params["reviewComment"] = extra["reviewComment"];
                return _context.abrupt("break", 29);

              case 17:
                actionFunc = previewAction;
                return _context.abrupt("break", 29);

              case 19:
                actionFunc = deleteAction;
                params["isDiscardingVersion"] = extra["isDiscardingVersion"];
                return _context.abrupt("break", 29);

              case 22:
                actionFunc = reservePIDAction;
                params["pidType"] = extra["pidType"];
                return _context.abrupt("break", 29);

              case 25:
                actionFunc = discardPIDAction;
                params["pidType"] = extra["pidType"];
                return _context.abrupt("break", 29);

              case 28:
                throw Error("The submit btn must set the form action name.");

              case 29:
                _context.prev = 29;
                _context.next = 32;
                return actionFunc(values, params);

              case 32:
                _context.next = 37;
                break;

              case 34:
                _context.prev = 34;
                _context.t1 = _context["catch"](29);

                // make sure the error contains form errors, and not global errors.
                if (_context.t1 && _context.t1.errors) {
                  formikBag.setErrors(_context.t1.errors);
                } else {
                  // scroll top to show the global error
                  scrollTop();
                }

              case 37:
                _context.prev = 37;
                // reset the action name after having handled it
                _this.submitContext = {};
                return _context.finish(37);

              case 40:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[29, 34, 37, 40]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    return _this;
  }

  _createClass(DepositBootstrapComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var fileUploadOngoing = this.props.fileUploadOngoing;
      window.addEventListener("beforeunload", function (e) {
        if (fileUploadOngoing) {
          e.returnValue = "";
          return "";
        }
      });
      window.addEventListener("unload", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          errors = _this$props2.errors,
          record = _this$props2.record,
          children = _this$props2.children;
      return /*#__PURE__*/React.createElement(DepositFormSubmitContext.Provider, {
        value: {
          setSubmitContext: this.setSubmitContext
        }
      }, /*#__PURE__*/React.createElement(BaseForm, {
        onSubmit: this.onFormSubmit,
        formik: _objectSpread2({
          // enableReinitialise needed due to
          // updated draft PID (and the endpoint URL as a consequence).
          // After saving draft for the first time, a new PID is obtained,
          // initial values need to be updated with draft record containing
          // the new PID in its payload, otherwise a new PID
          // is requested on each action, generating countless drafts
          enableReinitialize: true,
          initialValues: record
        }, errors && {
          initialErrors: errors
        })
      }, children));
    }
  }]);

  return DepositBootstrapComponent;
}(Component);

DepositBootstrapComponent.defaultProps = {
  errors: undefined,
  children: undefined,
  fileUploadOngoing: false
};

var mapStateToProps = function mapStateToProps(state) {
  var _state$files = state.files,
      isFileUploadInProgress = _state$files.isFileUploadInProgress,
      files = _objectWithoutProperties(_state$files, _excluded$1);

  return {
    record: state.deposit.record,
    errors: state.deposit.errors,
    formState: state.deposit.formState,
    fileUploadOngoing: isFileUploadInProgress,
    files: files
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    publishAction: function publishAction(values, _ref3) {
      var _ref3$withoutCommunit = _ref3.withoutCommunity,
          withoutCommunity = _ref3$withoutCommunit === void 0 ? false : _ref3$withoutCommunit;
      return dispatch(publish(values, {
        withoutCommunity: withoutCommunity
      }));
    },
    submitReview: function submitReview$1(values, _ref4) {
      var reviewComment = _ref4.reviewComment;
      return dispatch(submitReview(values, {
        reviewComment: reviewComment
      }));
    },
    saveAction: function saveAction(values) {
      return dispatch(save(values));
    },
    previewAction: function previewAction(values) {
      return dispatch(preview(values));
    },
    deleteAction: function deleteAction(values, _ref5) {
      _ref5.isDiscardingVersion;
      return dispatch(delete_());
    },
    reservePIDAction: function reservePIDAction(values, _ref6) {
      var pidType = _ref6.pidType;
      return dispatch(reservePID(values, {
        pidType: pidType
      }));
    },
    discardPIDAction: function discardPIDAction(values, _ref7) {
      var pidType = _ref7.pidType;
      return dispatch(discardPID(values, {
        pidType: pidType
      }));
    }
  };
};

var DepositBootstrap = connect$1(mapStateToProps, mapDispatchToProps)(DepositBootstrapComponent);

// This file is part of React-Invenio-Deposit
// Copyright (C) 2020-2022 CERN.
// Copyright (C) 2020-2022 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
var DepositDraftsService = /*#__PURE__*/function () {
  /* eslint-disable no-unused-vars */
  function DepositDraftsService(apiClient) {
    _classCallCheck(this, DepositDraftsService);

    if (this.constructor === DepositDraftsService) {
      throw new Error("Abstract");
    }
  }

  _createClass(DepositDraftsService, [{
    key: "read",
    value: function () {
      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function read(_x) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: "create",
    value: function () {
      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(draft) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function create(_x2) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(draft) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function save(_x3) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "publish",
    value: function () {
      var _publish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function publish(_x4) {
        return _publish.apply(this, arguments);
      }

      return publish;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function _delete(_x5) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "reservePID",
    value: function () {
      var _reservePID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function reservePID(_x6, _x7) {
        return _reservePID.apply(this, arguments);
      }

      return reservePID;
    }()
  }, {
    key: "discardPID",
    value: function () {
      var _discardPID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function discardPID(_x8, _x9) {
        return _discardPID.apply(this, arguments);
      }

      return discardPID;
    }()
  }, {
    key: "createOrUpdateReview",
    value: function () {
      var _createOrUpdateReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(draftLinks, newCommunityId) {
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function createOrUpdateReview(_x10, _x11) {
        return _createOrUpdateReview.apply(this, arguments);
      }

      return createOrUpdateReview;
    }()
  }, {
    key: "deleteReview",
    value: function () {
      var _deleteReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function deleteReview(_x12) {
        return _deleteReview.apply(this, arguments);
      }

      return deleteReview;
    }()
  }, {
    key: "submitReview",
    value: function () {
      var _submitReview = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function submitReview(_x13) {
        return _submitReview.apply(this, arguments);
      }

      return submitReview;
    }()
  }]);

  return DepositDraftsService;
}();
var RDMDepositDraftsService = /*#__PURE__*/function (_DepositDraftsService) {
  _inherits(RDMDepositDraftsService, _DepositDraftsService);

  var _super = _createSuper(RDMDepositDraftsService);

  function RDMDepositDraftsService(apiClient) {
    var _this;

    _classCallCheck(this, RDMDepositDraftsService);

    _this = _super.call(this);
    _this.apiClient = apiClient;
    return _this;
  }

  _createClass(RDMDepositDraftsService, [{
    key: "_draftAlreadyCreated",
    value: function _draftAlreadyCreated(record) {
      return !!record.id;
    }
    /**
     * Creates the current draft (backend) and changes URL to match its edit URL.
     */

  }, {
    key: "create",
    value: function () {
      var _create2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(draft) {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", this.apiClient.createDraft(draft));

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function create(_x14) {
        return _create2.apply(this, arguments);
      }

      return create;
    }()
    /**
     * Read the current draft (backend).
     */

  }, {
    key: "read",
    value: function () {
      var _read2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", this.apiClient.readDraft(draftLinks));

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function read(_x15) {
        return _read2.apply(this, arguments);
      }

      return read;
    }()
    /**
     * Saves the current draft (backend) and changes URL to match its edit URL.
     */

  }, {
    key: "save",
    value: function () {
      var _save2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(draft) {
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                return _context13.abrupt("return", this._draftAlreadyCreated(draft) ? this.apiClient.saveDraft(draft, draft.links) : this.create(draft));

              case 1:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function save(_x16) {
        return _save2.apply(this, arguments);
      }

      return save;
    }()
    /**
     * Publishes the current draft (backend) and redirects to its view URL.
     */

  }, {
    key: "publish",
    value: function () {
      var _publish2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                return _context14.abrupt("return", this.apiClient.publishDraft(draftLinks));

              case 1:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function publish(_x17) {
        return _publish2.apply(this, arguments);
      }

      return publish;
    }()
    /**
     * Deletes the current draft and redirects to uploads page.
     */

  }, {
    key: "delete",
    value: function () {
      var _delete3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                return _context15.abrupt("return", this.apiClient.deleteDraft(draftLinks));

              case 1:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function _delete(_x18) {
        return _delete3.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Reserve a PID
     */

  }, {
    key: "reservePID",
    value: function () {
      var _reservePID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", this.apiClient.reservePID(draftLinks, pidType));

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function reservePID(_x19, _x20) {
        return _reservePID2.apply(this, arguments);
      }

      return reservePID;
    }()
    /**
     * Discard a previously reserved PID
     */

  }, {
    key: "discardPID",
    value: function () {
      var _discardPID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(draftLinks, pidType) {
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                return _context17.abrupt("return", this.apiClient.discardPID(draftLinks, pidType));

              case 1:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function discardPID(_x21, _x22) {
        return _discardPID2.apply(this, arguments);
      }

      return discardPID;
    }()
    /**
     * Creates or updates a review request.
     */

  }, {
    key: "createOrUpdateReview",
    value: function () {
      var _createOrUpdateReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(draftLinks, newCommunityId) {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                return _context18.abrupt("return", this.apiClient.createOrUpdateReview(draftLinks, newCommunityId));

              case 1:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function createOrUpdateReview(_x23, _x24) {
        return _createOrUpdateReview2.apply(this, arguments);
      }

      return createOrUpdateReview;
    }()
    /**
     * Deletes a review request associated with the draft.
     */

  }, {
    key: "deleteReview",
    value: function () {
      var _deleteReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                return _context19.abrupt("return", this.apiClient.deleteReview(draftLinks));

              case 1:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function deleteReview(_x25) {
        return _deleteReview2.apply(this, arguments);
      }

      return deleteReview;
    }()
    /**
     * Submits the draft for review.
     */

  }, {
    key: "submitReview",
    value: function () {
      var _submitReview2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(draftLinks, reviewComment) {
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt("return", this.apiClient.submitReview(draftLinks, reviewComment));

              case 1:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function submitReview(_x26, _x27) {
        return _submitReview2.apply(this, arguments);
      }

      return submitReview;
    }()
  }]);

  return RDMDepositDraftsService;
}(DepositDraftsService);

var UploaderQueue = /*#__PURE__*/function () {
  function UploaderQueue() {
    _classCallCheck(this, UploaderQueue);

    this.currents = [];
    this.pending = [];
  }

  _createClass(UploaderQueue, [{
    key: "put",
    value: function put(initializeUploadURL, file) {
      this.pending.push({
        initializeUploadURL: initializeUploadURL,
        file: file
      });
    }
  }, {
    key: "totalInProgress",
    get: function get() {
      return this.currents.length;
    }
  }, {
    key: "next",
    get: function get() {
      // remove from the pending and add it to the currents
      var nextFile = this.pending.shift();

      if (nextFile !== undefined) {
        this.currents.push(nextFile.file);
      }

      return nextFile;
    }
  }, {
    key: "markCompleted",
    value: function markCompleted(file) {
      var index = this.currents.indexOf(file);

      if (index >= 0) {
        // remove from the current
        this.currents.splice(index, 1);
      }
    }
  }]);

  return UploaderQueue;
}();

var UploadProgressNotifier = /*#__PURE__*/function () {
  /* eslint-disable no-unused-vars */
  function UploadProgressNotifier(dispatcher) {
    _classCallCheck(this, UploadProgressNotifier);

    this.dispatcher = dispatcher;
  }

  _createClass(UploadProgressNotifier, [{
    key: "onUploadAdded",
    value: function onUploadAdded(filename) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "onUploadStarted",
    value: function onUploadStarted(filename, cancelFunc) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "onUploadProgress",
    value: function onUploadProgress(filename, percent) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "onUploadCompleted",
    value: function onUploadCompleted(filename, size, checksum, links) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "onUploadCancelled",
    value: function onUploadCancelled(filename) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "onUploadFailed",
    value: function onUploadFailed(filename) {
      throw new Error("Not implemented.");
    }
  }]);

  return UploadProgressNotifier;
}();
var DepositFilesService = /*#__PURE__*/function () {
  function DepositFilesService(fileApiClient, fileUploadConcurrency) {
    _classCallCheck(this, DepositFilesService);

    if (this.constructor === DepositFilesService) {
      throw new Error("Abstract");
    }
  }

  _createClass(DepositFilesService, [{
    key: "setProgressNotifier",
    value: function setProgressNotifier(progressNotifier) {
      if (!(progressNotifier instanceof UploadProgressNotifier)) {
        throw new Error("Progress notifier must be an instance of `UploadProgressNotifier`");
      }

      this.progressNotifier = progressNotifier;
    }
  }, {
    key: "upload",
    value: function () {
      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(initializeUploadURL, file, progressNotifier) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function upload(_x, _x2, _x3) {
        return _upload.apply(this, arguments);
      }

      return upload;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fileLinks) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function _delete(_x4) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "importParentRecordFiles",
    value: function () {
      var _importParentRecordFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(draftLinks) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("Not implemented.");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function importParentRecordFiles(_x5) {
        return _importParentRecordFiles.apply(this, arguments);
      }

      return importParentRecordFiles;
    }()
  }]);

  return DepositFilesService;
}();
var RDMDepositFilesService = /*#__PURE__*/function (_DepositFilesService) {
  _inherits(RDMDepositFilesService, _DepositFilesService);

  var _super = _createSuper(RDMDepositFilesService);

  function RDMDepositFilesService(fileApiClient, fileUploadConcurrency) {
    var _this;

    _classCallCheck(this, RDMDepositFilesService);

    _this = _super.call(this);

    _this._initializeUpload = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(initializeUploadURL, file) {
        var response, initializedFile;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _this.fileApiClient.initializeFileUpload(initializeUploadURL, file.name);

              case 2:
                response = _context4.sent;
                // get the init file with the sent filename
                initializedFile = response.data.entries.filter(function (entry) {
                  return entry.key.normalize() === file.name.normalize();
                })[0]; // this should throw an error if not found

                return _context4.abrupt("return", initializedFile);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x6, _x7) {
        return _ref.apply(this, arguments);
      };
    }();

    _this._doUpload = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(uploadUrl, file) {
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _this.fileApiClient.uploadFile(uploadUrl, file, function (percent) {
                  return _this.progressNotifier.onUploadProgress(file.name, percent);
                }, function (cancelFn) {
                  return _this.progressNotifier.onUploadStarted(file.name, cancelFn);
                });

              case 2:
                return _context5.abrupt("return", _context5.sent);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x8, _x9) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this._finalizeUpload = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(commitFileURL, file) {
        var response;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // Regardless of what is the status of the finalize step we start
                // the next upload in the queue
                _this.uploaderQueue.markCompleted(file);

                _this._startNextUpload();

                _context6.next = 4;
                return _this.fileApiClient.finalizeFileUpload(commitFileURL);

              case 4:
                response = _context6.sent;
                return _context6.abrupt("return", response.data);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x10, _x11) {
        return _ref3.apply(this, arguments);
      };
    }();

    _this._onError = function (file) {
      var isCancelled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (isCancelled) {
        _this.progressNotifier.onUploadCancelled(file.name);
      } else {
        _this.progressNotifier.onUploadFailed(file.name);
      }

      _this.uploaderQueue.markCompleted(file);

      _this._startNextUpload();
    };

    _this._startNewUpload = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(initializeUploadURL, file) {
        var initializedFileMetadata, startUploadURL, commitFileURL, fileData, isCancelled;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                _context7.next = 3;
                return _this._initializeUpload(initializeUploadURL, file);

              case 3:
                initializedFileMetadata = _context7.sent;
                _context7.next = 10;
                break;

              case 6:
                _context7.prev = 6;
                _context7.t0 = _context7["catch"](0);

                _this._onError(file);

                return _context7.abrupt("return");

              case 10:
                startUploadURL = initializedFileMetadata.links.content;
                commitFileURL = initializedFileMetadata.links.commit;
                _context7.prev = 12;
                _context7.next = 15;
                return _this._doUpload(startUploadURL, file);

              case 15:
                _context7.next = 17;
                return _this._finalizeUpload(commitFileURL, file);

              case 17:
                fileData = _context7.sent;

                _this.progressNotifier.onUploadCompleted(fileData.key, fileData.size, fileData.checksum, fileData.links);

                _context7.next = 27;
                break;

              case 21:
                _context7.prev = 21;
                _context7.t1 = _context7["catch"](12);
                _context7.next = 25;
                return _this.delete(initializedFileMetadata.links);

              case 25:
                isCancelled = _this.fileApiClient.isCancelled(_context7.t1);

                _this._onError(file, isCancelled);

              case 27:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, null, [[0, 6], [12, 21]]);
      }));

      return function (_x12, _x13) {
        return _ref4.apply(this, arguments);
      };
    }();

    _this._startNextUpload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var shouldStartNewUpload, nextFile;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              shouldStartNewUpload = _this.uploaderQueue.totalInProgress < _this.maxConcurrentUploads;

              if (!shouldStartNewUpload) {
                _context8.next = 6;
                break;
              }

              nextFile = _this.uploaderQueue.next;

              if (!nextFile) {
                _context8.next = 6;
                break;
              }

              _context8.next = 6;
              return _this._startNewUpload(nextFile.initializeUploadURL, nextFile.file);

            case 6:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    _this.upload = /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(initializeUploadURL, file) {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _this.uploaderQueue.put(initializeUploadURL, file);

                _this.progressNotifier.onUploadAdded(file.name);

                _context9.next = 4;
                return _this._startNextUpload();

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x14, _x15) {
        return _ref6.apply(this, arguments);
      };
    }();

    _this.delete = /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(fileLinks) {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return _this.fileApiClient.deleteFile(fileLinks);

              case 2:
                return _context10.abrupt("return", _context10.sent);

              case 3:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x16) {
        return _ref7.apply(this, arguments);
      };
    }();

    _this.importParentRecordFiles = /*#__PURE__*/function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(draftLinks) {
        var response;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return _this.fileApiClient.importParentRecordFiles(draftLinks);

              case 2:
                response = _context11.sent;
                return _context11.abrupt("return", response.data.entries.reduce(function (acc, file) {
                  return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, file.key, {
                    status: UploadState.finished,
                    size: file.size,
                    name: file.key,
                    progressPercentage: 100,
                    checksum: file.checksum,
                    links: file.links
                  }));
                }, {}));

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x17) {
        return _ref8.apply(this, arguments);
      };
    }();

    _this.fileApiClient = fileApiClient;
    _this.maxConcurrentUploads = fileUploadConcurrency || 3;
    _this.uploaderQueue = new UploaderQueue();
    return _this;
  }

  return _createClass(RDMDepositFilesService);
}(DepositFilesService);

var Field = /*#__PURE__*/function () {
  function Field(_ref) {
    var fieldpath = _ref.fieldpath,
        _ref$deserializedDefa = _ref.deserializedDefault,
        deserializedDefault = _ref$deserializedDefa === void 0 ? null : _ref$deserializedDefa,
        _ref$serializedDefaul = _ref.serializedDefault,
        serializedDefault = _ref$serializedDefaul === void 0 ? null : _ref$serializedDefaul,
        _ref$allowEmpty = _ref.allowEmpty,
        allowEmpty = _ref$allowEmpty === void 0 ? false : _ref$allowEmpty;

    _classCallCheck(this, Field);

    this.fieldpath = fieldpath;
    this.deserializedDefault = deserializedDefault;
    this.serializedDefault = serializedDefault;
    this.allowEmpty = allowEmpty;
  }

  _createClass(Field, [{
    key: "deserialize",
    value: function deserialize(record) {
      var fieldValue = _get(record, this.fieldpath, this.deserializedDefault);

      if (fieldValue !== null) {
        return _set(_cloneDeep(record), this.fieldpath, fieldValue);
      }

      return record;
    }
  }, {
    key: "serialize",
    value: function serialize(record) {
      var fieldValue = _get(record, this.fieldpath, this.serializedDefault);

      if (fieldValue !== null) {
        return _set(_cloneDeep(record), this.fieldpath, fieldValue);
      }

      return record;
    }
  }]);

  return Field;
}();

var SchemaField = /*#__PURE__*/function (_Field) {
  _inherits(SchemaField, _Field);

  var _super = _createSuper(SchemaField);

  /**
   * IMPORTANT: This component is so far only for list subfields, since
   * the use case of a single object with schema has not arisen yet.
   */
  function SchemaField(_ref) {
    var _this;

    var fieldpath = _ref.fieldpath,
        schema = _ref.schema,
        _ref$deserializedDefa = _ref.deserializedDefault,
        deserializedDefault = _ref$deserializedDefa === void 0 ? [] : _ref$deserializedDefa,
        _ref$serializedDefaul = _ref.serializedDefault,
        serializedDefault = _ref$serializedDefaul === void 0 ? [] : _ref$serializedDefaul;

    _classCallCheck(this, SchemaField);

    _this = _super.call(this, {
      fieldpath: fieldpath,
      deserializedDefault: deserializedDefault,
      serializedDefault: serializedDefault
    });
    _this.schema = schema;
    _this.schemaKeys = Object.keys(_this.schema);
    return _this;
  }
  /**
   * Deserialize backend field given by `this.fieldPath` from `serialized`
   * object into format compatible with frontend using `this.schema`.
   * @method
   * @param {object} serialized - in API format
   * @returns {object} deserialized - in frontent format
   */


  _createClass(SchemaField, [{
    key: "deserialize",
    value: function deserialize(serialized, defaultLocale) {
      var _this2 = this;

      var fieldValues = _get(serialized, this.fieldpath, this.deserializedDefault);

      var deserializedElements = fieldValues.map(function (value, i) {
        var deserializedElement = _pick(value, _this2.schemaKeys);

        _this2.schemaKeys.forEach(function (key) {
          deserializedElement = _this2.schema[key].deserialize(deserializedElement, defaultLocale);
        }); // Add __key


        deserializedElement.__key = i;
        return deserializedElement;
      });
      return _set(_cloneDeep(serialized), this.fieldpath, deserializedElements);
    }
    /**
     * Serialize frontend field given by `this.fieldPath` from `deserialized`
     * object into format compatible with backend using `this.schema`.
     * @method
     * @param {object} deserialized - in frontend format
     * @returns {object} serialized - in API format
     *
     */

  }, {
    key: "serialize",
    value: function serialize(deserialized, defaultLocale) {
      var _this3 = this;

      var fieldValues = _get(deserialized, this.fieldpath, this.serializedDefault);

      var serializedElements = fieldValues.map(function (value) {
        var serializedElement = _pick(value, _this3.schemaKeys);

        _this3.schemaKeys.forEach(function (key) {
          serializedElement = _this3.schema[key].serialize(serializedElement, defaultLocale);
        });

        return serializedElement;
      });

      if (serializedElements !== null) {
        return _set(_cloneDeep(deserialized), this.fieldpath, serializedElements);
      }

      return serializedElements;
    }
  }]);

  return SchemaField;
}(Field);

var VocabularyField = /*#__PURE__*/function (_Field) {
  _inherits(VocabularyField, _Field);

  var _super = _createSuper(VocabularyField);

  function VocabularyField(_ref) {
    var _this;

    var fieldpath = _ref.fieldpath,
        _ref$deserializedDefa = _ref.deserializedDefault,
        deserializedDefault = _ref$deserializedDefa === void 0 ? null : _ref$deserializedDefa,
        _ref$serializedDefaul = _ref.serializedDefault,
        serializedDefault = _ref$serializedDefaul === void 0 ? null : _ref$serializedDefaul,
        _ref$labelField = _ref.labelField,
        labelField = _ref$labelField === void 0 ? "name" : _ref$labelField;

    _classCallCheck(this, VocabularyField);

    _this = _super.call(this, {
      fieldpath: fieldpath,
      deserializedDefault: deserializedDefault,
      serializedDefault: serializedDefault
    });
    _this.labelField = labelField;
    return _this;
  }
  /**
   * Deserializes a given record.
   *
   * @param {object} record The record to be deserialized.
   *
   * @returns {object} Returns a deep copy of the given record, deserialized using the provided settings.
   */


  _createClass(VocabularyField, [{
    key: "deserialize",
    value: function deserialize(record) {
      /**
       * Deserializes an object.
       *
       * If the object contains an id, its returned as-is.
       *
       * @param {object} value The object to be deserialized.
       *
       * @returns {(object|*)} Returns a clone of the given object or its 'id' property, if exists.
       */
      var _deserialize = function _deserialize(value) {
        if (value !== null && value !== void 0 && value.id) {
          return value.id;
        }
      };

      var fieldValue = _get(record, this.fieldpath, this.deserializedDefault);

      var deserializedValue = null;

      if (fieldValue !== null) {
        deserializedValue = Array.isArray(fieldValue) ? fieldValue.map(_deserialize) : _deserialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, deserializedValue || fieldValue);
    }
  }, {
    key: "serialize",
    value: function serialize(record) {
      var _this2 = this;

      var _serialize = function _serialize(value) {
        if (typeof value === "string") {
          return {
            id: value
          };
        }

        return _objectSpread2(_objectSpread2({}, value.id ? {
          id: value.id
        } : {}), value[_this2.labelField] && _defineProperty({}, _this2.labelField, value[_this2.labelField]));
      };

      var fieldValue = _get(record, this.fieldpath, this.serializedDefault);

      var serializedValue = null;

      if (fieldValue !== null) {
        serializedValue = Array.isArray(fieldValue) ? fieldValue.map(_serialize) : _serialize(fieldValue); // fieldValue is a string
      }

      return _set(_cloneDeep(record), this.fieldpath, serializedValue || fieldValue);
    }
  }]);

  return VocabularyField;
}(Field);
var AllowAdditionsVocabularyField = /*#__PURE__*/function (_VocabularyField) {
  _inherits(AllowAdditionsVocabularyField, _VocabularyField);

  var _super2 = _createSuper(AllowAdditionsVocabularyField);

  function AllowAdditionsVocabularyField() {
    _classCallCheck(this, AllowAdditionsVocabularyField);

    return _super2.apply(this, arguments);
  }

  _createClass(AllowAdditionsVocabularyField, [{
    key: "deserialize",
    value: function deserialize(record) {
      var _this3 = this;

      var fieldValue = _get(record, this.fieldpath, this.deserializedDefault); // We deserialize the values in the format
      // {id: 'vocab_id', <labelField>: 'vacab_name'} for controlled values
      // and {<labelField>: 'vocab_name'} for user added entries


      var _deserialize = function _deserialize(value) {
        return _objectSpread2(_objectSpread2({}, value.id ? {
          id: value.id
        } : {}), {}, _defineProperty({}, _this3.labelField, value[_this3.labelField]));
      };

      var deserializedValue = null;

      if (fieldValue !== null) {
        deserializedValue = Array.isArray(fieldValue) ? fieldValue.map(_deserialize) : _deserialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, deserializedValue || fieldValue);
    }
  }]);

  return AllowAdditionsVocabularyField;
}(VocabularyField);
/**
 * Serialize and deserialize rights field that can contain vocabulary values
 * and free text but sharing structure with the vocabulary values
 */

var RightsVocabularyField = /*#__PURE__*/function (_VocabularyField2) {
  _inherits(RightsVocabularyField, _VocabularyField2);

  var _super3 = _createSuper(RightsVocabularyField);

  function RightsVocabularyField(_ref3) {
    var _this4;

    var fieldpath = _ref3.fieldpath,
        _ref3$deserializedDef = _ref3.deserializedDefault,
        deserializedDefault = _ref3$deserializedDef === void 0 ? null : _ref3$deserializedDef,
        _ref3$serializedDefau = _ref3.serializedDefault,
        serializedDefault = _ref3$serializedDefau === void 0 ? null : _ref3$serializedDefau,
        _ref3$localeFields = _ref3.localeFields,
        localeFields = _ref3$localeFields === void 0 ? [] : _ref3$localeFields;

    _classCallCheck(this, RightsVocabularyField);

    _this4 = _super3.call(this, {
      fieldpath: fieldpath,
      deserializedDefault: deserializedDefault,
      serializedDefault: serializedDefault
    });
    _this4.localeFields = localeFields;
    return _this4;
  }
  /**
   * Deserializes the values in the format:
   * {id: 'vocab_id'} for controlled vocabs and
   * {<field_name>: 'field_name', <field_descripton>: 'field_descripton', ...}
   * for user added entries
   *
   * @param {Object} record - Record to deserialize
   * @param {String} defaultLocale - The default locale
   * @returns
   */


  _createClass(RightsVocabularyField, [{
    key: "deserialize",
    value: function deserialize(record, defaultLocale) {
      var _this5 = this;

      var fieldValue = _get(record, this.fieldpath, this.deserializedDefault);

      var _deserialize = function _deserialize(value) {
        if ("id" in value) {
          if (typeof value.title === "string") {
            // Needed in case we pass a default value
            return value;
          }

          return {
            id: value.id
          };
        } else {
          var _deserializedValue = _cloneDeep(value);

          _this5.localeFields.forEach(function (field) {
            if (value[field]) {
              _deserializedValue[field] = value[field][defaultLocale];
            }
          });

          return _deserializedValue;
        }
      };

      var deserializedValue = null;

      if (fieldValue !== null) {
        deserializedValue = Array.isArray(fieldValue) ? fieldValue.map(_deserialize) : _deserialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, deserializedValue || fieldValue);
    }
    /**
     * Serializes the values in the format:
     * {id: 'vocab_id'} for controlled vocabs and
     * {
     *    <field_name>:
     *      { '<default_locale>: 'field_name'},
     *    <field_descripton>:
     *      { <default_locale>: 'field_descripton'}
     * }
     * for user added entries
     * @param {object} record - Record to serialize
     * @param {string} defaultLocale - The default locale
     * @returns
     */

  }, {
    key: "serialize",
    value: function serialize(record, defaultLocale) {
      var _this6 = this;

      var fieldValue = _get(record, this.fieldpath, this.serializedDefault);

      var serializedValue = null;

      var _serialize = function _serialize(value) {
        var clonedValue = _cloneDeep(value);

        if ("id" in value) {
          return {
            id: value.id
          };
        } else {
          _this6.localeFields.forEach(function (field) {
            if (field in value) {
              clonedValue[field] = _defineProperty({}, defaultLocale, value[field]);
            }
          });
        }

        return clonedValue;
      };

      if (fieldValue !== null) {
        serializedValue = Array.isArray(fieldValue) ? fieldValue.map(_serialize) : _serialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, serializedValue || fieldValue);
    }
  }]);

  return RightsVocabularyField;
}(VocabularyField);
var FundingField = /*#__PURE__*/function (_Field2) {
  _inherits(FundingField, _Field2);

  var _super4 = _createSuper(FundingField);

  function FundingField(_ref4) {
    var fieldpath = _ref4.fieldpath,
        _ref4$deserializedDef = _ref4.deserializedDefault,
        deserializedDefault = _ref4$deserializedDef === void 0 ? null : _ref4$deserializedDef,
        _ref4$serializedDefau = _ref4.serializedDefault,
        serializedDefault = _ref4$serializedDefau === void 0 ? null : _ref4$serializedDefau;

    _classCallCheck(this, FundingField);

    return _super4.call(this, {
      fieldpath: fieldpath,
      deserializedDefault: deserializedDefault,
      serializedDefault: serializedDefault
    });
  }
  /**
   * Deserializes a funding record.
   *
   * @param {object} record the funding record to be deserialized.
   * @param {string} defaultLocale - The default locale
   *
   * @returns {object} the deserialized record.
   */


  _createClass(FundingField, [{
    key: "deserialize",
    value: function deserialize(record, defaultLocale) {
      /**
       * Deserializes a record. In case the record contains a 'title' property, it will extract its 'en' property.
       *
       * @param {object} value The object to be deserialized.
       *
       * @todo record's title is deserialized reading an 'en' locale. This needs to take into account the current locale or pass that
       * responsability to backend.
       *
       * @returns {(object|*)} Returns a deep copy of the given object.
       */
      var _deserialize = function _deserialize(value) {
        var deserializedValue = _cloneDeep(value);

        if (value !== null && value !== void 0 && value.title) {
          deserializedValue.title = value.title[defaultLocale];
        }

        if (value.identifiers) {
          var allowedIdentifiers = ["url"];
          allowedIdentifiers.forEach(function (identifier) {
            var identifierValue = null;
            value.identifiers.forEach(function (v) {
              if (v.scheme === identifier) {
                identifierValue = v.identifier;
              }
            });

            if (identifierValue) {
              deserializedValue[identifier] = identifierValue;
            }
          });
          delete deserializedValue["identifiers"];
        }

        return deserializedValue;
      };

      var fieldValue = _get(record, this.fieldpath, this.deserializedDefault);

      var deserializedValue = null;

      if (fieldValue !== null) {
        deserializedValue = Array.isArray(fieldValue) ? fieldValue.map(_deserialize) : _deserialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, deserializedValue || fieldValue);
    }
    /**
     * Serializes a funding record.
     *
     * @param {object} record
     * @param {string} defaultLocale - The default locale
     *
     * @returns
     */

  }, {
    key: "serialize",
    value: function serialize(record, defaultLocale) {
      /**
       * Serializes a record. Either returns a new object with the record's id or returns a deep copy of the record.
       *
       * @param {object} value
       *
       * @todo record's title is serialized forcing an 'en' locale. This needs to take into account the current locale or pass that
       * responsability to backend.
       *
       * @returns an object containing the record's id, if it has an 'id' property.
       */
      var _serialize = function _serialize(value) {
        if (value.id) {
          return {
            id: value.id
          };
        } // Record is a custom record, without explicit 'id'


        var clonedValue = _cloneDeep(value);

        if (value.title) {
          clonedValue.title = _defineProperty({}, defaultLocale, value.title);
        }

        if (value.url) {
          clonedValue.identifiers = [{
            identifier: value.url,
            scheme: "url"
          }];
          delete clonedValue["url"];
        }

        return clonedValue;
      };

      var fieldValue = _get(record, this.fieldpath, this.serializedDefault);

      var serializedValue = null;

      if (fieldValue !== null) {
        serializedValue = Array.isArray(fieldValue) ? fieldValue.map(_serialize) : _serialize(fieldValue);
      }

      return _set(_cloneDeep(record), this.fieldpath, serializedValue || fieldValue);
    }
  }]);

  return FundingField;
}(Field);

function _classPrivateFieldBase(receiver, privateKey) {
  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
    throw new TypeError("attempted to use private field on non-instance");
  }

  return receiver;
}

var id = 0;
function _classPrivateFieldKey(name) {
  return "__private_" + id++ + "_" + name;
}

var _mapCustomFields = /*#__PURE__*/_classPrivateFieldKey("mapCustomFields");

var CustomField = /*#__PURE__*/function (_Field) {
  _inherits(CustomField, _Field);

  var _super = _createSuper(CustomField);

  function CustomField(_ref) {
    var _this;

    var fieldpath = _ref.fieldpath,
        _ref$deserializedDefa = _ref.deserializedDefault,
        deserializedDefault = _ref$deserializedDefa === void 0 ? null : _ref$deserializedDefa,
        _ref$serializedDefaul = _ref.serializedDefault,
        serializedDefault = _ref$serializedDefaul === void 0 ? null : _ref$serializedDefaul,
        _ref$allowEmpty = _ref.allowEmpty,
        allowEmpty = _ref$allowEmpty === void 0 ? false : _ref$allowEmpty,
        _ref$vocabularyFields = _ref.vocabularyFields,
        vocabularyFields = _ref$vocabularyFields === void 0 ? [] : _ref$vocabularyFields;

    _classCallCheck(this, CustomField);

    _this = _super.call(this, {
      fieldpath: fieldpath,
      deserializedDefault: deserializedDefault,
      serializedDefault: serializedDefault,
      allowEmpty: allowEmpty
    });
    Object.defineProperty(_assertThisInitialized(_this), _mapCustomFields, {
      value: _mapCustomFields2
    });
    _this.vocabularyFields = vocabularyFields;
    return _this;
  }

  _createClass(CustomField, [{
    key: "deserialize",
    value: function deserialize(record) {
      var _deserialize = function _deserialize(value) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
        var isVocabulary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (isVocabulary && value !== null && value !== void 0 && value.id) {
          return value.id;
        } // Add __key if i is passed i.e is an array. This is needed because of ArrayField
        // internal implementation


        if (i) value.__key = i;
        return value;
      };

      var _record = _cloneDeep(record);

      var customFields = _get(record, this.fieldpath, this.deserializedDefault);

      _classPrivateFieldBase(this, _mapCustomFields)[_mapCustomFields](_record, customFields, _deserialize);

      return _record;
    }
  }, {
    key: "serialize",
    value: function serialize(record) {
      var _serialize = function _serialize(value) {
        var isVocabulary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (isVocabulary && typeof value === "string") {
          return {
            id: value
          };
        } // Delete internal __key from the sent request payload


        delete value.__key;
        return value;
      };

      var _record = _cloneDeep(record);

      var customFields = _get(record, this.fieldpath, this.serializedDefault);

      _classPrivateFieldBase(this, _mapCustomFields)[_mapCustomFields](_record, customFields, _serialize);

      return _record;
    }
  }]);

  return CustomField;
}(Field);

function _mapCustomFields2(record, customFields, mapValue) {
  var _this2 = this;

  if (customFields !== null) {
    var _loop = function _loop() {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      var isVocabularyField = _this2.vocabularyFields.includes(key);

      var _value = _isArray(value) ? value.map(function (v, i) {
        return mapValue(v, i, isVocabularyField);
      }) : mapValue(value, null, isVocabularyField);

      record = _set(record, "custom_fields.".concat(key), _value);
    };

    for (var _i = 0, _Object$entries = Object.entries(customFields); _i < _Object$entries.length; _i++) {
      _loop();
    }
  }
}

var DepositRecordSerializer = /*#__PURE__*/function () {
  /* eslint-disable no-unused-vars */
  function DepositRecordSerializer(defaultLocale) {
    _classCallCheck(this, DepositRecordSerializer);

    if (this.constructor === DepositRecordSerializer) {
      throw new Error("Abstract");
    }
  }

  _createClass(DepositRecordSerializer, [{
    key: "deserialize",
    value: function deserialize(record) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "deserializeErrors",
    value: function deserializeErrors(errors) {
      throw new Error("Not implemented.");
    }
  }, {
    key: "serialize",
    value: function serialize(record) {
      throw new Error("Not implemented.");
    }
  }]);

  return DepositRecordSerializer;
}();
var RDMDepositRecordSerializer = /*#__PURE__*/function (_DepositRecordSeriali) {
  _inherits(RDMDepositRecordSerializer, _DepositRecordSeriali);

  var _super = _createSuper(RDMDepositRecordSerializer);

  function RDMDepositRecordSerializer(defaultLocale) {
    var _this;

    var customFieldVocabularies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, RDMDepositRecordSerializer);

    _this = _super.call(this);
    _this.defaultLocale = defaultLocale;
    _this.customFieldVocabularies = customFieldVocabularies;
    return _this;
  }

  _createClass(RDMDepositRecordSerializer, [{
    key: "depositRecordSchema",
    get: function get() {
      return {
        files: new Field({
          fieldpath: "files"
        }),
        links: new Field({
          fieldpath: "links"
        }),
        expanded: new Field({
          fieldpath: "expanded",
          deserializedDefault: {}
        }),
        pids: new Field({
          fieldpath: "pids",
          deserializedDefault: {},
          serializedDefault: {}
        }),
        title: new Field({
          fieldpath: "metadata.title",
          deserializedDefault: ""
        }),
        additional_titles: new SchemaField({
          fieldpath: "metadata.additional_titles",
          schema: {
            title: new Field({
              fieldpath: "title"
            }),
            type: new VocabularyField({
              fieldpath: "type",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            lang: new VocabularyField({
              fieldpath: "lang",
              deserializedDefault: "",
              serializedDefault: ""
            })
          }
        }),
        additional_descriptions: new SchemaField({
          fieldpath: "metadata.additional_descriptions",
          schema: {
            description: new Field({
              fieldpath: "description"
            }),
            type: new VocabularyField({
              fieldpath: "type",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            lang: new VocabularyField({
              fieldpath: "lang",
              deserializedDefault: "",
              serializedDefault: ""
            })
          }
        }),
        creators: new SchemaField({
          fieldpath: "metadata.creators",
          schema: {
            person_or_org: new Field({
              fieldpath: "person_or_org"
            }),
            role: new VocabularyField({
              fieldpath: "role",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            affiliations: new AllowAdditionsVocabularyField({
              fieldpath: "affiliations",
              deserializedDefault: [],
              serializedDefault: [],
              labelField: "name"
            })
          }
        }),
        contributors: new SchemaField({
          fieldpath: "metadata.contributors",
          schema: {
            person_or_org: new Field({
              fieldpath: "person_or_org"
            }),
            role: new VocabularyField({
              fieldpath: "role",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            affiliations: new AllowAdditionsVocabularyField({
              fieldpath: "affiliations",
              deserializedDefault: [],
              serializedDefault: [],
              labelField: "name"
            })
          }
        }),
        resource_type: new VocabularyField({
          fieldpath: "metadata.resource_type",
          deserializedDefault: "",
          serializedDefault: ""
        }),
        access: new Field({
          fieldpath: "access",
          deserializedDefault: {
            record: "public",
            files: "public"
          }
        }),
        publication_date: new Field({
          fieldpath: "metadata.publication_date",
          deserializedDefault: ""
        }),
        dates: new SchemaField({
          fieldpath: "metadata.dates",
          schema: {
            date: new Field({
              fieldpath: "date"
            }),
            type: new VocabularyField({
              fieldpath: "type",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            description: new Field({
              fieldpath: "description"
            })
          },
          deserializedDefault: []
        }),
        languages: new VocabularyField({
          fieldpath: "metadata.languages",
          deserializedDefault: [],
          serializedDefault: []
        }),
        identifiers: new SchemaField({
          fieldpath: "metadata.identifiers",
          schema: {
            scheme: new Field({
              fieldpath: "scheme"
            }),
            identifier: new Field({
              fieldpath: "identifier"
            })
          },
          deserializedDefault: []
        }),
        related_identifiers: new SchemaField({
          fieldpath: "metadata.related_identifiers",
          schema: {
            scheme: new Field({
              fieldpath: "scheme"
            }),
            identifier: new Field({
              fieldpath: "identifier"
            }),
            relation_type: new VocabularyField({
              fieldpath: "relation_type",
              deserializedDefault: "",
              serializedDefault: ""
            }),
            resource_type: new VocabularyField({
              fieldpath: "resource_type",
              deserializedDefault: "",
              serializedDefault: ""
            })
          },
          deserializedDefault: []
        }),
        subjects: new AllowAdditionsVocabularyField({
          fieldpath: "metadata.subjects",
          deserializedDefault: [],
          serializedDefault: [],
          labelField: "subject"
        }),
        funding: new SchemaField({
          fieldpath: "metadata.funding",
          schema: {
            award: new FundingField({
              fieldpath: "award",
              deserializedDefault: {}
            }),
            funder: new FundingField({
              fieldpath: "funder",
              deserializedDefault: {}
            })
          }
        }),
        version: new Field({
          fieldpath: "metadata.version",
          deserializedDefault: ""
        }),
        rights: new RightsVocabularyField({
          fieldpath: "metadata.rights",
          deserializedDefault: [],
          serializedDefault: [],
          localeFields: ["title", "description"]
        }),
        custom_fields: new CustomField({
          fieldpath: "custom_fields",
          deserializedDefault: {},
          serializedDefault: {},
          vocabularyFields: this.customFieldVocabularies
        })
      };
    }
    /**
     * Remove empty fields from record
     * @method
     * @param {object} obj - potentially empty object
     * @returns {object} record - without empty fields
     */

  }, {
    key: "_removeEmptyValues",
    value: function _removeEmptyValues(obj) {
      var _this2 = this;

      if (_isArray(obj)) {
        var mappedValues = obj.map(function (value) {
          return _this2._removeEmptyValues(value);
        });
        var filterValues = mappedValues.filter(function (value) {
          if (_isBoolean(value) || _isNumber(value)) {
            return value;
          }

          return !_isEmpty(value);
        });
        return filterValues;
      } else if (_isObject(obj)) {
        var _mappedValues = _mapValues(obj, function (value) {
          return _this2._removeEmptyValues(value);
        });

        var pickedValues = _pickBy(_mappedValues, function (value) {
          if (_isArray(value) || _isObject(value)) {
            return !_isEmpty(value);
          }

          return !_isNull(value);
        });

        return pickedValues;
      }

      return _isNumber(obj) || _isBoolean(obj) || obj ? obj : null;
    }
    /**
     * Deserialize backend record into format compatible with frontend.
     * @method
     * @param {object} record - potentially empty object
     * @returns {object} frontend compatible record object
     */

  }, {
    key: "deserialize",
    value: function deserialize(record) {
      // NOTE: cloning nows allows us to manipulate the copy with impunity
      //       without affecting the original
      var originalRecord = _pick(_cloneDeep(record), ["access", "expanded", "metadata", "id", "links", "files", "is_published", "versions", "parent", "status", "pids", "ui", "custom_fields"]); // FIXME: move logic in a more sophisticated PIDField that allows empty values
      // to be sent in the backend


      var savedPIDsFieldValue = originalRecord.pids || {}; // Remove empty null values from record. This happens when we create a new
      // draft and the backend produces an empty record filled in with null
      // values, array of null values etc.
      // TODO: Backend should not attempt to provide empty values. It should just
      //       return existing record in case of edit or {} in case of new.

      var deserializedRecord = this._removeEmptyValues(originalRecord); // FIXME: Add back pids field in case it was removed


      deserializedRecord = _objectSpread2(_objectSpread2({}, deserializedRecord), !_isEmpty(savedPIDsFieldValue) ? {
        pids: savedPIDsFieldValue
      } : {});

      for (var key in this.depositRecordSchema) {
        deserializedRecord = this.depositRecordSchema[key].deserialize(deserializedRecord, this.defaultLocale);
      }

      return deserializedRecord;
    }
    /**
     * Deserialize backend record errors into format compatible with frontend.
     * @method
     * @param {array} errors - array of error objects
     * @returns {object} - object representing errors
     */

  }, {
    key: "deserializeErrors",
    value: function deserializeErrors(errors) {
      var deserializedErrors = {}; // TODO - WARNING: This doesn't convert backend error paths to frontend
      //                 error paths. Doing so is non-trivial
      //                 (re-using deserialize has some caveats)
      //                 Form/Error UX is tackled in next sprint and this is good
      //                 enough for now.

      var _iterator = _createForOfIteratorHelper(errors),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var e = _step.value;

          _set(deserializedErrors, e.field, e.messages.join(" "));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return deserializedErrors;
    }
    /**
     * Serialize record to send to the backend.
     * @method
     * @param {object} record - in frontend format
     * @returns {object} record - in API format
     *
     */

  }, {
    key: "serialize",
    value: function serialize(record) {
      // NOTE: cloning nows allows us to manipulate the copy with impunity without
      //       affecting the original
      var originalRecord = _pick(_cloneDeep(record), ["access", "metadata", "id", "links", "files", "pids", "parent", "custom_fields"]); // Save pids so they are not removed when an empty value is passed


      var savedPIDsFieldValue = originalRecord.pids || {};

      var serializedRecord = this._removeEmptyValues(originalRecord);

      for (var key in this.depositRecordSchema) {
        serializedRecord = this.depositRecordSchema[key].serialize(serializedRecord, this.defaultLocale);
      } // Remove empty values again because serialization may add some back


      serializedRecord = this._removeEmptyValues(serializedRecord); // Add back pids field in case it was removed

      serializedRecord = _objectSpread2(_objectSpread2({}, serializedRecord), {
        pids: _isEmpty(savedPIDsFieldValue) ? {} : savedPIDsFieldValue
      }); // Finally add back 'metadata' if absent
      // We need to do this for backend validation, unless we mark metadata as
      // required in the backend or find another alternative.

      _defaults(serializedRecord, {
        metadata: {},
        custom_fields: {}
      });

      return serializedRecord;
    }
  }]);

  return RDMDepositRecordSerializer;
}(DepositRecordSerializer);

// This file is part of React-Invenio-Deposit
// Copyright (C) 2020-2022 CERN.
// Copyright (C) 2020-2022 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
var DepositService = /*#__PURE__*/function () {
  function DepositService(draftsService, filesService) {
    _classCallCheck(this, DepositService);

    this.draftsService = draftsService;
    this.filesService = filesService;
  }

  _createClass(DepositService, [{
    key: "drafts",
    get: function get() {
      return this.draftsService;
    }
  }, {
    key: "files",
    get: function get() {
      return this.filesService;
    }
  }]);

  return DepositService;
}();

// This file is part of React-Invenio-Deposit
var rootReducer = combineReducers({
  deposit: depositReducer,
  files: fileReducer
});

var _excluded = ["record", "preselectedCommunity", "files", "config", "permissions"];

var preloadFiles = function preloadFiles(files) {
  var _files = _cloneDeep(files);

  return {
    links: files.links || {},
    entries: _get(_files, "entries", []).map(function (file) {
      var hasSize = file.size >= 0;
      var fileState = {
        name: file.key,
        size: file.size || 0,
        checksum: file.checksum || "",
        links: file.links || {}
      }; // TODO: fix this as the lack of size is not always an error e.g upload ongoing in another tab

      return hasSize ? _objectSpread2({
        status: UploadState.finished,
        progressPercentage: 100
      }, fileState) : _objectSpread2({
        status: UploadState.pending
      }, fileState);
    }).reduce(function (acc, current) {
      acc[current.name] = _objectSpread2({}, current);
      return acc;
    }, {})
  };
};

function configureStore(appConfig) {
  var record = appConfig.record,
      preselectedCommunity = appConfig.preselectedCommunity,
      files = appConfig.files,
      config = appConfig.config,
      permissions = appConfig.permissions,
      extra = _objectWithoutProperties(appConfig, _excluded); // when not passed, make sure that the value is `undefined` and not `null`


  var _preselectedCommunity = preselectedCommunity || undefined;

  var initialDepositState = {
    record: record,
    editorState: computeDepositState(record, _preselectedCommunity),
    config: config,
    permissions: permissions,
    actionState: null,
    actionStateExtra: {}
  };
  var preloadedState = {
    deposit: initialDepositState,
    files: preloadFiles(files || {})
  };
  var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
  return createStore(rootReducer, preloadedState, composeEnhancers(applyMiddleware(thunk.withExtraArgument(_objectSpread2({
    config: config
  }, extra)))));
}

var RDMUploadProgressNotifier = /*#__PURE__*/function (_UploadProgressNotifi) {
  _inherits(RDMUploadProgressNotifier, _UploadProgressNotifi);

  var _super = _createSuper(RDMUploadProgressNotifier);

  function RDMUploadProgressNotifier() {
    _classCallCheck(this, RDMUploadProgressNotifier);

    return _super.apply(this, arguments);
  }

  _createClass(RDMUploadProgressNotifier, [{
    key: "onUploadAdded",
    value: function onUploadAdded(filename) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_ADDED,
        payload: {
          filename: filename
        }
      });
    }
  }, {
    key: "onUploadStarted",
    value: function onUploadStarted(filename, cancelFn) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_SET_CANCEL_FUNCTION,
        payload: {
          filename: filename,
          cancelUploadFn: cancelFn
        }
      });
    }
  }, {
    key: "onUploadProgress",
    value: function onUploadProgress(filename, percent) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_IN_PROGRESS,
        payload: {
          filename: filename,
          percent: percent
        }
      });
    }
  }, {
    key: "onUploadCompleted",
    value: function onUploadCompleted(filename, size, checksum, links) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_FINISHED,
        payload: {
          filename: filename,
          size: size,
          checksum: checksum,
          links: links
        }
      });
    }
  }, {
    key: "onUploadCancelled",
    value: function onUploadCancelled(filename) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_CANCELLED,
        payload: {
          filename: filename
        }
      });
    }
  }, {
    key: "onUploadFailed",
    value: function onUploadFailed(filename) {
      this.dispatcher && this.dispatcher({
        type: FILE_UPLOAD_FAILED,
        payload: {
          filename: filename
        }
      });
    }
  }]);

  return RDMUploadProgressNotifier;
}(UploadProgressNotifier);

var DepositFormApp = /*#__PURE__*/function (_Component) {
  _inherits(DepositFormApp, _Component);

  var _super = _createSuper(DepositFormApp);

  function DepositFormApp(props) {
    var _this;

    _classCallCheck(this, DepositFormApp);

    _this = _super.call(this, props);
    var recordSerializer = props.recordSerializer ? props.recordSerializer : new RDMDepositRecordSerializer(props.config.default_locale, props.config.custom_fields.vocabularies);
    var apiHeaders = props.config.apiHeaders ? props.config.apiHeaders : null;
    var additionalApiConfig = {
      headers: apiHeaders
    };
    var apiClient = props.apiClient ? props.apiClient : new RDMDepositApiClient(additionalApiConfig, props.config.createUrl, recordSerializer);
    var fileApiClient = props.fileApiClient ? props.fileApiClient : new RDMDepositFileApiClient(additionalApiConfig);
    var draftsService = props.draftsService ? props.draftsService : new RDMDepositDraftsService(apiClient);
    var filesService = props.filesService ? props.filesService : new RDMDepositFilesService(fileApiClient, props.config.fileUploadConcurrency);
    var service = new DepositService(draftsService, filesService);
    var appConfig = {
      config: props.config,
      record: recordSerializer.deserialize(props.record),
      preselectedCommunity: props.preselectedCommunity,
      files: props.files,
      apiClient: apiClient,
      fileApiClient: fileApiClient,
      service: service,
      permissions: props.permissions,
      recordSerializer: recordSerializer
    };
    _this.store = configureStore(appConfig);
    var progressNotifier = new RDMUploadProgressNotifier(_this.store.dispatch);
    filesService.setProgressNotifier(progressNotifier);
    return _this;
  }

  _createClass(DepositFormApp, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return /*#__PURE__*/React.createElement(Provider, {
        store: this.store
      }, /*#__PURE__*/React.createElement(I18nextProvider, {
        i18n: i18next
      }, /*#__PURE__*/React.createElement(DepositBootstrap, null, children)));
    }
  }]);

  return DepositFormApp;
}(Component);
DepositFormApp.defaultProps = {
  preselectedCommunity: undefined,
  permissions: undefined,
  apiClient: undefined,
  fileApiClient: undefined,
  draftsService: undefined,
  filesService: undefined,
  recordSerializer: undefined,
  files: undefined,
  children: undefined
};

// This file is part of React-Invenio-Deposit
// Copyright (C) 2020 CERN.
// Copyright (C) 2020 Northwestern University.
//
// React-Invenio-Deposit is free software; you can redistribute it and/or modify it
// under the terms of the MIT License; see LICENSE file for more details.
var getInputFromDOM = function getInputFromDOM(elementName) {
  var element = document.getElementsByName(elementName);

  if (element.length > 0 && element[0].hasAttribute("value")) {
    return JSON.parse(element[0].value);
  }

  return null;
};

export { AccessRightField, AdditionalTitlesField, AffiliationsField, ComingSoonField, CommunityHeader, CommunitySelectionModal, CreatibutorsField, DatesField, DeleteButton, DepositApiClient, DepositErrorHandler, DepositFormApp, DepositFormTitle, DepositRecordSerializer, DepositStatusBox, DescriptionsField, FileUploader, FormFeedback, FundingField$1 as FundingField, IdentifiersField, LanguagesField, LicenseField, NewVersionButton, PIDField, PreviewButton, PublicationDateField, SubmitReviewOrPublishButton as PublishButton, PublisherField, RelatedWorksField, ResourceTypeField, SaveButton, SubjectsField, TitlesField, VersionField, connect, getInputFromDOM, humanReadableBytes };
//# sourceMappingURL=index.js.map
