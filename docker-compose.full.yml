# Example of a full infrastructure stack
#
# Note, this file is not suitable for a production deployment. It is only an
# example of all the infrastructure components needed in a real production
# deployment.
#
# Usage::
#
#   $ docker-compose up --file docker-compose.full.yml -d
#
# Following services are included:
# - Frontend: Nginx (exposed ports: 80 and 443)
# - Cache: Redis (exposed port: 6379)
# - UI application: UWSGI (not exposed)
# - API application: UWSGI (not exposed)
# - Cache: Redis (exposed port: 6379)
# - DB: (PostgresSQL) (exposed port: 5432 or 3306)
# - Message queue: RabbitMQ (exposed ports: 5672, 15672)
# - Search platform: (OpenSearch) (exposed ports: 9200, 9300)
# - OpenSearch Dashboard (view OS indexes) (exposed ports: 5601)
#
version: '2.2'
services:
  cache:
    extends:
      file: docker-services.yml
      service: cache
  db:
    extends:
      file: docker-services.yml
      service: db
  mq:
    extends:
      file: docker-services.yml
      service: mq
  search:
    extends:
      file: docker-services.yml
      service: search
  opensearch-dashboards:
    extends:
      file: docker-services.yml
      service: opensearch-dashboards
  pgadmin:
    extends:
      file: docker-services.yml
      service: pgadmin
  # Frontend
  frontend:
    extends:
      file: docker-services.yml
      service: frontend
    volumes:
      - ./docker/nginx_containerized/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx_containerized/conf.d:/etc/nginx/conf.d
      # - ./static:/opt/invenio/var/instance/static
      - static_data:/opt/invenio/var/instance/static
    depends_on:
      - web-ui
      - web-api
    ports:
      - "80:80"
      - "443:443"

  # UI Application
  # This container holds Python, pip, the virtualenv, and the invenio code,
  # Node.js, NPM and some standard libraries Invenio usually needs
  # command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini --daemonize=logs/uwsgi-ui.log --log-reopen --pidfile=/tmp/kcr_ui.pid"]
  web-ui:
    extends:
      file: docker-services.yml
      service: app
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini"]
    image: knowledge-commons-repository:latest
    ports:
      - "5000"
    volumes:
      # TODO: in production copy these files rather than mounting?
      # - ./invenio.cfg:/opt/invenio/var/instance/invenio.cfg
      # - ./docker/uwsgi/uwsgi_ui.ini:/opt/invenio/var/instance/uwsgi_ui.ini:ro  # TODO: ???
      # - ${INVENIO_INSTANCE_PATH}/app_data:/opt/invenio/var/instance/app_data:ro
      # - ${INVENIO_INSTANCE_PATH}/assets:/opt/invenio/var/instance/assets:ro
      # - ${INVENIO_INSTANCE_PATH}/templates:/opt/invenio/var/instance/templates:ro
      # - ./translations:/opt/invenio/var/instance/translations:ro
      # - .:/opt/invenio/src:ro
      - static_data:/opt/invenio/var/instance/static
      - archived_data:/opt/invenio/var/instance/archive
      - uploaded_data:/opt/invenio/var/instance/data

  # API Rest Application
  # command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini --daemonize=logs/uwsgi-api-${mydate}.log --log-reopen --pidfile=/tmp/kcr_api.pid"]
  web-api:
    extends:
      file: docker-services.yml
      service: app
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini"]
    image: knowledge-commons-repository:latest
    ports:
      - "5001"
    volumes:
      # TODO: in production copy these files rather than mounting?
      # - ./invenio.cfg:/opt/invenio/var/instance/invenio.cfg
      # - ./docker/uwsgi/uwsgi_rest.ini:/opt/invenio/var/instance/uwsgi_rest.ini:ro
      # - ${INVENIO_INSTANCE_PATH}/app_data:/opt/invenio/var/instance/app_data:ro
      # - ${INVENIO_INSTANCE_PATH}/assets:/opt/invenio/var/instance/assets:ro
      # - ${INVENIO_INSTANCE_PATH}/static:/opt/invenio/var/instance/static:ro
      # - ${INVENIO_INSTANCE_PATH}/templates:/opt/invenio/var/instance/templates:ro
      # - ./translations:/opt/invenio/var/instance/translations:ro
      # - .:/opt/invenio/src:ro
      - archived_data:/opt/invenio/var/instance/archive
      - uploaded_data:/opt/invenio/var/instance/data
  # Worker
  worker:
    extends:
      file: docker-services.yml
      service: app
    command: ["celery -A invenio_app.celery worker --beat --loglevel INFO"]
    image: knowledge-commons-repository:latest
    volumes:
      - uploaded_data:/opt/invenio/var/instance/data
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
volumes:
  archived_data:
  static_data:
  uploaded_data:
