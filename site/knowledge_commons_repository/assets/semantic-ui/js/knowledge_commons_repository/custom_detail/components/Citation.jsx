// This file is part of Knowledge Commons Repository
// Copyright (C) 2023 MESH Research
//
// It is modified from files provided in InvenioRDM
// Copyright (C) 2021 CERN.
// Copyright (C) 2021 Graz University of Technology.
// Copyright (C) 2021 TU Wien
//
// Knowledge Commons Repository and Invenio RDM Records are both free software;
// you can redistribute them and/or modify them under the terms of the MIT
// License; see LICENSE file for more details.

import React, { useState, useEffect } from "react";
import axios from "axios";
import _debounce from "lodash/debounce";
import PropTypes from "prop-types";
import {
  Dropdown,
  Header,
  Grid,
  Label,
  Message,
  Placeholder,
} from "semantic-ui-react";
import { withCancel } from "react-invenio-forms";
import { CopyButton } from "@js/invenio_app_rdm/components/CopyButton";
import { i18next } from "@translations/invenio_app_rdm/i18next";

/** Component for the citation section of the right sidebar.
 *
 * @param {object} props
 *
 * Expects the following props:
 * - record: record to display
 * - styles: list of citation styles
 * - defaultStyle: default citation style
 *
 * Renders a section with a dropdown to select the citation style
 * and the citation text.
 *
 * The citation text is generated by fetching the record's citation
 * from the REST API.
 */
const Citation = ({
  record,
  citationStyles,
  citationStyleDefault,
  passedClassNames,
}) => {
  const [loading, setLoading] = useState(true);
  const [citation, setCitation] = useState("");
  const [error, setError] = useState(null);
  let cancellableFetchCitation = null;

  useEffect(() => {
    getCitation(record, citationStyleDefault);
    return () => {
      cancellableFetchCitation?.cancel();
    };
  }, []);

  const placeholderLoader = () => {
    return (
      <Placeholder>
        <Placeholder.Paragraph>
          <Placeholder.Line />
          <Placeholder.Line />
          <Placeholder.Line />
        </Placeholder.Paragraph>
      </Placeholder>
    );
  };

  const errorMessage = (message) => {
    return <Message negative>{message}</Message>;
  };

  const fetchCitation = async (record, style) => {
    return await axios(
      `${record.links.self}?locale=${navigator.language}&style=${style}`,
      {
        headers: {
          Accept: "text/x-bibliography",
        },
      }
    );
  };

  const getCitation = async (record, style) => {
    setLoading(true);
    setCitation("");
    setError("");

    cancellableFetchCitation = withCancel(fetchCitation(record, style));

    try {
      const response = await cancellableFetchCitation.promise;
      setLoading(false);
      setCitation(response.data);
    } catch (error) {
      if (error !== "UNMOUNTED") {
        setLoading(false);
        setCitation("");
        setError(i18next.t("An error occurred while generating the citation."));
      }
    }
  };

  const citationOptions = citationStyles.map((style) => {
    return {
      key: style[0],
      value: style[0],
      text: style[1],
    };
  });

  return (
    <Grid className={`record-citation ${passedClassNames}`}>
      <Grid.Row verticalAlign="bottom" className="pt-0 pb-0">
        <Grid.Column computer={16} className="">
          <div id="citation-text" className="wrap-overflowing-text">
            {loading ? placeholderLoader() : citation}
          </div>
        </Grid.Column>
      </Grid.Row>

      <Grid.Row verticalAlign="middle">
        <Grid.Column
          mobile={12}
          tablet={12}
          computer={12}
          className=""
          textAlign="left"
        >
          <label basic id="citation-style-label" className="">
            {i18next.t("Style")}
          </label>
          <Dropdown
            className="citation-dropdown"
            label="Style"
            aria-labelledby="citation-style-label"
            defaultValue={citationStyleDefault}
            options={citationOptions}
            selection
            onChange={_debounce(
              (event, data) => getCitation(record, data.value),
              500
            )}
          />
        </Grid.Column>
        <Grid.Column computer={4} className="" textAlign="right">
          <CopyButton text={citation} />
        </Grid.Column>
      </Grid.Row>
      {error ? errorMessage(error) : null}
    </Grid>
  );
};

Citation.propTypes = {
  citationStyles: PropTypes.array.isRequired,
  record: PropTypes.object.isRequired,
  citationStyleDefault: PropTypes.string.isRequired,
};

export { Citation };
